{"ast":null,"code":"'use strict';\n\nvar createAbortError = function createAbortError() {\n  var error = new Error('Delay aborted');\n  error.name = 'AbortError';\n  return error;\n};\n\nvar createDelay = function createDelay(_ref) {\n  var _ref$clearTimeout = _ref.clearTimeout,\n      clear = _ref$clearTimeout === void 0 ? clearTimeout : _ref$clearTimeout,\n      _ref$setTimeout = _ref.setTimeout,\n      set = _ref$setTimeout === void 0 ? setTimeout : _ref$setTimeout,\n      willResolve = _ref.willResolve;\n  return function (ms) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        value = _ref2.value,\n        signal = _ref2.signal;\n\n    if (signal && signal.aborted) {\n      return Promise.reject(createAbortError());\n    }\n\n    var timeoutId;\n    var settle;\n    var rejectFn;\n\n    var signalListener = function signalListener() {\n      clear(timeoutId);\n      rejectFn(createAbortError());\n    };\n\n    var cleanup = function cleanup() {\n      if (signal) {\n        signal.removeEventListener('abort', signalListener);\n      }\n    };\n\n    var delayPromise = new Promise(function (resolve, reject) {\n      settle = function settle() {\n        cleanup();\n\n        if (willResolve) {\n          resolve(value);\n        } else {\n          reject(value);\n        }\n      };\n\n      rejectFn = reject;\n      timeoutId = set(settle, ms);\n    });\n\n    if (signal) {\n      signal.addEventListener('abort', signalListener, {\n        once: true\n      });\n    }\n\n    delayPromise.clear = function () {\n      clear(timeoutId);\n      timeoutId = null;\n      cleanup();\n      settle();\n    };\n\n    return delayPromise;\n  };\n};\n\nvar delay = createDelay({\n  willResolve: true\n});\ndelay.reject = createDelay({\n  willResolve: false\n});\n\ndelay.createWithTimers = function (_ref3) {\n  var clearTimeout = _ref3.clearTimeout,\n      setTimeout = _ref3.setTimeout;\n  var delay = createDelay({\n    clearTimeout: clearTimeout,\n    setTimeout: setTimeout,\n    willResolve: true\n  });\n  delay.reject = createDelay({\n    clearTimeout: clearTimeout,\n    setTimeout: setTimeout,\n    willResolve: false\n  });\n  return delay;\n};\n\nmodule.exports = delay; // TODO: Remove this for the next major release\n\nmodule.exports.default = delay;","map":null,"metadata":{},"sourceType":"script"}