{"ast":null,"code":"import _classCallCheck from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\React\\\\react-gradu\\\\src\\\\components\\\\independent\\\\webRTCRoom\\\\WebRTCRoom.jsx\";\nimport React, { Component } from \"react\";\nimport videoCall from \"./helpers/simple-peer\";\nimport { Router } from \"react-router-dom\";\nimport \"./webrtc.style.css\";\nimport io from \"socket.io-client\";\nexport var WebRTCRoom =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WebRTCRoom, _Component);\n\n  //MARKUP: constructor 선언\n  function WebRTCRoom() {\n    var _this;\n\n    _classCallCheck(this, WebRTCRoom);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebRTCRoom).call(this));\n\n    _this.enter = function (roomId) {\n      var peer = videoCall.init(_this.state.localStream, _this.state.initiator);\n      peer.on(\"signal\", function (data) {\n        var signal = {\n          room: roomId,\n          desc: data\n        };\n\n        _this.state.socket.emit(\"signal\", signal);\n      });\n      peer.on(\"stream\", function (stream) {\n        _this.remoteVideo.srcObject = stream;\n      });\n      peer.on(\"error\", function (err) {\n        console.log(err);\n      });\n    };\n\n    _this.call = function (otherId) {\n      videoCall.connect(otherId);\n    };\n\n    _this.renderFull = function () {\n      if (_this.state.full) {\n        return \"The room is full\";\n      }\n    };\n\n    _this.state = {\n      localStream: {},\n      remoteStreamUrl: \"\",\n      streamUrl: \"\",\n      initiator: false,\n      peer: {},\n      full: false\n    };\n    return _this;\n  } //MARKUP: componentDidMount - 데이터 로드\n\n\n  _createClass(WebRTCRoom, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var socket = io(process.env.REACT_APP_SIGNALING_SERVER);\n      var component = this;\n      this.setState({\n        socket: socket\n      });\n      var roomId = this.props.match.params.roomId;\n      this.getUserMedia().then(function () {\n        socket.emit(\"join\", {\n          roomId: roomId\n        });\n      });\n      socket.on(\"init\", function () {\n        component.setState({\n          initiator: true\n        });\n      });\n      socket.on(\"ready\", function () {\n        component.enter(roomId);\n      });\n      socket.on(\"desc\", function (data) {\n        if (data.type === \"offer\" && component.state.initiator) return;\n        if (data.type === \"answer\" && !component.state.initiator) return;\n        component.call(data);\n      });\n      socket.on(\"disconnected\", function () {\n        component.setState({\n          initiator: true\n        });\n      });\n      socket.on(\"full\", function () {\n        component.setState({\n          full: true\n        });\n      });\n    } // MARKUP: getUserMedia\n    //TODO:음성 받아오는 곳으로 추청. STT붙이기 진행할 곳.\n\n  }, {\n    key: \"getUserMedia\",\n    value: function getUserMedia(cb) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        navigator.getUserMedia = navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        var op = {\n          video: {\n            width: {\n              min: 160,\n              ideal: 640,\n              max: 1280\n            },\n            height: {\n              min: 120,\n              ideal: 360,\n              max: 720\n            }\n          },\n          audio: true\n        };\n        navigator.getUserMedia(op, function (stream) {\n          _this2.setState({\n            streamUrl: stream,\n            localStream: stream\n          });\n\n          _this2.localVideo.srcObject = stream;\n          resolve();\n        }, function () {});\n      });\n    } //MARKUP: enter video conference Room\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"video-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"local-video-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        id: \"localVideo\",\n        muted: true,\n        ref: function ref(video) {\n          return _this3.localVideo = video;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(\"video\", {\n        autoPlay: true,\n        id: \"remoteVideo\",\n        ref: function ref(video) {\n          return _this3.remoteVideo = video;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), this.renderFull());\n    }\n  }]);\n\n  return WebRTCRoom;\n}(Component);\nexport default WebRTCRoom;","map":{"version":3,"sources":["C:\\React\\react-gradu\\src\\components\\independent\\webRTCRoom\\WebRTCRoom.jsx"],"names":["React","Component","videoCall","Router","io","WebRTCRoom","enter","roomId","peer","init","state","localStream","initiator","on","data","signal","room","desc","socket","emit","stream","remoteVideo","srcObject","err","console","log","call","otherId","connect","renderFull","full","remoteStreamUrl","streamUrl","process","env","REACT_APP_SIGNALING_SERVER","component","setState","props","match","params","getUserMedia","then","type","cb","Promise","resolve","reject","navigator","webkitGetUserMedia","mozGetUserMedia","op","video","width","min","ideal","max","height","audio","localVideo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport videoCall from \"./helpers/simple-peer\";\r\nimport { Router } from \"react-router-dom\";\r\nimport \"./webrtc.style.css\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport class WebRTCRoom extends Component {\r\n  //MARKUP: constructor 선언\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      localStream: {},\r\n      remoteStreamUrl: \"\",\r\n      streamUrl: \"\",\r\n      initiator: false,\r\n      peer: {},\r\n      full: false\r\n    };\r\n  }\r\n\r\n  //MARKUP: componentDidMount - 데이터 로드\r\n  componentDidMount() {\r\n    const socket = io(process.env.REACT_APP_SIGNALING_SERVER);\r\n    const component = this;\r\n    this.setState({ socket });\r\n    const { roomId } = this.props.match.params;\r\n    this.getUserMedia().then(() => {\r\n      socket.emit(\"join\", { roomId: roomId });\r\n    });\r\n    socket.on(\"init\", () => {\r\n      component.setState({ initiator: true });\r\n    });\r\n    socket.on(\"ready\", () => {\r\n      component.enter(roomId);\r\n    });\r\n    socket.on(\"desc\", data => {\r\n      if (data.type === \"offer\" && component.state.initiator) return;\r\n      if (data.type === \"answer\" && !component.state.initiator) return;\r\n      component.call(data);\r\n    });\r\n    socket.on(\"disconnected\", () => {\r\n      component.setState({ initiator: true });\r\n    });\r\n    socket.on(\"full\", () => {\r\n      component.setState({ full: true });\r\n    });\r\n  }\r\n  // MARKUP: getUserMedia\r\n  //TODO:음성 받아오는 곳으로 추청. STT붙이기 진행할 곳.\r\n  getUserMedia(cb) {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.getUserMedia = navigator.getUserMedia =\r\n        navigator.getUserMedia ||\r\n        navigator.webkitGetUserMedia ||\r\n        navigator.mozGetUserMedia;\r\n      const op = {\r\n        video: {\r\n          width: { min: 160, ideal: 640, max: 1280 },\r\n          height: { min: 120, ideal: 360, max: 720 }\r\n        },\r\n        audio: true\r\n      };\r\n      navigator.getUserMedia(\r\n        op,\r\n        stream => {\r\n          this.setState({ streamUrl: stream, localStream: stream });\r\n          this.localVideo.srcObject = stream;\r\n          resolve();\r\n        },\r\n        () => {}\r\n      );\r\n    });\r\n  }\r\n  //MARKUP: enter video conference Room\r\n  enter = roomId => {\r\n    const peer = videoCall.init(this.state.localStream, this.state.initiator);\r\n    peer.on(\"signal\", data => {\r\n      const signal = {\r\n        room: roomId,\r\n        desc: data\r\n      };\r\n      this.state.socket.emit(\"signal\", signal);\r\n    });\r\n    peer.on(\"stream\", stream => {\r\n      this.remoteVideo.srcObject = stream;\r\n    });\r\n    peer.on(\"error\", function(err) {\r\n      console.log(err);\r\n    });\r\n  };\r\n  //MARKUP: videoCall\r\n  call = otherId => {\r\n    videoCall.connect(otherId);\r\n  };\r\n  renderFull = () => {\r\n    if (this.state.full) {\r\n      return \"The room is full\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"video-wrapper\">\r\n        <div className=\"local-video-wrapper\">\r\n          <video\r\n            autoPlay\r\n            id=\"localVideo\"\r\n            muted\r\n            ref={video => (this.localVideo = video)}\r\n          />\r\n        </div>\r\n        <video\r\n          autoPlay\r\n          id=\"remoteVideo\"\r\n          ref={video => (this.remoteVideo = video)}\r\n        />\r\n        {this.renderFull()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WebRTCRoom;\r\n"]},"metadata":{},"sourceType":"module"}