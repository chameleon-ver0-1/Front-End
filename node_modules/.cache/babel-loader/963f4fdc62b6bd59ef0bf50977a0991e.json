{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dropCollect = exports.dragSource = exports.tagTarget = exports.tagSource = undefined;\n\nvar _reactDom = require('react-dom');\n\nvar _utils = require('./utils');\n\nvar tagSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.tag.index,\n      index: props.index\n    };\n  },\n  canDrag: function canDrag(props) {\n    return (0, _utils.canDrag)(props);\n  }\n};\nvar tagTarget = {\n  hover: function hover(props, monitor, component) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index;\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect();\n    var hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n    var clientOffset = monitor.getClientOffset();\n    var hoverClientX = clientOffset.x - hoverBoundingRect.left; // Only perform the move when the mouse has crossed half of the items width\n\n    if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n      return;\n    }\n\n    if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n      return;\n    }\n\n    props.moveTag(dragIndex, hoverIndex);\n    monitor.getItem().index = hoverIndex;\n  },\n  canDrop: function canDrop(props) {\n    return (0, _utils.canDrop)(props);\n  }\n};\n\nvar dragSource = function dragSource(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar dropCollect = function dropCollect(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nexports.tagSource = tagSource;\nexports.tagTarget = tagTarget;\nexports.dragSource = dragSource;\nexports.dropCollect = dropCollect;","map":null,"metadata":{},"sourceType":"script"}