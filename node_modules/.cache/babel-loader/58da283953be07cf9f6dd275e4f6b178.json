{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as moment from 'moment';\nimport { polyfill } from 'react-lifecycles-compat';\nimport MonthCalendar from \"rc-calendar/es/MonthCalendar\";\nimport RcDatePicker from \"rc-calendar/es/Picker\";\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport interopDefault from '../_util/interopDefault';\nimport getDataOrAriaProps from '../_util/getDataOrAriaProps';\nimport { formatDate } from './utils';\nexport default function createPicker(TheCalendar) {\n  var CalenderWrapper =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(CalenderWrapper, _React$Component);\n\n    function CalenderWrapper(props) {\n      var _this;\n\n      _classCallCheck(this, CalenderWrapper);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(CalenderWrapper).call(this, props));\n\n      _this.renderFooter = function () {\n        var renderExtraFooter = _this.props.renderExtraFooter;\n\n        var _assertThisInitialize = _assertThisInitialized(_this),\n            prefixCls = _assertThisInitialize.prefixCls;\n\n        return renderExtraFooter ? React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-footer-extra\")\n        }, renderExtraFooter.apply(void 0, arguments)) : null;\n      };\n\n      _this.clearSelection = function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.handleChange(null);\n      };\n\n      _this.handleChange = function (value) {\n        var _assertThisInitialize2 = _assertThisInitialized(_this),\n            props = _assertThisInitialize2.props;\n\n        if (!('value' in props)) {\n          _this.setState({\n            value: value,\n            showDate: value\n          });\n        }\n\n        props.onChange(value, formatDate(value, props.format));\n      };\n\n      _this.handleCalendarChange = function (value) {\n        _this.setState({\n          showDate: value\n        });\n      };\n\n      _this.handleOpenChange = function (open) {\n        var onOpenChange = _this.props.onOpenChange;\n\n        if (!('open' in _this.props)) {\n          _this.setState({\n            open: open\n          });\n        }\n\n        if (onOpenChange) {\n          onOpenChange(open);\n        }\n      };\n\n      _this.saveInput = function (node) {\n        _this.input = node;\n      };\n\n      _this.renderPicker = function (_ref) {\n        var _classNames, _classNames2;\n\n        var getPrefixCls = _ref.getPrefixCls;\n        var _this$state = _this.state,\n            value = _this$state.value,\n            showDate = _this$state.showDate,\n            open = _this$state.open;\n        var props = omit(_this.props, ['onChange']);\n        var customizePrefixCls = props.prefixCls,\n            locale = props.locale,\n            localeCode = props.localeCode,\n            suffixIcon = props.suffixIcon;\n        var prefixCls = getPrefixCls('calendar', customizePrefixCls); // To support old version react.\n        // Have to add prefixCls on the instance.\n        // https://github.com/facebook/react/issues/12397\n\n        _this.prefixCls = prefixCls;\n        var placeholder = 'placeholder' in props ? props.placeholder : locale.lang.placeholder;\n        var disabledTime = props.showTime ? props.disabledTime : null;\n        var calendarClassName = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-time\"), props.showTime), _defineProperty(_classNames, \"\".concat(prefixCls, \"-month\"), MonthCalendar === TheCalendar), _classNames));\n\n        if (value && localeCode) {\n          value.locale(localeCode);\n        }\n\n        var pickerProps = {};\n        var calendarProps = {};\n        var pickerStyle = {};\n\n        if (props.showTime) {\n          calendarProps = {\n            // fix https://github.com/ant-design/ant-design/issues/1902\n            onSelect: _this.handleChange\n          };\n          pickerStyle.minWidth = 195;\n        } else {\n          pickerProps = {\n            onChange: _this.handleChange\n          };\n        }\n\n        if ('mode' in props) {\n          calendarProps.mode = props.mode;\n        }\n\n        warning(!('onOK' in props), 'DatePicker', 'It should be `DatePicker[onOk]` or `MonthPicker[onOk]`, instead of `onOK`!');\n        var calendar = React.createElement(TheCalendar, _extends({}, calendarProps, {\n          disabledDate: props.disabledDate,\n          disabledTime: disabledTime,\n          locale: locale.lang,\n          timePicker: props.timePicker,\n          defaultValue: props.defaultPickerValue || interopDefault(moment)(),\n          dateInputPlaceholder: placeholder,\n          prefixCls: prefixCls,\n          className: calendarClassName,\n          onOk: props.onOk,\n          dateRender: props.dateRender,\n          format: props.format,\n          showToday: props.showToday,\n          monthCellContentRender: props.monthCellContentRender,\n          renderFooter: _this.renderFooter,\n          onPanelChange: props.onPanelChange,\n          onChange: _this.handleCalendarChange,\n          value: showDate\n        }));\n        var clearIcon = !props.disabled && props.allowClear && value ? React.createElement(Icon, {\n          type: \"close-circle\",\n          className: \"\".concat(prefixCls, \"-picker-clear\"),\n          onClick: _this.clearSelection,\n          theme: \"filled\"\n        }) : null;\n        var inputIcon = suffixIcon && (React.isValidElement(suffixIcon) ? React.cloneElement(suffixIcon, {\n          className: classNames((_classNames2 = {}, _defineProperty(_classNames2, suffixIcon.props.className, suffixIcon.props.className), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-picker-icon\"), true), _classNames2))\n        }) : React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-picker-icon\")\n        }, suffixIcon)) || React.createElement(Icon, {\n          type: \"calendar\",\n          className: \"\".concat(prefixCls, \"-picker-icon\")\n        });\n        var dataOrAriaProps = getDataOrAriaProps(props);\n\n        var input = function input(_ref2) {\n          var inputValue = _ref2.value;\n          return React.createElement(\"div\", null, React.createElement(\"input\", _extends({\n            ref: _this.saveInput,\n            disabled: props.disabled,\n            readOnly: true,\n            value: formatDate(inputValue, props.format),\n            placeholder: placeholder,\n            className: props.pickerInputClass,\n            tabIndex: props.tabIndex,\n            name: props.name\n          }, dataOrAriaProps)), clearIcon, inputIcon);\n        };\n\n        return React.createElement(\"span\", {\n          id: props.id,\n          className: classNames(props.className, props.pickerClass),\n          style: _extends({}, pickerStyle, props.style),\n          onFocus: props.onFocus,\n          onBlur: props.onBlur,\n          onMouseEnter: props.onMouseEnter,\n          onMouseLeave: props.onMouseLeave\n        }, React.createElement(RcDatePicker, _extends({}, props, pickerProps, {\n          calendar: calendar,\n          value: value,\n          prefixCls: \"\".concat(prefixCls, \"-picker-container\"),\n          style: props.popupStyle,\n          open: open,\n          onOpenChange: _this.handleOpenChange\n        }), input));\n      };\n\n      var value = props.value || props.defaultValue;\n\n      if (value && !interopDefault(moment).isMoment(value)) {\n        throw new Error('The value/defaultValue of DatePicker or MonthPicker must be ' + 'a moment object after `antd@2.0`, see: https://u.ant.design/date-picker-value');\n      }\n\n      _this.state = {\n        value: value,\n        showDate: value,\n        open: false\n      };\n      return _this;\n    }\n\n    _createClass(CalenderWrapper, [{\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(_, prevState) {\n        if (!('open' in this.props) && prevState.open && !this.state.open) {\n          this.focus();\n        }\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.input.focus();\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.input.blur();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(ConfigConsumer, null, this.renderPicker);\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps, prevState) {\n        var state = {};\n        var open = prevState.open;\n\n        if ('open' in nextProps) {\n          state.open = nextProps.open;\n          open = nextProps.open || false;\n        }\n\n        if ('value' in nextProps) {\n          state.value = nextProps.value;\n\n          if (nextProps.value !== prevState.value || !open && nextProps.value !== prevState.showDate) {\n            state.showDate = nextProps.value;\n          }\n        }\n\n        return Object.keys(state).length > 0 ? state : null;\n      }\n    }]);\n\n    return CalenderWrapper;\n  }(React.Component);\n\n  CalenderWrapper.defaultProps = {\n    allowClear: true,\n    showToday: true\n  };\n  polyfill(CalenderWrapper);\n  return CalenderWrapper;\n}","map":null,"metadata":{},"sourceType":"module"}