{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar dnd_core_1 = require(\"dnd-core\");\n\nvar checkDecoratorArguments_1 = require(\"./utils/checkDecoratorArguments\");\n\nvar isRefable_1 = require(\"./utils/isRefable\");\n\nvar invariant = require('invariant');\n\nvar hoistStatics = require('hoist-non-react-statics');\n/**\n * Create the React Context\n */\n\n\nexports.context = React.createContext({\n  dragDropManager: undefined\n});\nexports.Consumer = exports.context.Consumer, exports.Provider = exports.context.Provider;\n/**\n * Creates the context object we're providing\n * @param backend\n * @param context\n */\n\nfunction createChildContext(backend, context, debugMode) {\n  return {\n    dragDropManager: dnd_core_1.createDragDropManager(backend, context, debugMode)\n  };\n}\n\nexports.createChildContext = createChildContext;\n/**\n * A React component that provides the React-DnD context\n */\n\nexports.DragDropContextProvider = function (_a) {\n  var backend = _a.backend,\n      context = _a.context,\n      debugMode = _a.debugMode,\n      children = _a.children;\n  var contextValue = createChildContext(backend, context, debugMode);\n  return React.createElement(exports.Provider, {\n    value: contextValue\n  }, children);\n};\n/**\n * Wrap the root component of your application with DragDropContext decorator to set up React DnD.\n * This lets you specify the backend, and sets up the shared DnD state behind the scenes.\n * @param backendFactory The DnD backend factory\n * @param backendContext The backend context\n */\n\n\nfunction DragDropContext(backendFactory, backendContext, debugMode) {\n  checkDecoratorArguments_1.default('DragDropContext', 'backend', backendFactory);\n  var childContext = createChildContext(backendFactory, backendContext, debugMode);\n  return function decorateContext(DecoratedComponent) {\n    var Decorated = DecoratedComponent;\n    var displayName = Decorated.displayName || Decorated.name || 'Component';\n\n    var DragDropContextContainer =\n    /** @class */\n    function (_super) {\n      __extends(DragDropContextContainer, _super);\n\n      function DragDropContextContainer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n\n        _this.ref = React.createRef();\n\n        _this.getManager = function () {\n          return childContext.dragDropManager;\n        };\n\n        return _this;\n      }\n\n      DragDropContextContainer.prototype.getDecoratedComponentInstance = function () {\n        invariant(this.ref.current, 'In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()');\n        return this.ref.current;\n      };\n\n      DragDropContextContainer.prototype.render = function () {\n        return React.createElement(exports.Provider, {\n          value: childContext\n        }, React.createElement(Decorated, __assign({}, this.props, {\n          ref: isRefable_1.isRefable(Decorated) ? this.ref : null\n        })));\n      };\n\n      DragDropContextContainer.DecoratedComponent = DecoratedComponent;\n      DragDropContextContainer.displayName = \"DragDropContext(\" + displayName + \")\";\n      return DragDropContextContainer;\n    }(React.Component);\n\n    return hoistStatics(DragDropContextContainer, DecoratedComponent);\n  };\n}\n\nexports.DragDropContext = DragDropContext;","map":null,"metadata":{},"sourceType":"script"}