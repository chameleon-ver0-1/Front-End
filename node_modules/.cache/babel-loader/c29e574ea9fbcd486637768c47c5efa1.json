{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport arrayTreeFilter from 'array-tree-filter';\nimport { findDOMNode } from 'react-dom';\n\nvar Menus = function (_React$Component) {\n  _inherits(Menus, _React$Component);\n\n  function Menus(props) {\n    _classCallCheck(this, Menus);\n\n    var _this = _possibleConstructorReturn(this, (Menus.__proto__ || Object.getPrototypeOf(Menus)).call(this, props));\n\n    _this.saveMenuItem = function (index) {\n      return function (node) {\n        _this.menuItems[index] = node;\n      };\n    };\n\n    _this.menuItems = {};\n    return _this;\n  }\n\n  _createClass(Menus, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.scrollActiveItemToView();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.visible && this.props.visible) {\n        this.scrollActiveItemToView();\n      }\n    }\n  }, {\n    key: 'getFieldName',\n    value: function getFieldName(name) {\n      var _props = this.props,\n          fieldNames = _props.fieldNames,\n          defaultFieldNames = _props.defaultFieldNames; // 防止只设置单个属性的名字\n\n      return fieldNames[name] || defaultFieldNames[name];\n    }\n  }, {\n    key: 'getOption',\n    value: function getOption(option, menuIndex) {\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          expandTrigger = _props2.expandTrigger,\n          expandIcon = _props2.expandIcon,\n          loadingIcon = _props2.loadingIcon;\n      var onSelect = this.props.onSelect.bind(this, option, menuIndex);\n      var onItemDoubleClick = this.props.onItemDoubleClick.bind(this, option, menuIndex);\n      var expandProps = {\n        onClick: onSelect,\n        onDoubleClick: onItemDoubleClick\n      };\n      var menuItemCls = prefixCls + '-menu-item';\n      var expandIconNode = null;\n      var hasChildren = option[this.getFieldName('children')] && option[this.getFieldName('children')].length > 0;\n\n      if (hasChildren || option.isLeaf === false) {\n        menuItemCls += ' ' + prefixCls + '-menu-item-expand';\n\n        if (!option.loading) {\n          expandIconNode = React.createElement('span', {\n            className: prefixCls + '-menu-item-expand-icon'\n          }, expandIcon);\n        }\n      }\n\n      if (expandTrigger === 'hover' && (hasChildren || option.isLeaf === false)) {\n        expandProps = {\n          onMouseEnter: this.delayOnSelect.bind(this, onSelect),\n          onMouseLeave: this.delayOnSelect.bind(this),\n          onClick: onSelect\n        };\n      }\n\n      if (this.isActiveOption(option, menuIndex)) {\n        menuItemCls += ' ' + prefixCls + '-menu-item-active';\n        expandProps.ref = this.saveMenuItem(menuIndex);\n      }\n\n      if (option.disabled) {\n        menuItemCls += ' ' + prefixCls + '-menu-item-disabled';\n      }\n\n      var loadingIconNode = null;\n\n      if (option.loading) {\n        menuItemCls += ' ' + prefixCls + '-menu-item-loading';\n        loadingIconNode = loadingIcon || null;\n      }\n\n      var title = '';\n\n      if (option.title) {\n        title = option.title;\n      } else if (typeof option[this.getFieldName('label')] === 'string') {\n        title = option[this.getFieldName('label')];\n      }\n\n      return React.createElement('li', _extends({\n        key: option[this.getFieldName('value')],\n        className: menuItemCls,\n        title: title\n      }, expandProps, {\n        role: 'menuitem',\n        onMouseDown: function onMouseDown(e) {\n          return e.preventDefault();\n        }\n      }), option[this.getFieldName('label')], expandIconNode, loadingIconNode);\n    }\n  }, {\n    key: 'getActiveOptions',\n    value: function getActiveOptions(values) {\n      var _this2 = this;\n\n      var activeValue = values || this.props.activeValue;\n      var options = this.props.options;\n      return arrayTreeFilter(options, function (o, level) {\n        return o[_this2.getFieldName('value')] === activeValue[level];\n      }, {\n        childrenKeyName: this.getFieldName('children')\n      });\n    }\n  }, {\n    key: 'getShowOptions',\n    value: function getShowOptions() {\n      var _this3 = this;\n\n      var options = this.props.options;\n      var result = this.getActiveOptions().map(function (activeOption) {\n        return activeOption[_this3.getFieldName('children')];\n      }).filter(function (activeOption) {\n        return !!activeOption;\n      });\n      result.unshift(options);\n      return result;\n    }\n  }, {\n    key: 'delayOnSelect',\n    value: function delayOnSelect(onSelect) {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (this.delayTimer) {\n        clearTimeout(this.delayTimer);\n        this.delayTimer = null;\n      }\n\n      if (typeof onSelect === 'function') {\n        this.delayTimer = setTimeout(function () {\n          onSelect(args);\n          _this4.delayTimer = null;\n        }, 150);\n      }\n    }\n  }, {\n    key: 'scrollActiveItemToView',\n    value: function scrollActiveItemToView() {\n      // scroll into view\n      var optionsLength = this.getShowOptions().length;\n\n      for (var i = 0; i < optionsLength; i++) {\n        var itemComponent = this.menuItems[i];\n\n        if (itemComponent) {\n          var target = findDOMNode(itemComponent);\n          target.parentNode.scrollTop = target.offsetTop;\n        }\n      }\n    }\n  }, {\n    key: 'isActiveOption',\n    value: function isActiveOption(option, menuIndex) {\n      var _props$activeValue = this.props.activeValue,\n          activeValue = _props$activeValue === undefined ? [] : _props$activeValue;\n      return activeValue[menuIndex] === option[this.getFieldName('value')];\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _props3 = this.props,\n          prefixCls = _props3.prefixCls,\n          dropdownMenuColumnStyle = _props3.dropdownMenuColumnStyle;\n      return React.createElement('div', null, this.getShowOptions().map(function (options, menuIndex) {\n        return React.createElement('ul', {\n          className: prefixCls + '-menu',\n          key: menuIndex,\n          style: dropdownMenuColumnStyle\n        }, options.map(function (option) {\n          return _this5.getOption(option, menuIndex);\n        }));\n      }));\n    }\n  }]);\n\n  return Menus;\n}(React.Component);\n\nMenus.defaultProps = {\n  options: [],\n  value: [],\n  activeValue: [],\n  onSelect: function onSelect() {},\n  prefixCls: 'rc-cascader-menus',\n  visible: false,\n  expandTrigger: 'click'\n};\nMenus.propTypes = {\n  value: PropTypes.array,\n  activeValue: PropTypes.array,\n  options: PropTypes.array,\n  prefixCls: PropTypes.string,\n  expandTrigger: PropTypes.string,\n  onSelect: PropTypes.func,\n  visible: PropTypes.bool,\n  dropdownMenuColumnStyle: PropTypes.object,\n  defaultFieldNames: PropTypes.object,\n  fieldNames: PropTypes.object,\n  expandIcon: PropTypes.node,\n  loadingIcon: PropTypes.node,\n  onItemDoubleClick: PropTypes.func\n};\nexport default Menus;","map":null,"metadata":{},"sourceType":"module"}