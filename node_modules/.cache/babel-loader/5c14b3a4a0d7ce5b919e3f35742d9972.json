{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport RcTooltip from 'rc-tooltip';\nimport classNames from 'classnames';\nimport _getPlacements from './placements';\nimport { ConfigConsumer } from '../config-provider';\n\nvar splitObject = function splitObject(obj, keys) {\n  var picked = {};\n\n  var omitted = _extends({}, obj);\n\n  keys.forEach(function (key) {\n    if (obj && key in obj) {\n      picked[key] = obj[key];\n      delete omitted[key];\n    }\n  });\n  return {\n    picked: picked,\n    omitted: omitted\n  };\n};\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tooltip, _React$Component);\n\n  function Tooltip(props) {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, props));\n\n    _this.onVisibleChange = function (visible) {\n      var onVisibleChange = _this.props.onVisibleChange;\n\n      if (!('visible' in _this.props)) {\n        _this.setState({\n          visible: _this.isNoTitle() ? false : visible\n        });\n      }\n\n      if (onVisibleChange && !_this.isNoTitle()) {\n        onVisibleChange(visible);\n      }\n    }; // 动态设置动画点\n\n\n    _this.onPopupAlign = function (domNode, align) {\n      var placements = _this.getPlacements(); // 当前返回的位置\n\n\n      var placement = Object.keys(placements).filter(function (key) {\n        return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];\n      })[0];\n\n      if (!placement) {\n        return;\n      } // 根据当前坐标设置动画点\n\n\n      var rect = domNode.getBoundingClientRect();\n      var transformOrigin = {\n        top: '50%',\n        left: '50%'\n      };\n\n      if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {\n        transformOrigin.top = \"\".concat(rect.height - align.offset[1], \"px\");\n      } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {\n        transformOrigin.top = \"\".concat(-align.offset[1], \"px\");\n      }\n\n      if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {\n        transformOrigin.left = \"\".concat(rect.width - align.offset[0], \"px\");\n      } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {\n        transformOrigin.left = \"\".concat(-align.offset[0], \"px\");\n      }\n\n      domNode.style.transformOrigin = \"\".concat(transformOrigin.left, \" \").concat(transformOrigin.top);\n    };\n\n    _this.saveTooltip = function (node) {\n      _this.tooltip = node;\n    };\n\n    _this.renderTooltip = function (_ref) {\n      var getContextPopupContainer = _ref.getPopupContainer,\n          getPrefixCls = _ref.getPrefixCls;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          props = _assertThisInitialize.props,\n          state = _assertThisInitialize.state;\n\n      var customizePrefixCls = props.prefixCls,\n          title = props.title,\n          overlay = props.overlay,\n          openClassName = props.openClassName,\n          getPopupContainer = props.getPopupContainer,\n          getTooltipContainer = props.getTooltipContainer;\n      var children = props.children;\n      var prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n      var visible = state.visible; // Hide tooltip when there is no title\n\n      if (!('visible' in props) && _this.isNoTitle()) {\n        visible = false;\n      }\n\n      var child = _this.getDisabledCompatibleChildren(React.isValidElement(children) ? children : React.createElement(\"span\", null, children));\n\n      var childProps = child.props;\n      var childCls = classNames(childProps.className, _defineProperty({}, openClassName || \"\".concat(prefixCls, \"-open\"), true));\n      return React.createElement(RcTooltip, _extends({}, _this.props, {\n        prefixCls: prefixCls,\n        getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,\n        ref: _this.saveTooltip,\n        builtinPlacements: _this.getPlacements(),\n        overlay: overlay || title || '',\n        visible: visible,\n        onVisibleChange: _this.onVisibleChange,\n        onPopupAlign: _this.onPopupAlign\n      }), visible ? cloneElement(child, {\n        className: childCls\n      }) : child);\n    };\n\n    _this.state = {\n      visible: !!props.visible || !!props.defaultVisible\n    };\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"getPopupDomNode\",\n    value: function getPopupDomNode() {\n      return this.tooltip.getPopupDomNode();\n    }\n  }, {\n    key: \"getPlacements\",\n    value: function getPlacements() {\n      var _this$props = this.props,\n          builtinPlacements = _this$props.builtinPlacements,\n          arrowPointAtCenter = _this$props.arrowPointAtCenter,\n          autoAdjustOverflow = _this$props.autoAdjustOverflow;\n      return builtinPlacements || _getPlacements({\n        arrowPointAtCenter: arrowPointAtCenter,\n        verticalArrowShift: 8,\n        autoAdjustOverflow: autoAdjustOverflow\n      });\n    } // Fix Tooltip won't hide at disabled button\n    // mouse events don't trigger at disabled button in Chrome\n    // https://github.com/react-component/tooltip/issues/18\n\n  }, {\n    key: \"getDisabledCompatibleChildren\",\n    value: function getDisabledCompatibleChildren(element) {\n      if ((element.type.__ANT_BUTTON || element.type === 'button') && element.props.disabled) {\n        // Pick some layout related style properties up to span\n        // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254\n        var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),\n            picked = _splitObject.picked,\n            omitted = _splitObject.omitted;\n\n        var spanStyle = _extends({\n          display: 'inline-block'\n        }, picked, {\n          cursor: 'not-allowed',\n          width: element.props.block ? '100%' : null\n        });\n\n        var buttonStyle = _extends({}, omitted, {\n          pointerEvents: 'none'\n        });\n\n        var child = cloneElement(element, {\n          style: buttonStyle,\n          className: null\n        });\n        return React.createElement(\"span\", {\n          style: spanStyle,\n          className: element.props.className\n        }, child);\n      }\n\n      return element;\n    }\n  }, {\n    key: \"isNoTitle\",\n    value: function isNoTitle() {\n      var _this$props2 = this.props,\n          title = _this$props2.title,\n          overlay = _this$props2.overlay;\n      return !title && !overlay; // overlay for old version compatibility\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderTooltip);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('visible' in nextProps) {\n        return {\n          visible: nextProps.visible\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Tooltip;\n}(React.Component);\n\nTooltip.defaultProps = {\n  placement: 'top',\n  transitionName: 'zoom-big-fast',\n  mouseEnterDelay: 0.1,\n  mouseLeaveDelay: 0.1,\n  arrowPointAtCenter: false,\n  autoAdjustOverflow: true\n};\npolyfill(Tooltip);\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}