{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport { object, func, oneOfType, node } from \"prop-types\";\n\nvar cleanProps = function cleanProps(props) {\n  var initialState = props.initialState,\n      getInitialState = props.getInitialState,\n      refs = props.refs,\n      getRefs = props.getRefs,\n      didMount = props.didMount,\n      didUpdate = props.didUpdate,\n      willUnmount = props.willUnmount,\n      getSnapshotBeforeUpdate = props.getSnapshotBeforeUpdate,\n      shouldUpdate = props.shouldUpdate,\n      render = props.render,\n      rest = _objectWithoutProperties(props, [\"initialState\", \"getInitialState\", \"refs\", \"getRefs\", \"didMount\", \"didUpdate\", \"willUnmount\", \"getSnapshotBeforeUpdate\", \"shouldUpdate\", \"render\"]);\n\n  return rest;\n};\n\nvar Component = function (_React$Component) {\n  _inherits(Component, _React$Component);\n\n  function Component() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Component);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Component.prototype.getArgs = function getArgs() {\n    var state = this.state,\n        props = this.props,\n        setState = this._setState,\n        forceUpdate = this._forceUpdate,\n        refs = this._refs;\n    return {\n      state: state,\n      props: cleanProps(props),\n      refs: refs,\n      setState: setState,\n      forceUpdate: forceUpdate\n    };\n  };\n\n  Component.prototype.componentDidMount = function componentDidMount() {\n    if (this.props.didMount) this.props.didMount(this.getArgs());\n  };\n\n  Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.shouldUpdate) return this.props.shouldUpdate({\n      props: this.props,\n      state: this.state,\n      nextProps: cleanProps(nextProps),\n      nextState: nextState\n    });else return true;\n  };\n\n  Component.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.willUnmount) this.props.willUnmount({\n      state: this.state,\n      props: cleanProps(this.props),\n      refs: this._refs\n    });\n  };\n\n  Component.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.didUpdate) this.props.didUpdate(Object.assign(this.getArgs(), {\n      prevProps: cleanProps(prevProps),\n      prevState: prevState\n    }), snapshot);\n  };\n\n  Component.prototype.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate(prevProps, prevState) {\n    if (this.props.getSnapshotBeforeUpdate) {\n      return this.props.getSnapshotBeforeUpdate(Object.assign(this.getArgs(), {\n        prevProps: cleanProps(prevProps),\n        prevState: prevState\n      }));\n    } else {\n      return null;\n    }\n  };\n\n  Component.prototype.render = function render() {\n    var _props = this.props,\n        children = _props.children,\n        render = _props.render;\n    return render ? render(this.getArgs()) : typeof children === \"function\" ? children(this.getArgs()) : children || null;\n  };\n\n  return Component;\n}(React.Component);\n\nComponent.defaultProps = {\n  getInitialState: function getInitialState() {},\n  getRefs: function getRefs() {\n    return {};\n  }\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.state = this.props.initialState || this.props.getInitialState(this.props);\n  this._refs = this.props.refs || this.props.getRefs(this.getArgs());\n\n  this._setState = function () {\n    return _this2.setState.apply(_this2, arguments);\n  };\n\n  this._forceUpdate = function () {\n    return _this2.forceUpdate.apply(_this2, arguments);\n  };\n};\n\nprocess.env.NODE_ENV !== \"production\" ? Component.propTypes = {\n  initialState: object,\n  getInitialState: func,\n  refs: object,\n  getRefs: func,\n  didMount: func,\n  didUpdate: func,\n  willUnmount: func,\n  getSnapshotBeforeUpdate: func,\n  shouldUpdate: func,\n  render: func,\n  children: oneOfType([func, node])\n} : void 0;\nexport default Component;","map":null,"metadata":{},"sourceType":"module"}