{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcMenu, { Divider, ItemGroup } from 'rc-menu';\nimport createContext from '@ant-design/create-react-context';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\nimport { ConfigConsumer } from '../config-provider';\nimport animation from '../_util/openAnimation';\nimport warning from '../_util/warning';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { SiderContext } from '../layout/Sider';\nimport raf from '../_util/raf';\nexport var MenuContext = createContext({\n  inlineCollapsed: false\n});\n\nvar InternalMenu =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InternalMenu, _React$Component);\n\n  function InternalMenu(props) {\n    var _this;\n\n    _classCallCheck(this, InternalMenu);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InternalMenu).call(this, props)); // Restore vertical mode when menu is collapsed responsively when mounted\n    // https://github.com/ant-design/ant-design/issues/13104\n    // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n\n    _this.handleMouseEnter = function (e) {\n      _this.restoreModeVerticalFromInline();\n\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter(e);\n      }\n    };\n\n    _this.handleTransitionEnd = function (e) {\n      // when inlineCollapsed menu width animation finished\n      // https://github.com/ant-design/ant-design/issues/12864\n      var widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget; // Fix SVGElement e.target.className.indexOf is not a function\n      // https://github.com/ant-design/ant-design/issues/15699\n\n      var className = e.target.className; // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during an animation.\n\n      var classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]' ? className.animVal : className; // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n      // https://github.com/ant-design/ant-design-pro/issues/2783\n\n      var iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;\n\n      if (widthCollapsed || iconScaled) {\n        _this.restoreModeVerticalFromInline();\n      }\n    };\n\n    _this.handleClick = function (e) {\n      _this.handleOpenChange([]);\n\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e);\n      }\n    };\n\n    _this.handleOpenChange = function (openKeys) {\n      _this.setOpenKeys(openKeys);\n\n      var onOpenChange = _this.props.onOpenChange;\n\n      if (onOpenChange) {\n        onOpenChange(openKeys);\n      }\n    };\n\n    _this.renderMenu = function (_ref) {\n      var getPopupContainer = _ref.getPopupContainer,\n          getPrefixCls = _ref.getPrefixCls;\n      var mounted = _this.state.mounted;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          theme = _this$props.theme,\n          collapsedWidth = _this$props.collapsedWidth;\n      var passProps = omit(_this.props, ['collapsedWidth', 'siderCollapsed']);\n\n      var menuMode = _this.getRealMenuMode();\n\n      var menuOpenAnimation = _this.getMenuOpenAnimation(menuMode);\n\n      var prefixCls = getPrefixCls('menu', customizePrefixCls);\n      var menuClassName = classNames(className, \"\".concat(prefixCls, \"-\").concat(theme), _defineProperty({}, \"\".concat(prefixCls, \"-inline-collapsed\"), _this.getInlineCollapsed()));\n      var menuProps = {\n        openKeys: _this.state.openKeys,\n        onOpenChange: _this.handleOpenChange,\n        className: menuClassName,\n        mode: menuMode\n      };\n\n      if (menuMode !== 'inline') {\n        // closing vertical popup submenu after click it\n        menuProps.onClick = _this.handleClick;\n        menuProps.openTransitionName = mounted ? menuOpenAnimation : '';\n      } else {\n        menuProps.openAnimation = mounted ? menuOpenAnimation : {};\n      } // https://github.com/ant-design/ant-design/issues/8587\n\n\n      if (_this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px')) {\n        return null;\n      }\n\n      return React.createElement(RcMenu, _extends({\n        getPopupContainer: getPopupContainer\n      }, passProps, menuProps, {\n        prefixCls: prefixCls,\n        onTransitionEnd: _this.handleTransitionEnd,\n        onMouseEnter: _this.handleMouseEnter\n      }));\n    };\n\n    warning(!('onOpen' in props || 'onClose' in props), 'Menu', '`onOpen` and `onClose` are removed, please use `onOpenChange` instead, ' + 'see: https://u.ant.design/menu-on-open-change.');\n    warning(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');\n    var openKeys;\n\n    if ('openKeys' in props) {\n      openKeys = props.openKeys;\n    } else if ('defaultOpenKeys' in props) {\n      openKeys = props.defaultOpenKeys;\n    }\n\n    _this.state = {\n      openKeys: openKeys || [],\n      switchingModeFromInline: false,\n      inlineOpenKeys: [],\n      prevProps: props,\n      mounted: false\n    };\n    return _this;\n  }\n\n  _createClass(InternalMenu, [{\n    key: \"componentDidMount\",\n    // [Legacy] Origin code can render full defaultOpenKeys is caused by `rc-animate` bug.\n    // We have to workaround this to prevent animation on first render.\n    // https://github.com/ant-design/ant-design/issues/15966\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.mountRafId = raf(function () {\n        _this2.setState({\n          mounted: true\n        });\n      }, 10);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      raf.cancel(this.mountRafId);\n    }\n  }, {\n    key: \"restoreModeVerticalFromInline\",\n    value: function restoreModeVerticalFromInline() {\n      var switchingModeFromInline = this.state.switchingModeFromInline;\n\n      if (switchingModeFromInline) {\n        this.setState({\n          switchingModeFromInline: false\n        });\n      }\n    }\n  }, {\n    key: \"setOpenKeys\",\n    value: function setOpenKeys(openKeys) {\n      if (!('openKeys' in this.props)) {\n        this.setState({\n          openKeys: openKeys\n        });\n      }\n    }\n  }, {\n    key: \"getRealMenuMode\",\n    value: function getRealMenuMode() {\n      var inlineCollapsed = this.getInlineCollapsed();\n\n      if (this.state.switchingModeFromInline && inlineCollapsed) {\n        return 'inline';\n      }\n\n      var mode = this.props.mode;\n      return inlineCollapsed ? 'vertical' : mode;\n    }\n  }, {\n    key: \"getInlineCollapsed\",\n    value: function getInlineCollapsed() {\n      var inlineCollapsed = this.props.inlineCollapsed;\n\n      if (this.props.siderCollapsed !== undefined) {\n        return this.props.siderCollapsed;\n      }\n\n      return inlineCollapsed;\n    }\n  }, {\n    key: \"getMenuOpenAnimation\",\n    value: function getMenuOpenAnimation(menuMode) {\n      var _this$props2 = this.props,\n          openAnimation = _this$props2.openAnimation,\n          openTransitionName = _this$props2.openTransitionName;\n      var menuOpenAnimation = openAnimation || openTransitionName;\n\n      if (openAnimation === undefined && openTransitionName === undefined) {\n        if (menuMode === 'horizontal') {\n          menuOpenAnimation = 'slide-up';\n        } else if (menuMode === 'inline') {\n          menuOpenAnimation = animation;\n        } else {\n          // When mode switch from inline\n          // submenu should hide without animation\n          if (this.state.switchingModeFromInline) {\n            menuOpenAnimation = '';\n            this.setState({\n              switchingModeFromInline: false\n            }); // this.switchingModeFromInline = false;\n          } else {\n            menuOpenAnimation = 'zoom-big';\n          }\n        }\n      }\n\n      return menuOpenAnimation;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MenuContext.Provider, {\n        value: {\n          inlineCollapsed: this.getInlineCollapsed() || false,\n          antdMenuTheme: this.props.theme\n        }\n      }, React.createElement(ConfigConsumer, null, this.renderMenu));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: nextProps\n      };\n\n      if (prevProps.mode === 'inline' && nextProps.mode !== 'inline') {\n        newState.switchingModeFromInline = true;\n      }\n\n      if ('openKeys' in nextProps) {\n        newState.openKeys = nextProps.openKeys;\n      } else {\n        // [Legacy] Old code will return after `openKeys` changed.\n        // Not sure the reason, we should keep this logic still.\n        if (nextProps.inlineCollapsed && !prevProps.inlineCollapsed || nextProps.siderCollapsed && !prevProps.siderCollapsed) {\n          newState.switchingModeFromInline = true;\n          newState.inlineOpenKeys = prevState.openKeys;\n          newState.openKeys = [];\n        }\n\n        if (!nextProps.inlineCollapsed && prevProps.inlineCollapsed || !nextProps.siderCollapsed && prevProps.siderCollapsed) {\n          newState.openKeys = prevState.inlineOpenKeys;\n          newState.inlineOpenKeys = [];\n        }\n      }\n\n      return newState;\n    }\n  }]);\n\n  return InternalMenu;\n}(React.Component);\n\nInternalMenu.defaultProps = {\n  className: '',\n  theme: 'light',\n  focusable: false\n};\npolyfill(InternalMenu); // We should keep this as ref-able\n\nvar Menu =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Menu, _React$Component2);\n\n  function Menu() {\n    _classCallCheck(this, Menu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Menu).apply(this, arguments));\n  }\n\n  _createClass(Menu, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(SiderContext.Consumer, null, function (context) {\n        return React.createElement(InternalMenu, _extends({}, _this3.props, context));\n      });\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\nexport { Menu as default };\nMenu.Divider = Divider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;","map":null,"metadata":{},"sourceType":"module"}