{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport toArray from 'rc-util/es/Children/toArray';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { treeContextTypes } from './contextTypes';\nimport { convertTreeToEntities, convertDataToTree, getDataAndAria, getPosition, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr, mapChildren, conductCheck, warnOnlyTreeNode } from './util';\n\nvar Tree = function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  function Tree(props) {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, (Tree.__proto__ || Object.getPrototypeOf(Tree)).call(this, props));\n\n    _this.onNodeDragStart = function (event, node) {\n      var expandedKeys = _this.state.expandedKeys;\n      var onDragStart = _this.props.onDragStart;\n      var _node$props = node.props,\n          eventKey = _node$props.eventKey,\n          children = _node$props.children;\n      _this.dragNode = node;\n\n      _this.setState({\n        dragNodesKeys: getDragNodesKeys(children, node),\n        expandedKeys: arrDel(expandedKeys, eventKey)\n      });\n\n      if (onDragStart) {\n        onDragStart({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeDragEnter = function (event, node) {\n      var expandedKeys = _this.state.expandedKeys;\n      var onDragEnter = _this.props.onDragEnter;\n      var _node$props2 = node.props,\n          pos = _node$props2.pos,\n          eventKey = _node$props2.eventKey;\n      if (!_this.dragNode) return;\n      var dropPosition = calcDropPosition(event, node); // Skip if drag node is self\n\n      if (_this.dragNode.props.eventKey === eventKey && dropPosition === 0) {\n        _this.setState({\n          dragOverNodeKey: '',\n          dropPosition: null\n        });\n\n        return;\n      } // Ref: https://github.com/react-component/tree/issues/132\n      // Add timeout to let onDragLevel fire before onDragEnter,\n      // so that we can clean drag props for onDragLeave node.\n      // Macro task for this:\n      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n\n\n      setTimeout(function () {\n        // Update drag over node\n        _this.setState({\n          dragOverNodeKey: eventKey,\n          dropPosition: dropPosition\n        }); // Side effect for delay drag\n\n\n        if (!_this.delayedDragEnterLogic) {\n          _this.delayedDragEnterLogic = {};\n        }\n\n        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n          clearTimeout(_this.delayedDragEnterLogic[key]);\n        });\n        _this.delayedDragEnterLogic[pos] = setTimeout(function () {\n          var newExpandedKeys = arrAdd(expandedKeys, eventKey);\n\n          if (!('expandedKeys' in _this.props)) {\n            _this.setState({\n              expandedKeys: newExpandedKeys\n            });\n          }\n\n          if (onDragEnter) {\n            onDragEnter({\n              event: event,\n              node: node,\n              expandedKeys: newExpandedKeys\n            });\n          }\n        }, 400);\n      }, 0);\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var onDragOver = _this.props.onDragOver;\n      var eventKey = node.props.eventKey; // Update drag position\n\n      if (_this.dragNode && eventKey === _this.state.dragOverNodeKey) {\n        var dropPosition = calcDropPosition(event, node);\n        if (dropPosition === _this.state.dropPosition) return;\n\n        _this.setState({\n          dropPosition: dropPosition\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      var onDragLeave = _this.props.onDragLeave;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (onDragLeave) {\n        onDragLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeDragEnd = function (event, node) {\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (onDragEnd) {\n        onDragEnd({\n          event: event,\n          node: node\n        });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$state = _this.state,\n          _this$state$dragNodes = _this$state.dragNodesKeys,\n          dragNodesKeys = _this$state$dragNodes === undefined ? [] : _this$state$dragNodes,\n          dropPosition = _this$state.dropPosition;\n      var onDrop = _this.props.onDrop;\n      var _node$props3 = node.props,\n          eventKey = _node$props3.eventKey,\n          pos = _node$props3.pos;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (dragNodesKeys.indexOf(eventKey) !== -1) {\n        warning(false, 'Can not drop to dragNode(include it\\'s children node)');\n        return;\n      }\n\n      var posArr = posToArr(pos);\n      var dropResult = {\n        event: event,\n        node: node,\n        dragNode: _this.dragNode,\n        dragNodesKeys: dragNodesKeys.slice(),\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1])\n      };\n\n      if (dropPosition !== 0) {\n        dropResult.dropToGap = true;\n      }\n\n      if (onDrop) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var keyEntities = _this.state.keyEntities;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          multiple = _this$props.multiple;\n      var _treeNode$props = treeNode.props,\n          selected = _treeNode$props.selected,\n          eventKey = _treeNode$props.eventKey;\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, eventKey);\n      } else if (!multiple) {\n        selectedKeys = [eventKey];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, eventKey);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (key) {\n        var entity = keyEntities[key];\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({\n        selectedKeys: selectedKeys\n      });\n\n      if (onSelect) {\n        var eventObj = {\n          event: 'select',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        };\n        onSelect(selectedKeys, eventObj);\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state2 = _this.state,\n          keyEntities = _this$state2.keyEntities,\n          oriCheckedKeys = _this$state2.checkedKeys,\n          oriHalfCheckedKeys = _this$state2.halfCheckedKeys;\n      var _this$props2 = _this.props,\n          checkStrictly = _this$props2.checkStrictly,\n          onCheck = _this$props2.onCheck;\n      var eventKey = treeNode.props.eventKey; // Prepare trigger arguments\n\n      var checkedObj = void 0;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (key) {\n          return keyEntities[key];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: checkedKeys\n        });\n      } else {\n        var _conductCheck = conductCheck([eventKey], checked, keyEntities, {\n          checkedKeys: oriCheckedKeys,\n          halfCheckedKeys: oriHalfCheckedKeys\n        }),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (key) {\n          var entity = keyEntities[key];\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys,\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === undefined ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === undefined ? [] : _ref$loadingKeys;\n          var _this$props3 = _this.props,\n              loadData = _this$props3.loadData,\n              onLoad = _this$props3.onLoad;\n          var eventKey = treeNode.props.eventKey;\n\n          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {\n            // react 15 will warn if return null\n            return {};\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var newLoadedKeys = arrAdd(_this.state.loadedKeys, eventKey);\n            var newLoadingKeys = arrDel(_this.state.loadingKeys, eventKey); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            if (onLoad) {\n              var eventObj = {\n                event: 'load',\n                node: treeNode\n              };\n              onLoad(newLoadedKeys, eventObj);\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n\n            _this.setState({\n              loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n          return {\n            loadingKeys: arrAdd(loadingKeys, eventKey)\n          };\n        });\n      });\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var _this$props4 = _this.props,\n          onExpand = _this$props4.onExpand,\n          loadData = _this$props4.loadData;\n      var _treeNode$props2 = treeNode.props,\n          eventKey = _treeNode$props2.eventKey,\n          expanded = _treeNode$props2.expanded; // Update selected keys\n\n      var index = expandedKeys.indexOf(eventKey);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, eventKey);\n      } else {\n        expandedKeys = arrDel(expandedKeys, eventKey);\n      }\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys\n      });\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      } // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n\n        return loadPromise ? loadPromise.then(function () {\n          // [Legacy] Refresh logic\n          _this.setUncontrolledState({\n            expandedKeys: expandedKeys\n          });\n        }) : null;\n      }\n\n      return null;\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.setUncontrolledState = function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n    };\n\n    _this.registerTreeNode = function (key, node) {\n      if (node) {\n        _this.domTreeNodes[key] = node;\n      } else {\n        delete _this.domTreeNodes[key];\n      }\n    };\n\n    _this.isKeyChecked = function (key) {\n      var _this$state$checkedKe = _this.state.checkedKeys,\n          checkedKeys = _this$state$checkedKe === undefined ? [] : _this$state$checkedKe;\n      return checkedKeys.indexOf(key) !== -1;\n    };\n\n    _this.renderTreeNode = function (child, index) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var _this$state3 = _this.state,\n          keyEntities = _this$state3.keyEntities,\n          _this$state3$expanded = _this$state3.expandedKeys,\n          expandedKeys = _this$state3$expanded === undefined ? [] : _this$state3$expanded,\n          _this$state3$selected = _this$state3.selectedKeys,\n          selectedKeys = _this$state3$selected === undefined ? [] : _this$state3$selected,\n          _this$state3$halfChec = _this$state3.halfCheckedKeys,\n          halfCheckedKeys = _this$state3$halfChec === undefined ? [] : _this$state3$halfChec,\n          _this$state3$loadedKe = _this$state3.loadedKeys,\n          loadedKeys = _this$state3$loadedKe === undefined ? [] : _this$state3$loadedKe,\n          _this$state3$loadingK = _this$state3.loadingKeys,\n          loadingKeys = _this$state3$loadingK === undefined ? [] : _this$state3$loadingK,\n          dragOverNodeKey = _this$state3.dragOverNodeKey,\n          dropPosition = _this$state3.dropPosition;\n      var pos = getPosition(level, index);\n      var key = child.key || pos;\n\n      if (!keyEntities[key]) {\n        warnOnlyTreeNode();\n        return null;\n      }\n\n      return React.cloneElement(child, {\n        key: key,\n        eventKey: key,\n        expanded: expandedKeys.indexOf(key) !== -1,\n        selected: selectedKeys.indexOf(key) !== -1,\n        loaded: loadedKeys.indexOf(key) !== -1,\n        loading: loadingKeys.indexOf(key) !== -1,\n        checked: _this.isKeyChecked(key),\n        halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n        pos: pos,\n        // [Legacy] Drag props\n        dragOver: dragOverNodeKey === key && dropPosition === 0,\n        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n      });\n    };\n\n    _this.state = {\n      // TODO: Remove this eslint\n      posEntities: {},\n      // eslint-disable-line react/no-unused-state\n      keyEntities: {},\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n      treeNode: []\n    }; // Internal usage for `rc-tree-select`, we don't promise it will not change.\n\n    _this.domTreeNodes = {};\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          selectable = _props.selectable,\n          showIcon = _props.showIcon,\n          icon = _props.icon,\n          draggable = _props.draggable,\n          checkable = _props.checkable,\n          checkStrictly = _props.checkStrictly,\n          disabled = _props.disabled,\n          loadData = _props.loadData,\n          filterTreeNode = _props.filterTreeNode,\n          motion = _props.motion,\n          switcherIcon = _props.switcherIcon;\n      return {\n        rcTree: {\n          // root: this,\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggable,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          motion: motion,\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          renderTreeNode: this.renderTreeNode,\n          isKeyChecked: this.isKeyChecked,\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop,\n          registerTreeNode: this.registerTreeNode\n        }\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var treeNode = this.state.treeNode;\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          className = _props2.className,\n          focusable = _props2.focusable,\n          style = _props2.style,\n          showLine = _props2.showLine,\n          _props2$tabIndex = _props2.tabIndex,\n          tabIndex = _props2$tabIndex === undefined ? 0 : _props2$tabIndex;\n      var domProps = getDataAndAria(this.props);\n\n      if (focusable) {\n        domProps.tabIndex = tabIndex;\n        domProps.onKeyDown = this.onKeyDown;\n      }\n\n      return React.createElement('ul', _extends({}, domProps, {\n        className: classNames(prefixCls, className, _defineProperty({}, prefixCls + '-show-line', showLine)),\n        style: style,\n        role: 'tree',\n        unselectable: 'on'\n      }), mapChildren(treeNode, function (node, index) {\n        return _this2.renderTreeNode(node, index);\n      }));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      } // ================== Tree Node ==================\n\n\n      var treeNode = null; // Check if `treeData` or `children` changed and save into the state.\n\n      if (needSync('treeData')) {\n        treeNode = convertDataToTree(props.treeData);\n      } else if (needSync('children')) {\n        treeNode = toArray(props.children);\n      } // Tree support filter function which will break the tree structure in the vdm.\n      // We cache the treeNodes in state so that we can return the treeNode in event trigger.\n\n\n      if (treeNode) {\n        newState.treeNode = treeNode; // Calculate the entities data for quick match\n\n        var entitiesMap = convertTreeToEntities(treeNode);\n        newState.posEntities = entitiesMap.posEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        newState.expandedKeys = Object.keys(keyEntities);\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity = void 0;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeNode) {\n          // If treeNode changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === undefined ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === undefined ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n    /**\n     * [Legacy] Select handler is less small than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n\n    /**\n     * Only update the value which is not in props\n     */\n\n    /**\n     * [Legacy] Original logic use `key` as tracking clue.\n     * We have to use `cloneElement` to pass `key`.\n     */\n\n  }]);\n\n  return Tree;\n}(React.Component);\n\nTree.propTypes = {\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  children: PropTypes.any,\n  treeData: PropTypes.array,\n  // Generate treeNode by children\n  showLine: PropTypes.bool,\n  showIcon: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  focusable: PropTypes.bool,\n  selectable: PropTypes.bool,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  checkStrictly: PropTypes.bool,\n  draggable: PropTypes.bool,\n  defaultExpandParent: PropTypes.bool,\n  autoExpandParent: PropTypes.bool,\n  defaultExpandAll: PropTypes.bool,\n  defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),\n  expandedKeys: PropTypes.arrayOf(PropTypes.string),\n  defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),\n  checkedKeys: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])), PropTypes.object]),\n  defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),\n  selectedKeys: PropTypes.arrayOf(PropTypes.string),\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onExpand: PropTypes.func,\n  onCheck: PropTypes.func,\n  onSelect: PropTypes.func,\n  onLoad: PropTypes.func,\n  loadData: PropTypes.func,\n  loadedKeys: PropTypes.arrayOf(PropTypes.string),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onRightClick: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDrop: PropTypes.func,\n  filterTreeNode: PropTypes.func,\n  motion: PropTypes.object,\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\nTree.childContextTypes = treeContextTypes;\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: []\n};\npolyfill(Tree);\nexport default Tree;","map":null,"metadata":{},"sourceType":"module"}