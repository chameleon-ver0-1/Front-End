{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport TimePickerPanel from \"rc-time-picker/es/Panel\";\nimport classNames from 'classnames';\nimport * as moment from 'moment';\nimport enUS from './locale/en_US';\nimport interopDefault from '../_util/interopDefault';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport { generateShowHourMinuteSecond } from '../time-picker';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nvar DEFAULT_FORMAT = {\n  date: 'YYYY-MM-DD',\n  dateTime: 'YYYY-MM-DD HH:mm:ss',\n  week: 'gggg-wo',\n  month: 'YYYY-MM'\n};\nvar LOCALE_FORMAT_MAPPING = {\n  date: 'dateFormat',\n  dateTime: 'dateTimeFormat',\n  week: 'weekFormat',\n  month: 'monthFormat'\n};\n\nfunction getColumns(_ref) {\n  var showHour = _ref.showHour,\n      showMinute = _ref.showMinute,\n      showSecond = _ref.showSecond,\n      use12Hours = _ref.use12Hours;\n  var column = 0;\n\n  if (showHour) {\n    column += 1;\n  }\n\n  if (showMinute) {\n    column += 1;\n  }\n\n  if (showSecond) {\n    column += 1;\n  }\n\n  if (use12Hours) {\n    column += 1;\n  }\n\n  return column;\n}\n\nfunction checkValidate(value, propName) {\n  var values = Array.isArray(value) ? value : [value];\n  values.forEach(function (val) {\n    if (!val) return;\n    warning(!interopDefault(moment).isMoment(val) || val.isValid(), 'DatePicker', \"`\".concat(propName, \"` provides invalidate moment time. If you want to set empty value, use `null` instead.\"));\n  });\n}\n\nexport default function wrapPicker(Picker, pickerType) {\n  var PickerWrapper =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(PickerWrapper, _React$Component);\n\n    function PickerWrapper() {\n      var _this;\n\n      _classCallCheck(this, PickerWrapper);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(PickerWrapper).apply(this, arguments)); // Since we need call `getDerivedStateFromProps` for check. Need leave an empty `state` here.\n\n      _this.state = {};\n\n      _this.handleOpenChange = function (open) {\n        var onOpenChange = _this.props.onOpenChange;\n        onOpenChange(open);\n      };\n\n      _this.handleFocus = function (e) {\n        var onFocus = _this.props.onFocus;\n\n        if (onFocus) {\n          onFocus(e);\n        }\n      };\n\n      _this.handleBlur = function (e) {\n        var onBlur = _this.props.onBlur;\n\n        if (onBlur) {\n          onBlur(e);\n        }\n      };\n\n      _this.handleMouseEnter = function (e) {\n        var onMouseEnter = _this.props.onMouseEnter;\n\n        if (onMouseEnter) {\n          onMouseEnter(e);\n        }\n      };\n\n      _this.handleMouseLeave = function (e) {\n        var onMouseLeave = _this.props.onMouseLeave;\n\n        if (onMouseLeave) {\n          onMouseLeave(e);\n        }\n      };\n\n      _this.savePicker = function (node) {\n        _this.picker = node;\n      };\n\n      _this.getDefaultLocale = function () {\n        var result = _extends({}, enUS, _this.props.locale);\n\n        result.lang = _extends({}, result.lang, (_this.props.locale || {}).lang);\n        return result;\n      };\n\n      _this.renderPicker = function (locale, localeCode) {\n        var _this$props = _this.props,\n            format = _this$props.format,\n            showTime = _this$props.showTime;\n        var mergedPickerType = showTime ? \"\".concat(pickerType, \"Time\") : pickerType;\n        var mergedFormat = format || locale[LOCALE_FORMAT_MAPPING[mergedPickerType]] || DEFAULT_FORMAT[mergedPickerType];\n        return React.createElement(ConfigConsumer, null, function (_ref2) {\n          var _classNames2;\n\n          var getPrefixCls = _ref2.getPrefixCls,\n              getContextPopupContainer = _ref2.getPopupContainer;\n          var _this$props2 = _this.props,\n              customizePrefixCls = _this$props2.prefixCls,\n              customizeInputPrefixCls = _this$props2.inputPrefixCls,\n              getCalendarContainer = _this$props2.getCalendarContainer,\n              size = _this$props2.size,\n              disabled = _this$props2.disabled;\n          var getPopupContainer = getCalendarContainer || getContextPopupContainer;\n          var prefixCls = getPrefixCls('calendar', customizePrefixCls);\n          var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);\n          var pickerClass = classNames(\"\".concat(prefixCls, \"-picker\"), _defineProperty({}, \"\".concat(prefixCls, \"-picker-\").concat(size), !!size));\n          var pickerInputClass = classNames(\"\".concat(prefixCls, \"-picker-input\"), inputPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(inputPrefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames2, \"\".concat(inputPrefixCls, \"-sm\"), size === 'small'), _defineProperty(_classNames2, \"\".concat(inputPrefixCls, \"-disabled\"), disabled), _classNames2));\n          var timeFormat = showTime && showTime.format || 'HH:mm:ss';\n\n          var rcTimePickerProps = _extends({}, generateShowHourMinuteSecond(timeFormat), {\n            format: timeFormat,\n            use12Hours: showTime && showTime.use12Hours\n          });\n\n          var columns = getColumns(rcTimePickerProps);\n          var timePickerCls = \"\".concat(prefixCls, \"-time-picker-column-\").concat(columns);\n          var timePicker = showTime ? React.createElement(TimePickerPanel, _extends({}, rcTimePickerProps, showTime, {\n            prefixCls: \"\".concat(prefixCls, \"-time-picker\"),\n            className: timePickerCls,\n            placeholder: locale.timePickerLocale.placeholder,\n            transitionName: \"slide-up\"\n          })) : null;\n          return React.createElement(Picker, _extends({}, _this.props, {\n            getCalendarContainer: getPopupContainer,\n            format: mergedFormat,\n            ref: _this.savePicker,\n            pickerClass: pickerClass,\n            pickerInputClass: pickerInputClass,\n            locale: locale,\n            localeCode: localeCode,\n            timePicker: timePicker,\n            onOpenChange: _this.handleOpenChange,\n            onFocus: _this.handleFocus,\n            onBlur: _this.handleBlur,\n            onMouseEnter: _this.handleMouseEnter,\n            onMouseLeave: _this.handleMouseLeave\n          }));\n        });\n      };\n\n      return _this;\n    }\n\n    _createClass(PickerWrapper, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this$props3 = this.props,\n            autoFocus = _this$props3.autoFocus,\n            disabled = _this$props3.disabled;\n\n        if (autoFocus && !disabled) {\n          this.focus();\n        }\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.picker.focus();\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.picker.blur();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(LocaleReceiver, {\n          componentName: \"DatePicker\",\n          defaultLocale: this.getDefaultLocale\n        }, this.renderPicker);\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(_ref3) {\n        var value = _ref3.value,\n            defaultValue = _ref3.defaultValue;\n        checkValidate(defaultValue, 'defaultValue');\n        checkValidate(value, 'value');\n        return {};\n      }\n    }]);\n\n    return PickerWrapper;\n  }(React.Component);\n\n  PickerWrapper.defaultProps = {\n    transitionName: 'slide-up',\n    popupStyle: {},\n    onChange: function onChange() {},\n    onOk: function onOk() {},\n    onOpenChange: function onOpenChange() {},\n    locale: {}\n  };\n  polyfill(PickerWrapper);\n  return PickerWrapper;\n}","map":null,"metadata":{},"sourceType":"module"}