{"ast":null,"code":"import _classCallCheck from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\React\\\\react-gradu\\\\src\\\\components\\\\independent\\\\webRTCRoom\\\\VideoItem.jsx\";\nimport React, { Component } from \"react\";\nimport getHTMLMediaElement from \"./getHTMLMediaElement.jsx\";\nimport \"./webrtc.style.css\";\nvar connection = new window.RTCMultiConnection();\nconnection.autoCloseEntireSession = true; // connection.publicRoomIdentifier = window.params.publicRoomIdentifier;\n// FIXME: 우리 소켓링크로 연결 변경\n\nconnection.socketURL = \"https://rtcmulticonnection.herokuapp.com:443/\";\nexport var VideoItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VideoItem, _Component);\n\n  function VideoItem() {\n    _classCallCheck(this, VideoItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(VideoItem).apply(this, arguments));\n  }\n\n  _createClass(VideoItem, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var script = document.createElement(\"script\");\n      script.src = \"https://cdn.webrtc-experiment.com/RTCMultiConnection.js\";\n      script.src = \"https://cdn.webrtc-experiment.com/conversation.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/node_modules/webrtc-adapter/out/adapter.js\";\n      script.async = true;\n      document.body.appendChild(script);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      (function () {\n        var params = {},\n            r = /([^&=]+)=?([^&]*)/g;\n\n        function d(s) {\n          return decodeURIComponent(s.replace(/\\+/g, \" \"));\n        }\n\n        var match,\n            search = window.location.search;\n\n        while (match = r.exec(search.substring(1))) {\n          params[d(match[1])] = d(match[2]);\n        }\n\n        window.params = params;\n      })(); // if you want audio+video conferencing\n\n\n      connection.socketMessageEvent = \"video-conference-demo\";\n      connection.session = {\n        audio: true,\n        video: true\n      };\n      connection.sdpConstraints.mandatory = {\n        OfferToReceiveAudio: true,\n        OfferToReceiveVideo: true\n      };\n\n      var showVideo = function showVideo() {\n        console.log(\"hi\"); //connection1\n        // connection.videosContainer = document.getElementsByClassName(\n        //   \"videos-container\"\n        // );\n        // console.log(connection.videosContainer);\n        //FIXME: 현재 이 onstream이 안먹히고 있음!!!!!!!!!\n        // connection.onstream = function(event) {\n        //   var existing = document.getElementById(event.streamid);\n        //   if (existing && existing.parentNode) {\n        //     existing.parentNode.removeChild(existing);\n        //   }\n        //   event.mediaElement.removeAttribute(\"src\");\n        //   event.mediaElement.removeAttribute(\"srcObject\");\n        //   event.mediaElement.muted = true;\n        //   event.mediaElement.volume = 0;\n        //   var video = document.createElement(\"video\");\n        //   try {\n        //     video.setAttributeNode(document.createAttribute(\"autoplay\"));\n        //     video.setAttributeNode(document.createAttribute(\"playsinline\"));\n        //   } catch (e) {\n        //     video.setAttribute(\"autoplay\", true);\n        //     video.setAttribute(\"playsinline\", true);\n        //   }\n        //   if (event.type === \"local\") {\n        //     video.volume = 0;\n        //     try {\n        //       video.setAttributeNode(document.createAttribute(\"muted\"));\n        //     } catch (e) {\n        //       video.setAttribute(\"muted\", true);\n        //     }\n        //   }\n        //   video.srcObject = event.stream;\n        //   var height =\n        //     parseInt(connection.videosContainer.clientHeight / 3) - 100;\n        //   var width = 20;\n        //   var mediaElement = getHTMLMediaElement.getHTMLMediaElement(video, {\n        //     title: event.userid,\n        //     buttons: [\"full-screen\"],\n        //     width: width,\n        //     height: height,\n        //     showOnMouseEnter: false\n        //   });\n        //   connection.videosContainer.appendChild(mediaElement);\n        //   console.log(connection.videosContainer);\n        //   setTimeout(function() {\n        //     mediaElement.media.play();\n        //   }, 5000);\n        //   mediaElement.id = event.streamid;\n        //   // to keep room-id in cache\n        //   localStorage.setItem(\n        //     connection.socketMessageEvent,\n        //     connection.sessionid\n        //   );\n        //   if (event.type === \"local\") {\n        //     connection.socket.on(\"disconnect\", function() {\n        //       if (!connection.getAllParticipants().length) {\n        //         window.location.reload();\n        //       }\n        //     });\n        //   }\n        // };\n      }; //connection2\n\n\n      connection.onstreamended = function (event) {\n        var mediaElement = document.getElementById(event.streamid);\n\n        if (mediaElement) {\n          mediaElement.parentNode.removeChild(mediaElement);\n        }\n      };\n\n      connection.onMediaError = function (e) {\n        if (e.message === \"Concurrent mic process limit.\") {\n          if (window.DetectRTC.audioInputDevices.length <= 1) {\n            alert(\"Please select external microphone. Check github issue number 483.\");\n            return;\n          }\n\n          var secondaryMic = window.DetectRTC.audioInputDevices[1].deviceId;\n          connection.mediaConstraints.audio = {\n            deviceId: secondaryMic\n          };\n          connection.join(connection.sessionid);\n        }\n      };\n\n      var disableInputButtons = function disableInputButtons(enable) {\n        // document.getElementById(\"room-id\").onkeyup();\n        document.getElementsByClassName(\"open-or-join-room\").disabled = !enable;\n        document.getElementsByClassName(\"open-room\").disabled = !enable;\n        document.getElementsByClassName(\"join-room\").disabled = !enable;\n        document.getElementsByClassName(\"room-id\").disabled = !enable;\n      };\n      /*신규 화상회의 방 개설하기 */\n\n\n      var openRoom = function openRoom() {\n        disableInputButtons();\n        connection.open(document.getElementById(\"room-id\").value, function (isRoomOpened, roomid, error) {\n          if (isRoomOpened === true) {\n            showRoomURL(connection.sessionid); // showVideo();\n          } else {\n            disableInputButtons(true);\n\n            if (error === \"Room not available\") {\n              alert(\"이미 개설된 방입니다. 참여하기 버튼을 누르거나 새로운 방을 개설해주세요.\");\n              return;\n            }\n\n            alert(error);\n          }\n        });\n      };\n      /*기존 개설된 화상회의 방 들어가기 */\n\n\n      var joinRoom = function joinRoom() {\n        disableInputButtons();\n        connection.join(document.getElementById(\"room-id\").value, function (isJoinedRoom, roomid, error) {\n          if (error) {\n            disableInputButtons(true);\n\n            if (error === \"Room not available\") {\n              alert(\"현재 이 방은 존재하지 않는 방입니다.\");\n              return;\n            }\n\n            alert(error);\n          }\n        });\n      };\n      /*신규 화상회의방 개설하고 들어가기 */\n\n\n      var openOrJoinRoom = function openOrJoinRoom() {\n        disableInputButtons();\n        connection.openOrJoin(document.getElementById(\"room-id\".value, function (isRoomExist, roomid, error) {\n          if (error) {\n            disableInputButtons(true);\n            alert(error);\n          } else if (connection.isInitiator === true) {\n            showRoomURL(roomid);\n            showVideo();\n          }\n        }));\n      };\n\n      var showRoomURL = function showRoomURL(roomid) {\n        var roomHashURL = \"#\" + roomid;\n        var roomQueryStringURL = \"?roomid=\" + roomid;\n        var html = \"<h2>Unique URL for your room:</h2><br>\";\n        html += 'Hash URL: <a href=\"' + roomHashURL + '\" target=\"_blank\">' + roomHashURL + \"</a>\";\n        html += \"<br>\";\n        html += 'QueryString URL: <a href=\"' + roomQueryStringURL + '\" target=\"_blank\">' + roomQueryStringURL + \"</a>\";\n        var roomURLsDiv = document.getElementById(\"room-urls\");\n        roomURLsDiv.innerHTML = html;\n        roomURLsDiv.style.display = \"block\";\n      }; //roomid setting 부분\n\n\n      var roomid = \"\";\n\n      if (localStorage.getItem(connection.socketMessageEvent)) {\n        roomid = localStorage.getItem(connection.socketMessageEvent);\n      } else {\n        roomid = connection.token();\n      }\n\n      var txtRoomId = document.getElementsByClassName(\"room-id\"); //FIXME:className으로 해야 작동이 되나 원래는 id로 해야함. 둘의 차이를 잘 모르겠음.\n\n      txtRoomId.value = roomid; //FIXME:\n\n      txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function () {\n        localStorage.setItem(connection.socketMessageEvent, document.getElementById(\"room-id\").value);\n      };\n\n      var hashString = window.location.hash.replace(\"#\", \"\");\n\n      if (hashString.length && hashString.indexOf(\"comment-\") === 0) {\n        hashString = \"\";\n      } //TODO: roomid를 직접 받아와야하는 부분\n\n\n      var roomid = window.params.roomid; // var roomid = params.roomid; //FIXME:\n\n      if (!roomid && hashString.length) {\n        roomid = hashString;\n      }\n\n      if (roomid && roomid.length) {\n        document.getElementsByClassName(\"room-id\").value = roomid;\n        localStorage.setItem(connection.socketMessageEvent, roomid); // auto-join-room\n\n        (function reCheckRoomPresence() {\n          connection.checkPresence(roomid, function (isRoomExist) {\n            if (isRoomExist) {\n              connection.join(roomid);\n              return;\n            }\n\n            setTimeout(reCheckRoomPresence, 5000);\n          });\n        })();\n\n        disableInputButtons();\n      } // detect 2G\n\n\n      if (navigator.connection && navigator.connection.type === \"cellular\" && navigator.connection.downlinkMax <= 0.115) {\n        alert(\"2G is not supported. Please use a better internet service.\");\n      }\n\n      return React.createElement(\"div\", {\n        id: \"video-home-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, \"Video Conferencing using RTCMultiConnection\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"room-id\",\n        className: \"room-id\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        size: \"20\",\n        defaultValue: \"abcded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"open-room\",\n        onClick: openRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, \"\\uD68C\\uC758\\uC2E4 \\uAC1C\\uC124\\uD558\\uAE30\"), React.createElement(\"button\", {\n        className: \"join-room\",\n        onClick: joinRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, \"\\uD68C\\uC758\\uC2E4 \\uCC38\\uC5EC\\uD558\\uAE30\"), React.createElement(\"button\", {\n        className: \"open-or-join-room\",\n        onClick: openOrJoinRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \"\\uD68C\\uC758\\uC2E4 \\uAC1C\\uC124/\\uCC38\\uC5EC\\uD558\\uAE30\")), React.createElement(\"div\", {\n        className: \"videos-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"room-urls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return VideoItem;\n}(Component);\nexport default VideoItem;","map":{"version":3,"sources":["C:\\React\\react-gradu\\src\\components\\independent\\webRTCRoom\\VideoItem.jsx"],"names":["React","Component","getHTMLMediaElement","connection","window","RTCMultiConnection","autoCloseEntireSession","socketURL","VideoItem","script","document","createElement","src","async","body","appendChild","params","r","d","s","decodeURIComponent","replace","match","search","location","exec","substring","socketMessageEvent","session","audio","video","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","showVideo","console","log","onstreamended","event","mediaElement","getElementById","streamid","parentNode","removeChild","onMediaError","e","message","DetectRTC","audioInputDevices","length","alert","secondaryMic","deviceId","mediaConstraints","join","sessionid","disableInputButtons","enable","getElementsByClassName","disabled","openRoom","open","value","isRoomOpened","roomid","error","showRoomURL","joinRoom","isJoinedRoom","openOrJoinRoom","openOrJoin","isRoomExist","isInitiator","roomHashURL","roomQueryStringURL","html","roomURLsDiv","innerHTML","style","display","localStorage","getItem","token","txtRoomId","onkeyup","oninput","onpaste","setItem","hashString","hash","indexOf","reCheckRoomPresence","checkPresence","setTimeout","navigator","type","downlinkMax"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport getHTMLMediaElement from \"./getHTMLMediaElement.jsx\";\r\n\r\nimport \"./webrtc.style.css\";\r\n\r\nvar connection = new window.RTCMultiConnection();\r\n\r\nconnection.autoCloseEntireSession = true;\r\n// connection.publicRoomIdentifier = window.params.publicRoomIdentifier;\r\n\r\n// FIXME: 우리 소켓링크로 연결 변경\r\nconnection.socketURL = \"https://rtcmulticonnection.herokuapp.com:443/\";\r\n\r\nexport class VideoItem extends Component {\r\n  componentWillMount() {\r\n    const script = document.createElement(\"script\");\r\n\r\n    script.src = \"https://cdn.webrtc-experiment.com/RTCMultiConnection.js\";\r\n    script.src = \"https://cdn.webrtc-experiment.com/conversation.js\";\r\n\r\n    script.src =\r\n      \"https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js\";\r\n    script.src =\r\n      \"https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js\";\r\n    script.src =\r\n      \"https://rtcmulticonnection.herokuapp.com/node_modules/webrtc-adapter/out/adapter.js\";\r\n\r\n    script.async = true;\r\n\r\n    document.body.appendChild(script);\r\n  }\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    (function() {\r\n      var params = {},\r\n        r = /([^&=]+)=?([^&]*)/g;\r\n      function d(s) {\r\n        return decodeURIComponent(s.replace(/\\+/g, \" \"));\r\n      }\r\n      var match,\r\n        search = window.location.search;\r\n      while ((match = r.exec(search.substring(1))))\r\n        params[d(match[1])] = d(match[2]);\r\n      window.params = params;\r\n    })();\r\n\r\n    // if you want audio+video conferencing\r\n    connection.socketMessageEvent = \"video-conference-demo\";\r\n\r\n    connection.session = {\r\n      audio: true,\r\n      video: true\r\n    };\r\n    connection.sdpConstraints.mandatory = {\r\n      OfferToReceiveAudio: true,\r\n      OfferToReceiveVideo: true\r\n    };\r\n    const showVideo = () => {\r\n      console.log(\"hi\");\r\n      //connection1\r\n      // connection.videosContainer = document.getElementsByClassName(\r\n      //   \"videos-container\"\r\n      // );\r\n      // console.log(connection.videosContainer);\r\n      //FIXME: 현재 이 onstream이 안먹히고 있음!!!!!!!!!\r\n      // connection.onstream = function(event) {\r\n      //   var existing = document.getElementById(event.streamid);\r\n      //   if (existing && existing.parentNode) {\r\n      //     existing.parentNode.removeChild(existing);\r\n      //   }\r\n      //   event.mediaElement.removeAttribute(\"src\");\r\n      //   event.mediaElement.removeAttribute(\"srcObject\");\r\n      //   event.mediaElement.muted = true;\r\n      //   event.mediaElement.volume = 0;\r\n      //   var video = document.createElement(\"video\");\r\n      //   try {\r\n      //     video.setAttributeNode(document.createAttribute(\"autoplay\"));\r\n      //     video.setAttributeNode(document.createAttribute(\"playsinline\"));\r\n      //   } catch (e) {\r\n      //     video.setAttribute(\"autoplay\", true);\r\n      //     video.setAttribute(\"playsinline\", true);\r\n      //   }\r\n      //   if (event.type === \"local\") {\r\n      //     video.volume = 0;\r\n      //     try {\r\n      //       video.setAttributeNode(document.createAttribute(\"muted\"));\r\n      //     } catch (e) {\r\n      //       video.setAttribute(\"muted\", true);\r\n      //     }\r\n      //   }\r\n      //   video.srcObject = event.stream;\r\n      //   var height =\r\n      //     parseInt(connection.videosContainer.clientHeight / 3) - 100;\r\n      //   var width = 20;\r\n      //   var mediaElement = getHTMLMediaElement.getHTMLMediaElement(video, {\r\n      //     title: event.userid,\r\n      //     buttons: [\"full-screen\"],\r\n      //     width: width,\r\n      //     height: height,\r\n      //     showOnMouseEnter: false\r\n      //   });\r\n      //   connection.videosContainer.appendChild(mediaElement);\r\n      //   console.log(connection.videosContainer);\r\n      //   setTimeout(function() {\r\n      //     mediaElement.media.play();\r\n      //   }, 5000);\r\n      //   mediaElement.id = event.streamid;\r\n      //   // to keep room-id in cache\r\n      //   localStorage.setItem(\r\n      //     connection.socketMessageEvent,\r\n      //     connection.sessionid\r\n      //   );\r\n      //   if (event.type === \"local\") {\r\n      //     connection.socket.on(\"disconnect\", function() {\r\n      //       if (!connection.getAllParticipants().length) {\r\n      //         window.location.reload();\r\n      //       }\r\n      //     });\r\n      //   }\r\n      // };\r\n    };\r\n\r\n    //connection2\r\n    connection.onstreamended = function(event) {\r\n      var mediaElement = document.getElementById(event.streamid);\r\n      if (mediaElement) {\r\n        mediaElement.parentNode.removeChild(mediaElement);\r\n      }\r\n    };\r\n    connection.onMediaError = function(e) {\r\n      if (e.message === \"Concurrent mic process limit.\") {\r\n        if (window.DetectRTC.audioInputDevices.length <= 1) {\r\n          alert(\r\n            \"Please select external microphone. Check github issue number 483.\"\r\n          );\r\n          return;\r\n        }\r\n        var secondaryMic = window.DetectRTC.audioInputDevices[1].deviceId;\r\n        connection.mediaConstraints.audio = {\r\n          deviceId: secondaryMic\r\n        };\r\n        connection.join(connection.sessionid);\r\n      }\r\n    };\r\n\r\n    const disableInputButtons = enable => {\r\n      // document.getElementById(\"room-id\").onkeyup();\r\n\r\n      document.getElementsByClassName(\"open-or-join-room\").disabled = !enable;\r\n      document.getElementsByClassName(\"open-room\").disabled = !enable;\r\n      document.getElementsByClassName(\"join-room\").disabled = !enable;\r\n      document.getElementsByClassName(\"room-id\").disabled = !enable;\r\n    };\r\n\r\n    /*신규 화상회의 방 개설하기 */\r\n    const openRoom = () => {\r\n      disableInputButtons();\r\n      connection.open(document.getElementById(\"room-id\").value, function(\r\n        isRoomOpened,\r\n        roomid,\r\n        error\r\n      ) {\r\n        if (isRoomOpened === true) {\r\n          showRoomURL(connection.sessionid);\r\n          // showVideo();\r\n        } else {\r\n          disableInputButtons(true);\r\n          if (error === \"Room not available\") {\r\n            alert(\r\n              \"이미 개설된 방입니다. 참여하기 버튼을 누르거나 새로운 방을 개설해주세요.\"\r\n            );\r\n            return;\r\n          }\r\n          alert(error);\r\n        }\r\n      });\r\n    };\r\n\r\n    /*기존 개설된 화상회의 방 들어가기 */\r\n    const joinRoom = () => {\r\n      disableInputButtons();\r\n      connection.join(document.getElementById(\"room-id\").value, function(\r\n        isJoinedRoom,\r\n        roomid,\r\n        error\r\n      ) {\r\n        if (error) {\r\n          disableInputButtons(true);\r\n          if (error === \"Room not available\") {\r\n            alert(\"현재 이 방은 존재하지 않는 방입니다.\");\r\n            return;\r\n          }\r\n          alert(error);\r\n        }\r\n      });\r\n    };\r\n\r\n    /*신규 화상회의방 개설하고 들어가기 */\r\n    const openOrJoinRoom = () => {\r\n      disableInputButtons();\r\n      connection.openOrJoin(\r\n        document.getElementById(\"room-id\".value, function(\r\n          isRoomExist,\r\n          roomid,\r\n          error\r\n        ) {\r\n          if (error) {\r\n            disableInputButtons(true);\r\n            alert(error);\r\n          } else if (connection.isInitiator === true) {\r\n            showRoomURL(roomid);\r\n            showVideo();\r\n          }\r\n        })\r\n      );\r\n    };\r\n\r\n    const showRoomURL = roomid => {\r\n      var roomHashURL = \"#\" + roomid;\r\n      var roomQueryStringURL = \"?roomid=\" + roomid;\r\n      var html = \"<h2>Unique URL for your room:</h2><br>\";\r\n      html +=\r\n        'Hash URL: <a href=\"' +\r\n        roomHashURL +\r\n        '\" target=\"_blank\">' +\r\n        roomHashURL +\r\n        \"</a>\";\r\n      html += \"<br>\";\r\n      html +=\r\n        'QueryString URL: <a href=\"' +\r\n        roomQueryStringURL +\r\n        '\" target=\"_blank\">' +\r\n        roomQueryStringURL +\r\n        \"</a>\";\r\n      var roomURLsDiv = document.getElementById(\"room-urls\");\r\n      roomURLsDiv.innerHTML = html;\r\n      roomURLsDiv.style.display = \"block\";\r\n    };\r\n\r\n    //roomid setting 부분\r\n    var roomid = \"\";\r\n    if (localStorage.getItem(connection.socketMessageEvent)) {\r\n      roomid = localStorage.getItem(connection.socketMessageEvent);\r\n    } else {\r\n      roomid = connection.token();\r\n    }\r\n    var txtRoomId = document.getElementsByClassName(\"room-id\"); //FIXME:className으로 해야 작동이 되나 원래는 id로 해야함. 둘의 차이를 잘 모르겠음.\r\n\r\n    txtRoomId.value = roomid; //FIXME:\r\n    txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function() {\r\n      localStorage.setItem(\r\n        connection.socketMessageEvent,\r\n        document.getElementById(\"room-id\").value\r\n      );\r\n    };\r\n    var hashString = window.location.hash.replace(\"#\", \"\");\r\n    if (hashString.length && hashString.indexOf(\"comment-\") === 0) {\r\n      hashString = \"\";\r\n    }\r\n\r\n    //TODO: roomid를 직접 받아와야하는 부분\r\n    var roomid = window.params.roomid;\r\n\r\n    // var roomid = params.roomid; //FIXME:\r\n    if (!roomid && hashString.length) {\r\n      roomid = hashString;\r\n    }\r\n    if (roomid && roomid.length) {\r\n      document.getElementsByClassName(\"room-id\").value = roomid;\r\n      localStorage.setItem(connection.socketMessageEvent, roomid);\r\n\r\n      // auto-join-room\r\n      (function reCheckRoomPresence() {\r\n        connection.checkPresence(roomid, function(isRoomExist) {\r\n          if (isRoomExist) {\r\n            connection.join(roomid);\r\n            return;\r\n          }\r\n          setTimeout(reCheckRoomPresence, 5000);\r\n        });\r\n      })();\r\n      disableInputButtons();\r\n    }\r\n\r\n    // detect 2G\r\n    if (\r\n      navigator.connection &&\r\n      navigator.connection.type === \"cellular\" &&\r\n      navigator.connection.downlinkMax <= 0.115\r\n    ) {\r\n      alert(\"2G is not supported. Please use a better internet service.\");\r\n    }\r\n\r\n    return (\r\n      <div id=\"video-home-container\">\r\n        <h1>Video Conferencing using RTCMultiConnection</h1>\r\n\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            id=\"room-id\"\r\n            className=\"room-id\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize=\"off\"\r\n            size=\"20\"\r\n            defaultValue=\"abcded\"\r\n          />\r\n          <button className=\"open-room\" onClick={openRoom}>\r\n            회의실 개설하기\r\n          </button>\r\n          <button className=\"join-room\" onClick={joinRoom}>\r\n            회의실 참여하기\r\n          </button>\r\n          <button className=\"open-or-join-room\" onClick={openOrJoinRoom}>\r\n            회의실 개설/참여하기\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"videos-container\" />\r\n\r\n        <div id=\"room-urls\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoItem;\r\n"]},"metadata":{},"sourceType":"module"}