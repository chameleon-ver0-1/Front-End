{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Input Box is in different position for different mode.\n * This not the same design as `Select` cause it's followed by antd 0.x `Select`.\n * We will not follow the new design immediately since antd 3.x is already released.\n *\n * So this file named as Selector to avoid confuse.\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { createRef } from '../util';\nexport var selectorPropTypes = {\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  open: PropTypes.bool,\n  selectorValueList: PropTypes.array,\n  allowClear: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  onClick: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  removeSelected: PropTypes.func,\n  // Pass by component\n  ariaId: PropTypes.string,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\nexport var selectorContextTypes = {\n  onSelectorFocus: PropTypes.func.isRequired,\n  onSelectorBlur: PropTypes.func.isRequired,\n  onSelectorKeyDown: PropTypes.func.isRequired,\n  onSelectorClear: PropTypes.func.isRequired\n};\nexport default function (modeName) {\n  var BaseSelector =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(BaseSelector, _React$Component);\n\n    function BaseSelector() {\n      var _this;\n\n      _classCallCheck(this, BaseSelector);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseSelector).call(this));\n\n      _defineProperty(_assertThisInitialized(_this), \"onFocus\", function () {\n        var _this$props = _this.props,\n            onFocus = _this$props.onFocus,\n            focused = _this$props.focused;\n        var onSelectorFocus = _this.context.rcTreeSelect.onSelectorFocus;\n\n        if (!focused) {\n          onSelectorFocus();\n        }\n\n        if (onFocus) {\n          onFocus.apply(void 0, arguments);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"onBlur\", function () {\n        var onBlur = _this.props.onBlur;\n        var onSelectorBlur = _this.context.rcTreeSelect.onSelectorBlur; // TODO: Not trigger when is inner component get focused\n\n        onSelectorBlur();\n\n        if (onBlur) {\n          onBlur.apply(void 0, arguments);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"focus\", function () {\n        _this.domRef.current.focus();\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"blur\", function () {\n        _this.domRef.current.focus();\n      });\n\n      _this.domRef = createRef();\n      return _this;\n    }\n\n    _createClass(BaseSelector, [{\n      key: \"renderClear\",\n      value: function renderClear() {\n        var _this$props2 = this.props,\n            prefixCls = _this$props2.prefixCls,\n            allowClear = _this$props2.allowClear,\n            selectorValueList = _this$props2.selectorValueList,\n            clearIcon = _this$props2.clearIcon;\n        var onSelectorClear = this.context.rcTreeSelect.onSelectorClear;\n\n        if (!allowClear || !selectorValueList.length || !selectorValueList[0].value) {\n          return null;\n        }\n\n        return React.createElement(\"span\", {\n          key: \"clear\",\n          className: \"\".concat(prefixCls, \"-selection__clear\"),\n          onClick: onSelectorClear\n        }, typeof clearIcon === 'function' ? React.createElement(clearIcon, _objectSpread({}, this.props)) : clearIcon);\n      }\n    }, {\n      key: \"renderArrow\",\n      value: function renderArrow() {\n        var _this$props3 = this.props,\n            prefixCls = _this$props3.prefixCls,\n            showArrow = _this$props3.showArrow,\n            inputIcon = _this$props3.inputIcon;\n\n        if (!showArrow) {\n          return null;\n        }\n\n        return React.createElement(\"span\", {\n          key: \"arrow\",\n          className: \"\".concat(prefixCls, \"-arrow\"),\n          style: {\n            outline: 'none'\n          }\n        }, typeof inputIcon === 'function' ? React.createElement(inputIcon, _objectSpread({}, this.props)) : inputIcon);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _classNames;\n\n        var _this$props4 = this.props,\n            prefixCls = _this$props4.prefixCls,\n            className = _this$props4.className,\n            style = _this$props4.style,\n            open = _this$props4.open,\n            focused = _this$props4.focused,\n            disabled = _this$props4.disabled,\n            allowClear = _this$props4.allowClear,\n            onClick = _this$props4.onClick,\n            ariaId = _this$props4.ariaId,\n            renderSelection = _this$props4.renderSelection,\n            renderPlaceholder = _this$props4.renderPlaceholder,\n            tabIndex = _this$props4.tabIndex;\n        var onSelectorKeyDown = this.context.rcTreeSelect.onSelectorKeyDown;\n        var myTabIndex = tabIndex;\n\n        if (disabled) {\n          myTabIndex = null;\n        }\n\n        return React.createElement(\"span\", {\n          style: style,\n          onClick: onClick,\n          className: classNames(className, prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-open\"), open), _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), open || focused), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-enabled\"), !disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-allow-clear\"), allowClear), _classNames)),\n          ref: this.domRef,\n          role: \"combobox\",\n          \"aria-expanded\": open,\n          \"aria-owns\": open ? ariaId : undefined,\n          \"aria-controls\": open ? ariaId : undefined,\n          \"aria-haspopup\": \"listbox\",\n          \"aria-disabled\": disabled,\n          tabIndex: myTabIndex,\n          onFocus: this.onFocus,\n          onBlur: this.onBlur,\n          onKeyDown: onSelectorKeyDown\n        }, React.createElement(\"span\", {\n          key: \"selection\",\n          className: classNames(\"\".concat(prefixCls, \"-selection\"), \"\".concat(prefixCls, \"-selection--\").concat(modeName))\n        }, renderSelection(), this.renderClear(), this.renderArrow(), renderPlaceholder && renderPlaceholder()));\n      }\n    }]);\n\n    return BaseSelector;\n  }(React.Component);\n\n  _defineProperty(BaseSelector, \"propTypes\", _objectSpread({}, selectorPropTypes, {\n    // Pass by HOC\n    renderSelection: PropTypes.func.isRequired,\n    renderPlaceholder: PropTypes.func,\n    tabIndex: PropTypes.number\n  }));\n\n  _defineProperty(BaseSelector, \"contextTypes\", {\n    rcTreeSelect: PropTypes.shape(_objectSpread({}, selectorContextTypes))\n  });\n\n  _defineProperty(BaseSelector, \"defaultProps\", {\n    tabIndex: 0\n  });\n\n  polyfill(BaseSelector);\n  return BaseSelector;\n}","map":null,"metadata":{},"sourceType":"module"}