{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeywordTrigger from './KeywordTrigger';\nimport { MentionsContextProvider } from './MentionsContext';\nimport Option from './Option';\nimport { filterOption as defaultFilterOption, getBeforeSelectionText, getLastMeasureIndex, omit, replaceWithMeasure, setInputSelection, validateSearch as defaultValidateSearch } from './util';\n\nvar Mentions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Mentions, _React$Component);\n\n  function Mentions(props) {\n    var _this;\n\n    _classCallCheck(this, Mentions);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mentions).call(this, props));\n    _this.focusId = undefined;\n\n    _this.triggerChange = function (value) {\n      var onChange = _this.props.onChange;\n\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      if (onChange) {\n        onChange(value);\n      }\n    };\n\n    _this.onChange = function (_ref) {\n      var value = _ref.target.value;\n\n      _this.triggerChange(value);\n    }; // Check if hit the measure keyword\n\n\n    _this.onKeyDown = function (event) {\n      var which = event.which;\n      var _this$state = _this.state,\n          activeIndex = _this$state.activeIndex,\n          measuring = _this$state.measuring; // Skip if not measuring\n\n      if (!measuring) {\n        return;\n      }\n\n      if (which === KeyCode.UP || which === KeyCode.DOWN) {\n        // Control arrow function\n        var optionLen = _this.getOptions().length;\n\n        var offset = which === KeyCode.UP ? -1 : 1;\n        var newActiveIndex = (activeIndex + offset + optionLen) % optionLen;\n\n        _this.setState({\n          activeIndex: newActiveIndex\n        });\n\n        event.preventDefault();\n      } else if (which === KeyCode.ESC) {\n        _this.stopMeasure();\n\n        return;\n      } else if (which === KeyCode.ENTER) {\n        // Measure hit\n        var option = _this.getOptions()[activeIndex];\n\n        _this.selectOption(option);\n\n        event.preventDefault();\n      }\n    };\n    /**\n     * When to start measure:\n     * 1. When user press `prefix`\n     * 2. When measureText !== prevMeasureText\n     *  - If measure hit\n     *  - If measuring\n     *\n     * When to stop measure:\n     * 1. Selection is out of range\n     * 2. Contains `space`\n     * 3. ESC or select one\n     */\n\n\n    _this.onKeyUp = function (event) {\n      var key = event.key,\n          which = event.which;\n      var _this$state2 = _this.state,\n          prevMeasureText = _this$state2.measureText,\n          measuring = _this$state2.measuring;\n      var _this$props = _this.props,\n          _this$props$prefix = _this$props.prefix,\n          prefix = _this$props$prefix === void 0 ? '' : _this$props$prefix,\n          onSearch = _this$props.onSearch,\n          validateSearch = _this$props.validateSearch;\n      var target = event.target;\n      var selectionStartText = getBeforeSelectionText(target);\n\n      var _getLastMeasureIndex = getLastMeasureIndex(selectionStartText, prefix),\n          measureIndex = _getLastMeasureIndex.location,\n          measurePrefix = _getLastMeasureIndex.prefix; // Skip if match the white key list\n\n\n      if ([KeyCode.ESC, KeyCode.UP, KeyCode.DOWN, KeyCode.ENTER].indexOf(which) !== -1) {\n        return;\n      }\n\n      if (measureIndex !== -1) {\n        var measureText = selectionStartText.slice(measureIndex + measurePrefix.length);\n        var validateMeasure = validateSearch(measureText, _this.props);\n        var matchOption = !!_this.getOptions(measureText).length;\n\n        if (validateMeasure) {\n          if (key === measurePrefix || measuring || measureText !== prevMeasureText && matchOption) {\n            _this.startMeasure(measureText, measurePrefix, measureIndex);\n          }\n        } else if (measuring) {\n          // Stop if measureText is invalidate\n          _this.stopMeasure();\n        }\n        /**\n         * We will trigger `onSearch` to developer since they may use for async update.\n         * If met `space` means user finished searching.\n         */\n\n\n        if (onSearch && validateMeasure) {\n          onSearch(measureText, measurePrefix);\n        }\n      } else if (measuring) {\n        _this.stopMeasure();\n      }\n    };\n\n    _this.onInputFocus = function (event) {\n      _this.onFocus(event);\n    };\n\n    _this.onInputBlur = function (event) {\n      _this.onBlur(event);\n    };\n\n    _this.onDropdownFocus = function () {\n      _this.onFocus();\n    };\n\n    _this.onFocus = function (event) {\n      window.clearTimeout(_this.focusId);\n      var isFocus = _this.state.isFocus;\n      var onFocus = _this.props.onFocus;\n\n      if (!isFocus && event && onFocus) {\n        onFocus(event);\n      }\n\n      _this.setState({\n        isFocus: true\n      });\n    };\n\n    _this.onBlur = function (event) {\n      _this.focusId = window.setTimeout(function () {\n        var onBlur = _this.props.onBlur;\n\n        _this.setState({\n          isFocus: false\n        });\n\n        _this.stopMeasure();\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }, 0);\n    };\n\n    _this.selectOption = function (option) {\n      var _this$state3 = _this.state,\n          value = _this$state3.value,\n          measureLocation = _this$state3.measureLocation,\n          measurePrefix = _this$state3.measurePrefix;\n      var _this$props2 = _this.props,\n          split = _this$props2.split,\n          onSelect = _this$props2.onSelect;\n      var _option$value = option.value,\n          mentionValue = _option$value === void 0 ? '' : _option$value;\n\n      var _replaceWithMeasure = replaceWithMeasure(value, {\n        measureLocation: measureLocation,\n        targetText: mentionValue,\n        prefix: measurePrefix,\n        selectionStart: _this.textarea.selectionStart,\n        split: split\n      }),\n          text = _replaceWithMeasure.text,\n          selectionLocation = _replaceWithMeasure.selectionLocation;\n\n      _this.triggerChange(text);\n\n      _this.stopMeasure(function () {\n        // We need restore the selection position\n        setInputSelection(_this.textarea, selectionLocation);\n      });\n\n      if (onSelect) {\n        onSelect(option, measurePrefix);\n      }\n    };\n\n    _this.setActiveIndex = function (activeIndex) {\n      _this.setState({\n        activeIndex: activeIndex\n      });\n    };\n\n    _this.setTextAreaRef = function (element) {\n      _this.textarea = element;\n    };\n\n    _this.setMeasureRef = function (element) {\n      _this.measure = element;\n    };\n\n    _this.getOptions = function (measureText) {\n      var targetMeasureText = measureText || _this.state.measureText || '';\n      var _this$props3 = _this.props,\n          children = _this$props3.children,\n          filterOption = _this$props3.filterOption;\n      var list = toArray(children).map(function (_ref2) {\n        var props = _ref2.props;\n        return props;\n      }).filter(function (option) {\n        /** Return all result if `filterOption` is false. */\n        if (filterOption === false) {\n          return true;\n        }\n\n        return filterOption(targetMeasureText, option);\n      });\n      return list;\n    };\n\n    _this.state = {\n      value: props.defaultValue || props.value || '',\n      measuring: false,\n      measureLocation: 0,\n      measureText: null,\n      measurePrefix: '',\n      activeIndex: 0,\n      isFocus: false\n    };\n    return _this;\n  }\n\n  _createClass(Mentions, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var measuring = this.state.measuring; // Sync measure div top with textarea for rc-trigger usage\n\n      if (measuring) {\n        this.measure.scrollTop = this.textarea.scrollTop;\n      }\n    }\n  }, {\n    key: \"startMeasure\",\n    value: function startMeasure(measureText, measurePrefix, measureLocation) {\n      this.setState({\n        measuring: true,\n        measureText: measureText,\n        measurePrefix: measurePrefix,\n        measureLocation: measureLocation,\n        activeIndex: 0\n      });\n    }\n  }, {\n    key: \"stopMeasure\",\n    value: function stopMeasure(callback) {\n      this.setState({\n        measuring: false,\n        measureLocation: 0,\n        measureText: null\n      }, callback);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.textarea.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.textarea.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          value = _this$state4.value,\n          measureLocation = _this$state4.measureLocation,\n          measurePrefix = _this$state4.measurePrefix,\n          measuring = _this$state4.measuring,\n          activeIndex = _this$state4.activeIndex;\n\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          placement = _a.placement,\n          transitionName = _a.transitionName,\n          className = _a.className,\n          style = _a.style,\n          autoFocus = _a.autoFocus,\n          notFoundContent = _a.notFoundContent,\n          restProps = __rest(_a, [\"prefixCls\", \"placement\", \"transitionName\", \"className\", \"style\", \"autoFocus\", \"notFoundContent\"]);\n\n      var inputProps = omit(restProps, 'value', 'defaultValue', 'prefix', 'split', 'children', 'validateSearch', 'filterOption', 'onSelect', 'onSearch');\n      var options = measuring ? this.getOptions() : [];\n      return React.createElement(\"div\", {\n        className: classNames(prefixCls, className),\n        style: style\n      }, React.createElement(\"textarea\", _extends({\n        autoFocus: autoFocus,\n        ref: this.setTextAreaRef,\n        value: value\n      }, inputProps, {\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        onKeyUp: this.onKeyUp,\n        onFocus: this.onInputFocus,\n        onBlur: this.onInputBlur\n      })), measuring && React.createElement(\"div\", {\n        ref: this.setMeasureRef,\n        className: \"\".concat(prefixCls, \"-measure\")\n      }, value.slice(0, measureLocation), React.createElement(MentionsContextProvider, {\n        value: {\n          notFoundContent: notFoundContent,\n          activeIndex: activeIndex,\n          setActiveIndex: this.setActiveIndex,\n          selectOption: this.selectOption,\n          onFocus: this.onDropdownFocus\n        }\n      }, React.createElement(KeywordTrigger, {\n        prefixCls: prefixCls,\n        transitionName: transitionName,\n        placement: placement,\n        options: options,\n        visible: true\n      }, React.createElement(\"span\", null, measurePrefix))), value.slice(measureLocation + measurePrefix.length)));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, prevState) {\n      var newState = {};\n\n      if ('value' in props && props.value !== prevState.value) {\n        newState.value = props.value;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Mentions;\n}(React.Component);\n\nMentions.Option = Option;\nMentions.defaultProps = {\n  prefixCls: 'rc-mentions',\n  prefix: '@',\n  split: ' ',\n  validateSearch: defaultValidateSearch,\n  filterOption: defaultFilterOption,\n  notFoundContent: 'Not Found',\n  rows: 1\n};\npolyfill(Mentions);\nexport default Mentions;","map":null,"metadata":{},"sourceType":"module"}