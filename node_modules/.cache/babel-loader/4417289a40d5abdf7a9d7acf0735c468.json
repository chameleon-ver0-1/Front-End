{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['react', 'prop-types', 'create-react-class'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('react'), require('prop-types'), require('create-react-class'));\n  } else {\n    root.ReactSlider = factory(root.React, root.PropTypes, root.createReactClass);\n  }\n})(this, function (React, PropTypes, createReactClass) {\n  /**\n   * To prevent text selection while dragging.\n   * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n   */\n  function pauseEvent(e) {\n    if (e.stopPropagation) e.stopPropagation();\n    if (e.preventDefault) e.preventDefault();\n    return false;\n  }\n\n  function stopPropagation(e) {\n    if (e.stopPropagation) e.stopPropagation();\n  }\n  /**\n   * Spreads `count` values equally between `min` and `max`.\n   */\n\n\n  function linspace(min, max, count) {\n    var range = (max - min) / (count - 1);\n    var res = [];\n\n    for (var i = 0; i < count; i++) {\n      res.push(min + range * i);\n    }\n\n    return res;\n  }\n\n  function ensureArray(x) {\n    return x == null ? [] : Array.isArray(x) ? x : [x];\n  }\n\n  function undoEnsureArray(x) {\n    return x != null && x.length === 1 ? x[0] : x;\n  } // undoEnsureArray(ensureArray(x)) === x\n\n\n  var ReactSlider = createReactClass({\n    displayName: 'ReactSlider',\n    propTypes: {\n      /**\n       * The minimum value of the slider.\n       */\n      min: PropTypes.number,\n\n      /**\n       * The maximum value of the slider.\n       */\n      max: PropTypes.number,\n\n      /**\n       * Value to be added or subtracted on each step the slider makes.\n       * Must be greater than zero.\n       * `max - min` should be evenly divisible by the step value.\n       */\n      step: PropTypes.number,\n\n      /**\n       * The minimal distance between any pair of handles.\n       * Must be positive, but zero means they can sit on top of each other.\n       */\n      minDistance: PropTypes.number,\n\n      /**\n       * Determines the initial positions of the handles and the number of handles if the component has no children.\n       *\n       * If a number is passed a slider with one handle will be rendered.\n       * If an array is passed each value will determine the position of one handle.\n       * The values in the array must be sorted.\n       * If the component has children, the length of the array must match the number of children.\n       */\n      defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n      /**\n       * Like `defaultValue` but for [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).\n       */\n      value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n      /**\n       * Determines whether the slider moves horizontally (from left to right) or vertically (from top to bottom).\n       */\n      orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n      /**\n       * The css class set on the slider node.\n       */\n      className: PropTypes.string,\n\n      /**\n       * The css class set on each handle node.\n       *\n       * In addition each handle will receive a numbered css class of the form `${handleClassName}-${i}`,\n       * e.g. `handle-0`, `handle-1`, ...\n       */\n      handleClassName: PropTypes.string,\n\n      /**\n       * The css class set on the handle that is currently being moved.\n       */\n      handleActiveClassName: PropTypes.string,\n\n      /**\n       * If `true` bars between the handles will be rendered.\n       */\n      withBars: PropTypes.bool,\n\n      /**\n       * The css class set on the bars between the handles.\n       * In addition bar fragment will receive a numbered css class of the form `${barClassName}-${i}`,\n       * e.g. `bar-0`, `bar-1`, ...\n       */\n      barClassName: PropTypes.string,\n\n      /**\n       * If `true` the active handle will push other handles\n       * within the constraints of `min`, `max`, `step` and `minDistance`.\n       */\n      pearling: PropTypes.bool,\n\n      /**\n       * If `true` the handles can't be moved.\n       */\n      disabled: PropTypes.bool,\n\n      /**\n       * Disables handle move when clicking the slider bar\n       */\n      snapDragDisabled: PropTypes.bool,\n\n      /**\n       * Inverts the slider.\n       */\n      invert: PropTypes.bool,\n\n      /**\n       * Callback called before starting to move a handle.\n       */\n      onBeforeChange: PropTypes.func,\n\n      /**\n       * Callback called on every value change.\n       */\n      onChange: PropTypes.func,\n\n      /**\n       * Callback called only after moving a handle has ended.\n       */\n      onAfterChange: PropTypes.func,\n\n      /**\n       *  Callback called when the the slider is clicked (handle or bars).\n       *  Receives the value at the clicked position as argument.\n       */\n      onSliderClick: PropTypes.func\n    },\n    getDefaultProps: function getDefaultProps() {\n      return {\n        min: 0,\n        max: 100,\n        step: 1,\n        minDistance: 0,\n        defaultValue: 0,\n        orientation: 'horizontal',\n        className: 'slider',\n        handleClassName: 'handle',\n        handleActiveClassName: 'active',\n        barClassName: 'bar',\n        withBars: false,\n        pearling: false,\n        disabled: false,\n        snapDragDisabled: false,\n        invert: false\n      };\n    },\n    getInitialState: function getInitialState() {\n      var value = this._or(ensureArray(this.props.value), ensureArray(this.props.defaultValue)); // reused throughout the component to store results of iterations over `value`\n\n\n      this.tempArray = value.slice(); // array for storing resize timeouts ids\n\n      this.pendingResizeTimeouts = [];\n      var zIndices = [];\n\n      for (var i = 0; i < value.length; i++) {\n        value[i] = this._trimAlignValue(value[i], this.props);\n        zIndices.push(i);\n      }\n\n      return {\n        index: -1,\n        upperBound: 0,\n        sliderLength: 0,\n        value: value,\n        zIndices: zIndices\n      };\n    },\n    // Keep the internal `value` consistent with an outside `value` if present.\n    // This basically allows the slider to be a controlled component.\n    componentWillReceiveProps: function componentWillReceiveProps(newProps) {\n      var value = this._or(ensureArray(newProps.value), this.state.value); // ensure the array keeps the same size as `value`\n\n\n      this.tempArray = value.slice();\n\n      for (var i = 0; i < value.length; i++) {\n        this.state.value[i] = this._trimAlignValue(value[i], newProps);\n      }\n\n      if (this.state.value.length > value.length) this.state.value.length = value.length; // If an upperBound has not yet been determined (due to the component being hidden\n      // during the mount event, or during the last resize), then calculate it now\n\n      if (this.state.upperBound === 0) {\n        this._handleResize();\n      }\n    },\n    // Check if the arity of `value` or `defaultValue` matches the number of children (= number of custom handles).\n    // If no custom handles are provided, just returns `value` if present and `defaultValue` otherwise.\n    // If custom handles are present but neither `value` nor `defaultValue` are applicable the handles are spread out\n    // equally.\n    // TODO: better name? better solution?\n    _or: function _or(value, defaultValue) {\n      var count = React.Children.count(this.props.children);\n\n      switch (count) {\n        case 0:\n          return value.length > 0 ? value : defaultValue;\n\n        case value.length:\n          return value;\n\n        case defaultValue.length:\n          return defaultValue;\n\n        default:\n          if (value.length !== count || defaultValue.length !== count) {\n            console.warn(this.constructor.displayName + \": Number of values does not match number of children.\");\n          }\n\n          return linspace(this.props.min, this.props.max, count);\n      }\n    },\n    componentDidMount: function componentDidMount() {\n      window.addEventListener('resize', this._handleResize);\n\n      this._handleResize();\n    },\n    componentWillUnmount: function componentWillUnmount() {\n      this._clearPendingResizeTimeouts();\n\n      window.removeEventListener('resize', this._handleResize);\n    },\n    getValue: function getValue() {\n      return undoEnsureArray(this.state.value);\n    },\n    _handleResize: function _handleResize() {\n      // setTimeout of 0 gives element enough time to have assumed its new size if it is being resized\n      var resizeTimeout = window.setTimeout(function () {\n        // drop this timeout from pendingResizeTimeouts to reduce memory usage\n        this.pendingResizeTimeouts.shift();\n        var slider = this.refs.slider;\n        var handle = this.refs.handle0;\n        var rect = slider.getBoundingClientRect();\n\n        var size = this._sizeKey();\n\n        var sliderMax = rect[this._posMaxKey()];\n\n        var sliderMin = rect[this._posMinKey()];\n\n        this.setState({\n          upperBound: slider[size] - handle[size],\n          sliderLength: Math.abs(sliderMax - sliderMin),\n          handleSize: handle[size],\n          sliderStart: this.props.invert ? sliderMax : sliderMin\n        });\n      }.bind(this), 0);\n      this.pendingResizeTimeouts.push(resizeTimeout);\n    },\n    // clear all pending timeouts to avoid error messages after unmounting\n    _clearPendingResizeTimeouts: function _clearPendingResizeTimeouts() {\n      do {\n        var nextTimeout = this.pendingResizeTimeouts.shift();\n        clearTimeout(nextTimeout);\n      } while (this.pendingResizeTimeouts.length);\n    },\n    // calculates the offset of a handle in pixels based on its value.\n    _calcOffset: function _calcOffset(value) {\n      var range = this.props.max - this.props.min;\n\n      if (range === 0) {\n        return 0;\n      }\n\n      var ratio = (value - this.props.min) / range;\n      return ratio * this.state.upperBound;\n    },\n    // calculates the value corresponding to a given pixel offset, i.e. the inverse of `_calcOffset`.\n    _calcValue: function _calcValue(offset) {\n      var ratio = offset / this.state.upperBound;\n      return ratio * (this.props.max - this.props.min) + this.props.min;\n    },\n    _buildHandleStyle: function _buildHandleStyle(offset, i) {\n      var style = {\n        position: 'absolute',\n        willChange: this.state.index >= 0 ? this._posMinKey() : '',\n        zIndex: this.state.zIndices.indexOf(i) + 1\n      };\n      style[this._posMinKey()] = offset + 'px';\n      return style;\n    },\n    _buildBarStyle: function _buildBarStyle(min, max) {\n      var obj = {\n        position: 'absolute',\n        willChange: this.state.index >= 0 ? this._posMinKey() + ',' + this._posMaxKey() : ''\n      };\n      obj[this._posMinKey()] = min;\n      obj[this._posMaxKey()] = max;\n      return obj;\n    },\n    _getClosestIndex: function _getClosestIndex(pixelOffset) {\n      var minDist = Number.MAX_VALUE;\n      var closestIndex = -1;\n      var value = this.state.value;\n      var l = value.length;\n\n      for (var i = 0; i < l; i++) {\n        var offset = this._calcOffset(value[i]);\n\n        var dist = Math.abs(pixelOffset - offset);\n\n        if (dist < minDist) {\n          minDist = dist;\n          closestIndex = i;\n        }\n      }\n\n      return closestIndex;\n    },\n    _calcOffsetFromPosition: function _calcOffsetFromPosition(position) {\n      var pixelOffset = position - this.state.sliderStart;\n      if (this.props.invert) pixelOffset = this.state.sliderLength - pixelOffset;\n      pixelOffset -= this.state.handleSize / 2;\n      return pixelOffset;\n    },\n    // Snaps the nearest handle to the value corresponding to `position` and calls `callback` with that handle's index.\n    _forceValueFromPosition: function _forceValueFromPosition(position, callback) {\n      var pixelOffset = this._calcOffsetFromPosition(position);\n\n      var closestIndex = this._getClosestIndex(pixelOffset);\n\n      var nextValue = this._trimAlignValue(this._calcValue(pixelOffset));\n\n      var value = this.state.value.slice(); // Clone this.state.value since we'll modify it temporarily\n\n      value[closestIndex] = nextValue; // Prevents the slider from shrinking below `props.minDistance`\n\n      for (var i = 0; i < value.length - 1; i += 1) {\n        if (value[i + 1] - value[i] < this.props.minDistance) return;\n      }\n\n      this.setState({\n        value: value\n      }, callback.bind(this, closestIndex));\n    },\n    _getMousePosition: function _getMousePosition(e) {\n      return [e['page' + this._axisKey()], e['page' + this._orthogonalAxisKey()]];\n    },\n    _getTouchPosition: function _getTouchPosition(e) {\n      var touch = e.touches[0];\n      return [touch['page' + this._axisKey()], touch['page' + this._orthogonalAxisKey()]];\n    },\n    _getKeyDownEventMap: function _getKeyDownEventMap() {\n      return {\n        'keydown': this._onKeyDown,\n        'focusout': this._onBlur\n      };\n    },\n    _getMouseEventMap: function _getMouseEventMap() {\n      return {\n        'mousemove': this._onMouseMove,\n        'mouseup': this._onMouseUp\n      };\n    },\n    _getTouchEventMap: function _getTouchEventMap() {\n      return {\n        'touchmove': this._onTouchMove,\n        'touchend': this._onTouchEnd\n      };\n    },\n    // create the `keydown` handler for the i-th handle\n    _createOnKeyDown: function _createOnKeyDown(i) {\n      return function (e) {\n        if (this.props.disabled) return;\n\n        this._start(i);\n\n        this._addHandlers(this._getKeyDownEventMap());\n\n        pauseEvent(e);\n      }.bind(this);\n    },\n    // create the `mousedown` handler for the i-th handle\n    _createOnMouseDown: function _createOnMouseDown(i) {\n      return function (e) {\n        if (this.props.disabled) return;\n\n        var position = this._getMousePosition(e);\n\n        this._start(i, position[0]);\n\n        this._addHandlers(this._getMouseEventMap());\n\n        pauseEvent(e);\n      }.bind(this);\n    },\n    // create the `touchstart` handler for the i-th handle\n    _createOnTouchStart: function _createOnTouchStart(i) {\n      return function (e) {\n        if (this.props.disabled || e.touches.length > 1) return;\n\n        var position = this._getTouchPosition(e);\n\n        this.startPosition = position;\n        this.isScrolling = undefined; // don't know yet if the user is trying to scroll\n\n        this._start(i, position[0]);\n\n        this._addHandlers(this._getTouchEventMap());\n\n        stopPropagation(e);\n      }.bind(this);\n    },\n    _addHandlers: function _addHandlers(eventMap) {\n      for (var key in eventMap) {\n        document.addEventListener(key, eventMap[key], false);\n      }\n    },\n    _removeHandlers: function _removeHandlers(eventMap) {\n      for (var key in eventMap) {\n        document.removeEventListener(key, eventMap[key], false);\n      }\n    },\n    _start: function _start(i, position) {\n      var activeEl = document.activeElement;\n      var handleRef = this.refs['handle' + i]; // if activeElement is body window will lost focus in IE9\n\n      if (activeEl && activeEl != document.body && activeEl != handleRef) {\n        activeEl.blur && activeEl.blur();\n      }\n\n      this.hasMoved = false;\n\n      this._fireChangeEvent('onBeforeChange');\n\n      var zIndices = this.state.zIndices;\n      zIndices.splice(zIndices.indexOf(i), 1); // remove wherever the element is\n\n      zIndices.push(i); // add to end\n\n      this.setState({\n        startValue: this.state.value[i],\n        startPosition: position,\n        index: i,\n        zIndices: zIndices\n      });\n    },\n    _onMouseUp: function _onMouseUp() {\n      this._onEnd(this._getMouseEventMap());\n    },\n    _onTouchEnd: function _onTouchEnd() {\n      this._onEnd(this._getTouchEventMap());\n    },\n    _onBlur: function _onBlur() {\n      this._onEnd(this._getKeyDownEventMap());\n    },\n    _onEnd: function _onEnd(eventMap) {\n      this._removeHandlers(eventMap);\n\n      this.setState({\n        index: -1\n      }, this._fireChangeEvent.bind(this, 'onAfterChange'));\n    },\n    _onMouseMove: function _onMouseMove(e) {\n      var position = this._getMousePosition(e);\n\n      var diffPosition = this._getDiffPosition(position[0]);\n\n      var newValue = this._getValueFromPosition(diffPosition);\n\n      this._move(newValue);\n    },\n    _onTouchMove: function _onTouchMove(e) {\n      if (e.touches.length > 1) return;\n\n      var position = this._getTouchPosition(e);\n\n      if (typeof this.isScrolling === 'undefined') {\n        var diffMainDir = position[0] - this.startPosition[0];\n        var diffScrollDir = position[1] - this.startPosition[1];\n        this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);\n      }\n\n      if (this.isScrolling) {\n        this.setState({\n          index: -1\n        });\n        return;\n      }\n\n      pauseEvent(e);\n\n      var diffPosition = this._getDiffPosition(position[0]);\n\n      var newValue = this._getValueFromPosition(diffPosition);\n\n      this._move(newValue);\n    },\n    _onKeyDown: function _onKeyDown(e) {\n      if (e.ctrlKey || e.shiftKey || e.altKey) return;\n\n      switch (e.key) {\n        case \"ArrowLeft\":\n        case \"ArrowUp\":\n          return this._moveDownOneStep();\n\n        case \"ArrowRight\":\n        case \"ArrowDown\":\n          return this._moveUpOneStep();\n\n        case \"Home\":\n          return this._move(this.props.min);\n\n        case \"End\":\n          return this._move(this.props.max);\n\n        default:\n          return;\n      }\n    },\n    _moveUpOneStep: function _moveUpOneStep() {\n      var oldValue = this.state.value[this.state.index];\n      var newValue = oldValue + this.props.step;\n\n      this._move(Math.min(newValue, this.props.max));\n    },\n    _moveDownOneStep: function _moveDownOneStep() {\n      var oldValue = this.state.value[this.state.index];\n      var newValue = oldValue - this.props.step;\n\n      this._move(Math.max(newValue, this.props.min));\n    },\n    _getValueFromPosition: function _getValueFromPosition(position) {\n      var diffValue = position / (this.state.sliderLength - this.state.handleSize) * (this.props.max - this.props.min);\n      return this._trimAlignValue(this.state.startValue + diffValue);\n    },\n    _getDiffPosition: function _getDiffPosition(position) {\n      var diffPosition = position - this.state.startPosition;\n      if (this.props.invert) diffPosition *= -1;\n      return diffPosition;\n    },\n    _move: function _move(newValue) {\n      this.hasMoved = true;\n      var props = this.props;\n      var state = this.state;\n      var index = state.index;\n      var value = state.value;\n      var length = value.length;\n      var oldValue = value[index];\n      var minDistance = props.minDistance; // if \"pearling\" (= handles pushing each other) is disabled,\n      // prevent the handle from getting closer than `minDistance` to the previous or next handle.\n\n      if (!props.pearling) {\n        if (index > 0) {\n          var valueBefore = value[index - 1];\n\n          if (newValue < valueBefore + minDistance) {\n            newValue = valueBefore + minDistance;\n          }\n        }\n\n        if (index < length - 1) {\n          var valueAfter = value[index + 1];\n\n          if (newValue > valueAfter - minDistance) {\n            newValue = valueAfter - minDistance;\n          }\n        }\n      }\n\n      value[index] = newValue; // if \"pearling\" is enabled, let the current handle push the pre- and succeeding handles.\n\n      if (props.pearling && length > 1) {\n        if (newValue > oldValue) {\n          this._pushSucceeding(value, minDistance, index);\n\n          this._trimSucceeding(length, value, minDistance, props.max);\n        } else if (newValue < oldValue) {\n          this._pushPreceding(value, minDistance, index);\n\n          this._trimPreceding(length, value, minDistance, props.min);\n        }\n      } // Normally you would use `shouldComponentUpdate`, but since the slider is a low-level component,\n      // the extra complexity might be worth the extra performance.\n\n\n      if (newValue !== oldValue) {\n        this.setState({\n          value: value\n        }, this._fireChangeEvent.bind(this, 'onChange'));\n      }\n    },\n    _pushSucceeding: function _pushSucceeding(value, minDistance, index) {\n      var i, padding;\n\n      for (i = index, padding = value[i] + minDistance; value[i + 1] != null && padding > value[i + 1]; i++, padding = value[i] + minDistance) {\n        value[i + 1] = this._alignValue(padding);\n      }\n    },\n    _trimSucceeding: function _trimSucceeding(length, nextValue, minDistance, max) {\n      for (var i = 0; i < length; i++) {\n        var padding = max - i * minDistance;\n\n        if (nextValue[length - 1 - i] > padding) {\n          nextValue[length - 1 - i] = padding;\n        }\n      }\n    },\n    _pushPreceding: function _pushPreceding(value, minDistance, index) {\n      var i, padding;\n\n      for (i = index, padding = value[i] - minDistance; value[i - 1] != null && padding < value[i - 1]; i--, padding = value[i] - minDistance) {\n        value[i - 1] = this._alignValue(padding);\n      }\n    },\n    _trimPreceding: function _trimPreceding(length, nextValue, minDistance, min) {\n      for (var i = 0; i < length; i++) {\n        var padding = min + i * minDistance;\n\n        if (nextValue[i] < padding) {\n          nextValue[i] = padding;\n        }\n      }\n    },\n    _axisKey: function _axisKey() {\n      var orientation = this.props.orientation;\n      if (orientation === 'horizontal') return 'X';\n      if (orientation === 'vertical') return 'Y';\n    },\n    _orthogonalAxisKey: function _orthogonalAxisKey() {\n      var orientation = this.props.orientation;\n      if (orientation === 'horizontal') return 'Y';\n      if (orientation === 'vertical') return 'X';\n    },\n    _posMinKey: function _posMinKey() {\n      var orientation = this.props.orientation;\n      if (orientation === 'horizontal') return this.props.invert ? 'right' : 'left';\n      if (orientation === 'vertical') return this.props.invert ? 'bottom' : 'top';\n    },\n    _posMaxKey: function _posMaxKey() {\n      var orientation = this.props.orientation;\n      if (orientation === 'horizontal') return this.props.invert ? 'left' : 'right';\n      if (orientation === 'vertical') return this.props.invert ? 'top' : 'bottom';\n    },\n    _sizeKey: function _sizeKey() {\n      var orientation = this.props.orientation;\n      if (orientation === 'horizontal') return 'clientWidth';\n      if (orientation === 'vertical') return 'clientHeight';\n    },\n    _trimAlignValue: function _trimAlignValue(val, props) {\n      return this._alignValue(this._trimValue(val, props), props);\n    },\n    _trimValue: function _trimValue(val, props) {\n      props = props || this.props;\n      if (val <= props.min) val = props.min;\n      if (val >= props.max) val = props.max;\n      return val;\n    },\n    _alignValue: function _alignValue(val, props) {\n      props = props || this.props;\n      var valModStep = (val - props.min) % props.step;\n      var alignValue = val - valModStep;\n\n      if (Math.abs(valModStep) * 2 >= props.step) {\n        alignValue += valModStep > 0 ? props.step : -props.step;\n      }\n\n      return parseFloat(alignValue.toFixed(5));\n    },\n    _renderHandle: function _renderHandle(style, child, i) {\n      var className = this.props.handleClassName + ' ' + (this.props.handleClassName + '-' + i) + ' ' + (this.state.index === i ? this.props.handleActiveClassName : '');\n      return React.createElement('div', {\n        ref: 'handle' + i,\n        key: 'handle' + i,\n        className: className,\n        style: style,\n        onMouseDown: this._createOnMouseDown(i),\n        onTouchStart: this._createOnTouchStart(i),\n        onFocus: this._createOnKeyDown(i),\n        tabIndex: 0,\n        role: \"slider\",\n        \"aria-valuenow\": this.state.value[i],\n        \"aria-valuemin\": this.props.min,\n        \"aria-valuemax\": this.props.max\n      }, child);\n    },\n    _renderHandles: function _renderHandles(offset) {\n      var length = offset.length;\n      var styles = this.tempArray;\n\n      for (var i = 0; i < length; i++) {\n        styles[i] = this._buildHandleStyle(offset[i], i);\n      }\n\n      var res = this.tempArray;\n      var renderHandle = this._renderHandle;\n\n      if (React.Children.count(this.props.children) > 0) {\n        React.Children.forEach(this.props.children, function (child, i) {\n          res[i] = renderHandle(styles[i], child, i);\n        });\n      } else {\n        for (i = 0; i < length; i++) {\n          res[i] = renderHandle(styles[i], null, i);\n        }\n      }\n\n      return res;\n    },\n    _renderBar: function _renderBar(i, offsetFrom, offsetTo) {\n      return React.createElement('div', {\n        key: 'bar' + i,\n        ref: 'bar' + i,\n        className: this.props.barClassName + ' ' + this.props.barClassName + '-' + i,\n        style: this._buildBarStyle(offsetFrom, this.state.upperBound - offsetTo)\n      });\n    },\n    _renderBars: function _renderBars(offset) {\n      var bars = [];\n      var lastIndex = offset.length - 1;\n      bars.push(this._renderBar(0, 0, offset[0]));\n\n      for (var i = 0; i < lastIndex; i++) {\n        bars.push(this._renderBar(i + 1, offset[i], offset[i + 1]));\n      }\n\n      bars.push(this._renderBar(lastIndex + 1, offset[lastIndex], this.state.upperBound));\n      return bars;\n    },\n    _onSliderMouseDown: function _onSliderMouseDown(e) {\n      if (this.props.disabled) return;\n      this.hasMoved = false;\n\n      if (!this.props.snapDragDisabled) {\n        var position = this._getMousePosition(e);\n\n        this._forceValueFromPosition(position[0], function (i) {\n          this._fireChangeEvent('onChange');\n\n          this._start(i, position[0]);\n\n          this._addHandlers(this._getMouseEventMap());\n        }.bind(this));\n      }\n\n      pauseEvent(e);\n    },\n    _onSliderClick: function _onSliderClick(e) {\n      if (this.props.disabled) return;\n\n      if (this.props.onSliderClick && !this.hasMoved) {\n        var position = this._getMousePosition(e);\n\n        var valueAtPos = this._trimAlignValue(this._calcValue(this._calcOffsetFromPosition(position[0])));\n\n        this.props.onSliderClick(valueAtPos);\n      }\n    },\n    _fireChangeEvent: function _fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](undoEnsureArray(this.state.value));\n      }\n    },\n    render: function render() {\n      var state = this.state;\n      var props = this.props;\n      var offset = this.tempArray;\n      var value = state.value;\n      var l = value.length;\n\n      for (var i = 0; i < l; i++) {\n        offset[i] = this._calcOffset(value[i], i);\n      }\n\n      var bars = props.withBars ? this._renderBars(offset) : null;\n\n      var handles = this._renderHandles(offset);\n\n      return React.createElement('div', {\n        ref: 'slider',\n        style: {\n          position: 'relative'\n        },\n        className: props.className + (props.disabled ? ' disabled' : ''),\n        onMouseDown: this._onSliderMouseDown,\n        onClick: this._onSliderClick\n      }, bars, handles);\n    }\n  });\n  return ReactSlider;\n});","map":null,"metadata":{},"sourceType":"script"}