{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar useMonitorOutput_1 = require(\"./internal/useMonitorOutput\");\n\nvar drag_1 = require(\"./internal/drag\");\n\nvar react_1 = require(\"react\");\n\nvar invariant = require('invariant');\n/**\n * useDragSource hook (This API is experimental and subject to breaking changes in non-major versions)\n * @param sourceSpec The drag source specification *\n */\n\n\nfunction useDrag(spec) {\n  var specRef = react_1.useRef(spec); // TODO: wire options into createSourceConnector\n\n  invariant(spec.item != null, 'item must be defined');\n  invariant(spec.item.type != null, 'item type must be defined');\n\n  var _a = drag_1.useDragSourceMonitor(),\n      monitor = _a[0],\n      connector = _a[1];\n\n  drag_1.useDragHandler(specRef, monitor, connector);\n  var result = useMonitorOutput_1.useMonitorOutput(monitor, specRef.current.collect || function () {\n    return {};\n  }, function () {\n    return connector.reconnect();\n  });\n  var connectDragSource = react_1.useMemo(function () {\n    return connector.hooks.dragSource();\n  }, [connector]);\n  var connectDragPreview = react_1.useMemo(function () {\n    return connector.hooks.dragPreview();\n  }, [connector]);\n  react_1.useEffect(function () {\n    connector.dragSourceOptions = specRef.current.options || null;\n    connector.reconnect();\n  }, [connector]);\n  react_1.useEffect(function () {\n    connector.dragPreviewOptions = specRef.current.previewOptions || null;\n    connector.reconnect();\n  }, [connector]);\n  return [result, connectDragSource, connectDragPreview];\n}\n\nexports.useDrag = useDrag;","map":null,"metadata":{},"sourceType":"script"}