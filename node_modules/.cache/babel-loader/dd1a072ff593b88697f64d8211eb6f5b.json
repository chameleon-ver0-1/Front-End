{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'mini-store';\nimport { polyfill } from 'react-lifecycles-compat';\nimport shallowEqual from 'shallowequal';\nimport TableRow from './TableRow';\nimport { remove } from './utils';\n\nvar ExpandableTable = function (_React$Component) {\n  _inherits(ExpandableTable, _React$Component);\n\n  function ExpandableTable(props) {\n    _classCallCheck(this, ExpandableTable);\n\n    var _this = _possibleConstructorReturn(this, (ExpandableTable.__proto__ || Object.getPrototypeOf(ExpandableTable)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var data = props.data,\n        childrenColumnName = props.childrenColumnName,\n        defaultExpandAllRows = props.defaultExpandAllRows,\n        expandedRowKeys = props.expandedRowKeys,\n        defaultExpandedRowKeys = props.defaultExpandedRowKeys,\n        getRowKey = props.getRowKey;\n    var finalExpandedRowKeys = [];\n    var rows = [].concat(_toConsumableArray(data));\n\n    if (defaultExpandAllRows) {\n      for (var i = 0; i < rows.length; i++) {\n        var row = rows[i];\n        finalExpandedRowKeys.push(getRowKey(row, i));\n        rows = rows.concat(row[childrenColumnName] || []);\n      }\n    } else {\n      finalExpandedRowKeys = expandedRowKeys || defaultExpandedRowKeys;\n    }\n\n    _this.columnManager = props.columnManager;\n    _this.store = props.store;\n\n    _this.store.setState({\n      expandedRowsHeight: {},\n      expandedRowKeys: finalExpandedRowKeys\n    });\n\n    return _this;\n  }\n\n  _createClass(ExpandableTable, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.handleUpdated();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if ('expandedRowKeys' in this.props) {\n        this.store.setState({\n          expandedRowKeys: this.props.expandedRowKeys\n        });\n      }\n\n      this.handleUpdated();\n    }\n  }, {\n    key: 'handleUpdated',\n    value: function handleUpdated() {\n      // We should record latest expanded rows to avoid multiple rows remove cause `onExpandedRowsChange` trigger many times\n      this.latestExpandedRows = null;\n    }\n  }, {\n    key: 'renderExpandedRow',\n    value: function renderExpandedRow(record, index, _render, className, ancestorKeys, indent, fixed) {\n      var _this2 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          expandIconAsCell = _props.expandIconAsCell,\n          indentSize = _props.indentSize;\n      var parentKey = ancestorKeys[ancestorKeys.length - 1];\n      var rowKey = parentKey + '-extra-row';\n      var components = {\n        body: {\n          row: 'tr',\n          cell: 'td'\n        }\n      };\n      var colCount = void 0;\n\n      if (fixed === 'left') {\n        colCount = this.columnManager.leftLeafColumns().length;\n      } else if (fixed === 'right') {\n        colCount = this.columnManager.rightLeafColumns().length;\n      } else {\n        colCount = this.columnManager.leafColumns().length;\n      }\n\n      var columns = [{\n        key: 'extra-row',\n        render: function render() {\n          var _store$getState = _this2.store.getState(),\n              expandedRowKeys = _store$getState.expandedRowKeys;\n\n          var expanded = !!~expandedRowKeys.indexOf(parentKey);\n          return {\n            props: {\n              colSpan: colCount\n            },\n            children: fixed !== 'right' ? _render(record, index, indent, expanded) : '&nbsp;'\n          };\n        }\n      }];\n\n      if (expandIconAsCell && fixed !== 'right') {\n        columns.unshift({\n          key: 'expand-icon-placeholder',\n          render: function render() {\n            return null;\n          }\n        });\n      }\n\n      return React.createElement(TableRow, {\n        key: rowKey,\n        columns: columns,\n        className: className,\n        rowKey: rowKey,\n        ancestorKeys: ancestorKeys,\n        prefixCls: prefixCls + '-expanded-row',\n        indentSize: indentSize,\n        indent: indent,\n        fixed: fixed,\n        components: components,\n        expandedRow: true\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          data = _props2.data,\n          childrenColumnName = _props2.childrenColumnName,\n          children = _props2.children;\n      var needIndentSpaced = data.some(function (record) {\n        return record[childrenColumnName];\n      });\n      return children({\n        props: this.props,\n        needIndentSpaced: needIndentSpaced,\n        renderRows: this.renderRows,\n        handleExpandChange: this.handleExpandChange,\n        renderExpandIndentCell: this.renderExpandIndentCell\n      });\n    }\n  }]);\n\n  return ExpandableTable;\n}(React.Component);\n\nExpandableTable.propTypes = {\n  expandIconAsCell: PropTypes.bool,\n  expandedRowKeys: PropTypes.array,\n  expandedRowClassName: PropTypes.func,\n  defaultExpandAllRows: PropTypes.bool,\n  defaultExpandedRowKeys: PropTypes.array,\n  expandIconColumnIndex: PropTypes.number,\n  expandedRowRender: PropTypes.func,\n  expandIcon: PropTypes.func,\n  childrenColumnName: PropTypes.string,\n  indentSize: PropTypes.number,\n  onExpand: PropTypes.func,\n  onExpandedRowsChange: PropTypes.func,\n  columnManager: PropTypes.object.isRequired,\n  store: PropTypes.object.isRequired,\n  prefixCls: PropTypes.string.isRequired,\n  data: PropTypes.array,\n  children: PropTypes.func.isRequired,\n  getRowKey: PropTypes.func.isRequired\n};\nExpandableTable.defaultProps = {\n  expandIconAsCell: false,\n  expandedRowClassName: function expandedRowClassName() {\n    return '';\n  },\n  expandIconColumnIndex: 0,\n  defaultExpandAllRows: false,\n  defaultExpandedRowKeys: [],\n  childrenColumnName: 'children',\n  indentSize: 15,\n  onExpand: function onExpand() {},\n  onExpandedRowsChange: function onExpandedRowsChange() {}\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.handleExpandChange = function (expanded, record, event, rowKey) {\n    var destroy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    if (event) {\n      event.stopPropagation();\n    }\n\n    var _props3 = _this3.props,\n        onExpandedRowsChange = _props3.onExpandedRowsChange,\n        onExpand = _props3.onExpand;\n\n    var _store$getState2 = _this3.store.getState(),\n        expandedRowKeys = _store$getState2.expandedRowKeys;\n\n    if (expanded) {\n      // row was expanded\n      expandedRowKeys = [].concat(_toConsumableArray(expandedRowKeys), [rowKey]);\n    } else {\n      // row was collapse\n      var expandedRowIndex = expandedRowKeys.indexOf(rowKey);\n\n      if (expandedRowIndex !== -1) {\n        expandedRowKeys = remove(expandedRowKeys, rowKey);\n      }\n    }\n\n    if (!_this3.props.expandedRowKeys) {\n      _this3.store.setState({\n        expandedRowKeys: expandedRowKeys\n      });\n    } // De-dup of repeat call\n\n\n    if (!_this3.latestExpandedRows || !shallowEqual(_this3.latestExpandedRows, expandedRowKeys)) {\n      _this3.latestExpandedRows = expandedRowKeys;\n      onExpandedRowsChange(expandedRowKeys);\n    }\n\n    if (!destroy) {\n      onExpand(expanded, record);\n    }\n  };\n\n  this.renderExpandIndentCell = function (rows, fixed) {\n    var _props4 = _this3.props,\n        prefixCls = _props4.prefixCls,\n        expandIconAsCell = _props4.expandIconAsCell;\n\n    if (!expandIconAsCell || fixed === 'right' || !rows.length) {\n      return;\n    }\n\n    var iconColumn = {\n      key: 'rc-table-expand-icon-cell',\n      className: prefixCls + '-expand-icon-th',\n      title: '',\n      rowSpan: rows.length\n    };\n    rows[0].unshift(_extends({}, iconColumn, {\n      column: iconColumn\n    }));\n  };\n\n  this.renderRows = function (renderRows, rows, record, index, indent, fixed, parentKey, ancestorKeys) {\n    var _props5 = _this3.props,\n        expandedRowClassName = _props5.expandedRowClassName,\n        expandedRowRender = _props5.expandedRowRender,\n        childrenColumnName = _props5.childrenColumnName;\n    var childrenData = record[childrenColumnName];\n    var nextAncestorKeys = [].concat(_toConsumableArray(ancestorKeys), [parentKey]);\n    var nextIndent = indent + 1;\n\n    if (expandedRowRender) {\n      rows.push(_this3.renderExpandedRow(record, index, expandedRowRender, expandedRowClassName(record, index, indent), nextAncestorKeys, nextIndent, fixed));\n    }\n\n    if (childrenData) {\n      rows.push.apply(rows, _toConsumableArray(renderRows(childrenData, nextIndent, nextAncestorKeys)));\n    }\n  };\n};\n\npolyfill(ExpandableTable);\nexport default connect()(ExpandableTable);","map":null,"metadata":{},"sourceType":"module"}