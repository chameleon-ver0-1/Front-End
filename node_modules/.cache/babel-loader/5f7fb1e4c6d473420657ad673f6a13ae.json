{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport createChainedFunction from 'rc-util/es/createChainedFunction';\nimport KeyCode from 'rc-util/es/KeyCode';\nimport placements from './picker/placements';\nimport Trigger from 'rc-trigger';\n\nfunction noop() {}\n\nfunction refFn(field, component) {\n  this[field] = component;\n}\n\nvar Picker = function (_React$Component) {\n  _inherits(Picker, _React$Component);\n\n  function Picker(props) {\n    _classCallCheck(this, Picker);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var open = void 0;\n\n    if ('open' in props) {\n      open = props.open;\n    } else {\n      open = props.defaultOpen;\n    }\n\n    var value = props.value || props.defaultValue;\n    _this.saveCalendarRef = refFn.bind(_this, 'calendarInstance');\n    _this.state = {\n      open: open,\n      value: value\n    };\n    return _this;\n  }\n\n  Picker.prototype.componentDidUpdate = function componentDidUpdate(_, prevState) {\n    if (!prevState.open && this.state.open) {\n      // setTimeout is for making sure saveCalendarRef happen before focusCalendar\n      this.focusTimeout = setTimeout(this.focusCalendar, 0, this);\n    }\n  };\n\n  Picker.prototype.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.focusTimeout);\n  };\n\n  Picker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    var newState = {};\n    var value = nextProps.value,\n        open = nextProps.open;\n\n    if ('value' in nextProps) {\n      newState.value = value;\n    }\n\n    if (open !== undefined) {\n      newState.open = open;\n    }\n\n    return newState;\n  };\n\n  Picker.prototype.render = function render() {\n    var props = this.props;\n    var prefixCls = props.prefixCls,\n        placement = props.placement,\n        style = props.style,\n        getCalendarContainer = props.getCalendarContainer,\n        align = props.align,\n        animation = props.animation,\n        disabled = props.disabled,\n        dropdownClassName = props.dropdownClassName,\n        transitionName = props.transitionName,\n        children = props.children;\n    var state = this.state;\n    return React.createElement(Trigger, {\n      popup: this.getCalendarElement(),\n      popupAlign: align,\n      builtinPlacements: placements,\n      popupPlacement: placement,\n      action: disabled && !state.open ? [] : ['click'],\n      destroyPopupOnHide: true,\n      getPopupContainer: getCalendarContainer,\n      popupStyle: style,\n      popupAnimation: animation,\n      popupTransitionName: transitionName,\n      popupVisible: state.open,\n      onPopupVisibleChange: this.onVisibleChange,\n      prefixCls: prefixCls,\n      popupClassName: dropdownClassName\n    }, React.cloneElement(children(state, props), {\n      onKeyDown: this.onKeyDown\n    }));\n  };\n\n  return Picker;\n}(React.Component);\n\nPicker.propTypes = {\n  animation: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  disabled: PropTypes.bool,\n  transitionName: PropTypes.string,\n  onChange: PropTypes.func,\n  onOpenChange: PropTypes.func,\n  children: PropTypes.func,\n  getCalendarContainer: PropTypes.func,\n  calendar: PropTypes.element,\n  style: PropTypes.object,\n  open: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  prefixCls: PropTypes.string,\n  placement: PropTypes.any,\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  align: PropTypes.object,\n  onBlur: PropTypes.func\n};\nPicker.defaultProps = {\n  prefixCls: 'rc-calendar-picker',\n  style: {},\n  align: {},\n  placement: 'bottomLeft',\n  defaultOpen: false,\n  onChange: noop,\n  onOpenChange: noop,\n  onBlur: noop\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onCalendarKeyDown = function (event) {\n    if (event.keyCode === KeyCode.ESC) {\n      event.stopPropagation();\n\n      _this2.close(_this2.focus);\n    }\n  };\n\n  this.onCalendarSelect = function (value) {\n    var cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var props = _this2.props;\n\n    if (!('value' in props)) {\n      _this2.setState({\n        value: value\n      });\n    }\n\n    if (cause.source === 'keyboard' || cause.source === 'dateInputSelect' || !props.calendar.props.timePicker && cause.source !== 'dateInput' || cause.source === 'todayButton') {\n      _this2.close(_this2.focus);\n    }\n\n    props.onChange(value);\n  };\n\n  this.onKeyDown = function (event) {\n    if (!_this2.state.open && (event.keyCode === KeyCode.DOWN || event.keyCode === KeyCode.ENTER)) {\n      _this2.open();\n\n      event.preventDefault();\n    }\n  };\n\n  this.onCalendarOk = function () {\n    _this2.close(_this2.focus);\n  };\n\n  this.onCalendarClear = function () {\n    _this2.close(_this2.focus);\n  };\n\n  this.onCalendarBlur = function () {\n    _this2.setOpen(false);\n  };\n\n  this.onVisibleChange = function (open) {\n    _this2.setOpen(open);\n  };\n\n  this.getCalendarElement = function () {\n    var props = _this2.props;\n    var state = _this2.state;\n    var calendarProps = props.calendar.props;\n    var value = state.value;\n    var defaultValue = value;\n    var extraProps = {\n      ref: _this2.saveCalendarRef,\n      defaultValue: defaultValue || calendarProps.defaultValue,\n      selectedValue: value,\n      onKeyDown: _this2.onCalendarKeyDown,\n      onOk: createChainedFunction(calendarProps.onOk, _this2.onCalendarOk),\n      onSelect: createChainedFunction(calendarProps.onSelect, _this2.onCalendarSelect),\n      onClear: createChainedFunction(calendarProps.onClear, _this2.onCalendarClear),\n      onBlur: createChainedFunction(calendarProps.onBlur, _this2.onCalendarBlur)\n    };\n    return React.cloneElement(props.calendar, extraProps);\n  };\n\n  this.setOpen = function (open, callback) {\n    var onOpenChange = _this2.props.onOpenChange;\n\n    if (_this2.state.open !== open) {\n      if (!('open' in _this2.props)) {\n        _this2.setState({\n          open: open\n        }, callback);\n      }\n\n      onOpenChange(open);\n    }\n  };\n\n  this.open = function (callback) {\n    _this2.setOpen(true, callback);\n  };\n\n  this.close = function (callback) {\n    _this2.setOpen(false, callback);\n  };\n\n  this.focus = function () {\n    if (!_this2.state.open) {\n      ReactDOM.findDOMNode(_this2).focus();\n    }\n  };\n\n  this.focusCalendar = function () {\n    if (_this2.state.open && !!_this2.calendarInstance) {\n      _this2.calendarInstance.focus();\n    }\n  };\n};\n\npolyfill(Picker);\nexport default Picker;","map":null,"metadata":{},"sourceType":"module"}