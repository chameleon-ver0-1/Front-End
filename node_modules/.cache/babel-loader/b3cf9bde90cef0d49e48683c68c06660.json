{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Trigger from 'rc-trigger';\nimport warning from 'warning';\nimport KeyCode from 'rc-util/es/KeyCode';\nimport arrayTreeFilter from 'array-tree-filter';\nimport shallowEqualArrays from 'shallow-equal/arrays';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Menus from './Menus';\nvar BUILT_IN_PLACEMENTS = {\n  bottomLeft: {\n    points: ['tl', 'bl'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  },\n  topLeft: {\n    points: ['bl', 'tl'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  },\n  bottomRight: {\n    points: ['tr', 'br'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  },\n  topRight: {\n    points: ['br', 'tr'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  }\n};\n\nvar Cascader = function (_Component) {\n  _inherits(Cascader, _Component);\n\n  function Cascader(props) {\n    _classCallCheck(this, Cascader);\n\n    var _this = _possibleConstructorReturn(this, (Cascader.__proto__ || Object.getPrototypeOf(Cascader)).call(this, props));\n\n    _this.setPopupVisible = function (popupVisible) {\n      if (!('popupVisible' in _this.props)) {\n        _this.setState({\n          popupVisible: popupVisible\n        });\n      } // sync activeValue with value when panel open\n\n\n      if (popupVisible && !_this.state.popupVisible) {\n        _this.setState({\n          activeValue: _this.state.value\n        });\n      }\n\n      _this.props.onPopupVisibleChange(popupVisible);\n    };\n\n    _this.handleChange = function (options, setProps, e) {\n      if (e.type !== 'keydown' || e.keyCode === KeyCode.ENTER) {\n        _this.props.onChange(options.map(function (o) {\n          return o[_this.getFieldName('value')];\n        }), options);\n\n        _this.setPopupVisible(setProps.visible);\n      }\n    };\n\n    _this.handlePopupVisibleChange = function (popupVisible) {\n      _this.setPopupVisible(popupVisible);\n    };\n\n    _this.handleMenuSelect = function (targetOption, menuIndex, e) {\n      // Keep focused state for keyboard support\n      var triggerNode = _this.trigger.getRootDomNode();\n\n      if (triggerNode && triggerNode.focus) {\n        triggerNode.focus();\n      }\n\n      var _this$props = _this.props,\n          changeOnSelect = _this$props.changeOnSelect,\n          loadData = _this$props.loadData,\n          expandTrigger = _this$props.expandTrigger;\n\n      if (!targetOption || targetOption.disabled) {\n        return;\n      }\n\n      var activeValue = _this.state.activeValue;\n      activeValue = activeValue.slice(0, menuIndex + 1);\n      activeValue[menuIndex] = targetOption[_this.getFieldName('value')];\n\n      var activeOptions = _this.getActiveOptions(activeValue);\n\n      if (targetOption.isLeaf === false && !targetOption[_this.getFieldName('children')] && loadData) {\n        if (changeOnSelect) {\n          _this.handleChange(activeOptions, {\n            visible: true\n          }, e);\n        }\n\n        _this.setState({\n          activeValue: activeValue\n        });\n\n        loadData(activeOptions);\n        return;\n      }\n\n      var newState = {};\n\n      if (!targetOption[_this.getFieldName('children')] || !targetOption[_this.getFieldName('children')].length) {\n        _this.handleChange(activeOptions, {\n          visible: false\n        }, e); // set value to activeValue when select leaf option\n\n\n        newState.value = activeValue; // add e.type judgement to prevent `onChange` being triggered by mouseEnter\n      } else if (changeOnSelect && (e.type === 'click' || e.type === 'keydown')) {\n        if (expandTrigger === 'hover') {\n          _this.handleChange(activeOptions, {\n            visible: false\n          }, e);\n        } else {\n          _this.handleChange(activeOptions, {\n            visible: true\n          }, e);\n        } // set value to activeValue on every select\n\n\n        newState.value = activeValue;\n      }\n\n      newState.activeValue = activeValue; //  not change the value by keyboard\n\n      if ('value' in _this.props || e.type === 'keydown' && e.keyCode !== KeyCode.ENTER) {\n        delete newState.value;\n      }\n\n      _this.setState(newState);\n    };\n\n    _this.handleItemDoubleClick = function () {\n      var changeOnSelect = _this.props.changeOnSelect;\n\n      if (changeOnSelect) {\n        _this.setPopupVisible(false);\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      var children = _this.props.children; // https://github.com/ant-design/ant-design/issues/6717\n      // Don't bind keyboard support when children specify the onKeyDown\n\n      if (children && children.props.onKeyDown) {\n        children.props.onKeyDown(e);\n        return;\n      }\n\n      var activeValue = [].concat(_toConsumableArray(_this.state.activeValue));\n      var currentLevel = activeValue.length - 1 < 0 ? 0 : activeValue.length - 1;\n\n      var currentOptions = _this.getCurrentLevelOptions();\n\n      var currentIndex = currentOptions.map(function (o) {\n        return o[_this.getFieldName('value')];\n      }).indexOf(activeValue[currentLevel]);\n\n      if (e.keyCode !== KeyCode.DOWN && e.keyCode !== KeyCode.UP && e.keyCode !== KeyCode.LEFT && e.keyCode !== KeyCode.RIGHT && e.keyCode !== KeyCode.ENTER && e.keyCode !== KeyCode.SPACE && e.keyCode !== KeyCode.BACKSPACE && e.keyCode !== KeyCode.ESC && e.keyCode !== KeyCode.TAB) {\n        return;\n      } // Press any keys above to reopen menu\n\n\n      if (!_this.state.popupVisible && e.keyCode !== KeyCode.BACKSPACE && e.keyCode !== KeyCode.LEFT && e.keyCode !== KeyCode.RIGHT && e.keyCode !== KeyCode.ESC && e.keyCode !== KeyCode.TAB) {\n        _this.setPopupVisible(true);\n\n        return;\n      }\n\n      if (e.keyCode === KeyCode.DOWN || e.keyCode === KeyCode.UP) {\n        e.preventDefault();\n        var nextIndex = currentIndex;\n\n        if (nextIndex !== -1) {\n          if (e.keyCode === KeyCode.DOWN) {\n            nextIndex += 1;\n            nextIndex = nextIndex >= currentOptions.length ? 0 : nextIndex;\n          } else {\n            nextIndex -= 1;\n            nextIndex = nextIndex < 0 ? currentOptions.length - 1 : nextIndex;\n          }\n        } else {\n          nextIndex = 0;\n        }\n\n        activeValue[currentLevel] = currentOptions[nextIndex][_this.getFieldName('value')];\n      } else if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.BACKSPACE) {\n        e.preventDefault();\n        activeValue.splice(activeValue.length - 1, 1);\n      } else if (e.keyCode === KeyCode.RIGHT) {\n        e.preventDefault();\n\n        if (currentOptions[currentIndex] && currentOptions[currentIndex][_this.getFieldName('children')]) {\n          activeValue.push(currentOptions[currentIndex][_this.getFieldName('children')][0][_this.getFieldName('value')]);\n        }\n      } else if (e.keyCode === KeyCode.ESC || e.keyCode === KeyCode.TAB) {\n        _this.setPopupVisible(false);\n\n        return;\n      }\n\n      if (!activeValue || activeValue.length === 0) {\n        _this.setPopupVisible(false);\n      }\n\n      var activeOptions = _this.getActiveOptions(activeValue);\n\n      var targetOption = activeOptions[activeOptions.length - 1];\n\n      _this.handleMenuSelect(targetOption, activeOptions.length - 1, e);\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(e);\n      }\n    };\n\n    _this.saveTrigger = function (node) {\n      _this.trigger = node;\n    };\n\n    var initialValue = [];\n\n    if ('value' in props) {\n      initialValue = props.value || [];\n    } else if ('defaultValue' in props) {\n      initialValue = props.defaultValue || [];\n    }\n\n    warning(!('filedNames' in props), '`filedNames` of Cascader is a typo usage and deprecated, please use `fieldNames` instead.');\n    _this.state = {\n      popupVisible: props.popupVisible,\n      activeValue: initialValue,\n      value: initialValue,\n      prevProps: props\n    };\n    _this.defaultFieldNames = {\n      label: 'label',\n      value: 'value',\n      children: 'children'\n    };\n    return _this;\n  }\n\n  _createClass(Cascader, [{\n    key: 'getPopupDOMNode',\n    value: function getPopupDOMNode() {\n      return this.trigger.getPopupDomNode();\n    }\n  }, {\n    key: 'getFieldName',\n    value: function getFieldName(name) {\n      var defaultFieldNames = this.defaultFieldNames;\n      var _props = this.props,\n          fieldNames = _props.fieldNames,\n          filedNames = _props.filedNames;\n\n      if ('filedNames' in this.props) {\n        return filedNames[name] || defaultFieldNames[name]; // For old compatibility\n      }\n\n      return fieldNames[name] || defaultFieldNames[name];\n    }\n  }, {\n    key: 'getFieldNames',\n    value: function getFieldNames() {\n      var _props2 = this.props,\n          fieldNames = _props2.fieldNames,\n          filedNames = _props2.filedNames;\n\n      if ('filedNames' in this.props) {\n        return filedNames; // For old compatibility\n      }\n\n      return fieldNames;\n    }\n  }, {\n    key: 'getCurrentLevelOptions',\n    value: function getCurrentLevelOptions() {\n      var _this2 = this;\n\n      var _props$options = this.props.options,\n          options = _props$options === undefined ? [] : _props$options;\n      var _state$activeValue = this.state.activeValue,\n          activeValue = _state$activeValue === undefined ? [] : _state$activeValue;\n      var result = arrayTreeFilter(options, function (o, level) {\n        return o[_this2.getFieldName('value')] === activeValue[level];\n      }, {\n        childrenKeyName: this.getFieldName('children')\n      });\n\n      if (result[result.length - 2]) {\n        return result[result.length - 2][this.getFieldName('children')];\n      }\n\n      return [].concat(_toConsumableArray(options)).filter(function (o) {\n        return !o.disabled;\n      });\n    }\n  }, {\n    key: 'getActiveOptions',\n    value: function getActiveOptions(activeValue) {\n      var _this3 = this;\n\n      return arrayTreeFilter(this.props.options || [], function (o, level) {\n        return o[_this3.getFieldName('value')] === activeValue[level];\n      }, {\n        childrenKeyName: this.getFieldName('children')\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          prefixCls = _props3.prefixCls,\n          transitionName = _props3.transitionName,\n          popupClassName = _props3.popupClassName,\n          _props3$options = _props3.options,\n          options = _props3$options === undefined ? [] : _props3$options,\n          disabled = _props3.disabled,\n          builtinPlacements = _props3.builtinPlacements,\n          popupPlacement = _props3.popupPlacement,\n          children = _props3.children,\n          restProps = _objectWithoutProperties(_props3, ['prefixCls', 'transitionName', 'popupClassName', 'options', 'disabled', 'builtinPlacements', 'popupPlacement', 'children']); // Did not show popup when there is no options\n\n\n      var menus = React.createElement('div', null);\n      var emptyMenuClassName = '';\n\n      if (options && options.length > 0) {\n        menus = React.createElement(Menus, _extends({}, this.props, {\n          fieldNames: this.getFieldNames(),\n          defaultFieldNames: this.defaultFieldNames,\n          activeValue: this.state.activeValue,\n          onSelect: this.handleMenuSelect,\n          onItemDoubleClick: this.handleItemDoubleClick,\n          visible: this.state.popupVisible\n        }));\n      } else {\n        emptyMenuClassName = ' ' + prefixCls + '-menus-empty';\n      }\n\n      return React.createElement(Trigger, _extends({\n        ref: this.saveTrigger\n      }, restProps, {\n        options: options,\n        disabled: disabled,\n        popupPlacement: popupPlacement,\n        builtinPlacements: builtinPlacements,\n        popupTransitionName: transitionName,\n        action: disabled ? [] : ['click'],\n        popupVisible: disabled ? false : this.state.popupVisible,\n        onPopupVisibleChange: this.handlePopupVisibleChange,\n        prefixCls: prefixCls + '-menus',\n        popupClassName: popupClassName + emptyMenuClassName,\n        popup: menus\n      }), cloneElement(children, {\n        onKeyDown: this.handleKeyDown,\n        tabIndex: disabled ? undefined : 0\n      }));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n          prevProps = _prevState$prevProps === undefined ? {} : _prevState$prevProps;\n      var newState = {\n        prevProps: nextProps\n      };\n\n      if ('value' in nextProps && !shallowEqualArrays(prevProps.value, nextProps.value)) {\n        newState.value = nextProps.value || []; // allow activeValue diff from value\n        // https://github.com/ant-design/ant-design/issues/2767\n\n        if (!('loadData' in nextProps)) {\n          newState.activeValue = nextProps.value || [];\n        }\n      }\n\n      if ('popupVisible' in nextProps) {\n        newState.popupVisible = nextProps.popupVisible;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Cascader;\n}(Component);\n\nCascader.defaultProps = {\n  onChange: function onChange() {},\n  onPopupVisibleChange: function onPopupVisibleChange() {},\n  disabled: false,\n  transitionName: '',\n  prefixCls: 'rc-cascader',\n  popupClassName: '',\n  popupPlacement: 'bottomLeft',\n  builtinPlacements: BUILT_IN_PLACEMENTS,\n  expandTrigger: 'click',\n  fieldNames: {\n    label: 'label',\n    value: 'value',\n    children: 'children'\n  },\n  expandIcon: '>'\n};\nCascader.propTypes = {\n  value: PropTypes.array,\n  defaultValue: PropTypes.array,\n  options: PropTypes.array.isRequired,\n  onChange: PropTypes.func,\n  onPopupVisibleChange: PropTypes.func,\n  popupVisible: PropTypes.bool,\n  disabled: PropTypes.bool,\n  transitionName: PropTypes.string,\n  popupClassName: PropTypes.string,\n  popupPlacement: PropTypes.string,\n  prefixCls: PropTypes.string,\n  dropdownMenuColumnStyle: PropTypes.object,\n  builtinPlacements: PropTypes.object,\n  loadData: PropTypes.func,\n  changeOnSelect: PropTypes.bool,\n  children: PropTypes.node,\n  onKeyDown: PropTypes.func,\n  expandTrigger: PropTypes.string,\n  fieldNames: PropTypes.object,\n  filedNames: PropTypes.object,\n  // typo but for compatibility\n  expandIcon: PropTypes.node,\n  loadingIcon: PropTypes.node\n};\npolyfill(Cascader);\nexport default Cascader;","map":null,"metadata":{},"sourceType":"module"}