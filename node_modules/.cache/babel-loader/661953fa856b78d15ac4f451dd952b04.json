{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport Select from '../select';\nimport { Group, Button } from '../radio';\nimport { ConfigConsumer } from '../config-provider';\nvar Option = Select.Option;\n\nvar Header =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Header, _React$Component);\n\n  function Header() {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).apply(this, arguments));\n\n    _this.onYearChange = function (year) {\n      var _this$props = _this.props,\n          value = _this$props.value,\n          validRange = _this$props.validRange;\n      var newValue = value.clone();\n      newValue.year(parseInt(year, 10)); // switch the month so that it remains within range when year changes\n\n      if (validRange) {\n        var _validRange = _slicedToArray(validRange, 2),\n            start = _validRange[0],\n            end = _validRange[1];\n\n        var newYear = newValue.get('year');\n        var newMonth = newValue.get('month');\n\n        if (newYear === end.get('year') && newMonth > end.get('month')) {\n          newValue.month(end.get('month'));\n        }\n\n        if (newYear === start.get('year') && newMonth < start.get('month')) {\n          newValue.month(start.get('month'));\n        }\n      }\n\n      var onValueChange = _this.props.onValueChange;\n\n      if (onValueChange) {\n        onValueChange(newValue);\n      }\n    };\n\n    _this.onMonthChange = function (month) {\n      var newValue = _this.props.value.clone();\n\n      newValue.month(parseInt(month, 10));\n      var onValueChange = _this.props.onValueChange;\n\n      if (onValueChange) {\n        onValueChange(newValue);\n      }\n    };\n\n    _this.onInternalTypeChange = function (e) {\n      _this.onTypeChange(e.target.value);\n    };\n\n    _this.onTypeChange = function (type) {\n      var onTypeChange = _this.props.onTypeChange;\n\n      if (onTypeChange) {\n        onTypeChange(type);\n      }\n    };\n\n    _this.getCalenderHeaderNode = function (node) {\n      _this.calenderHeaderNode = node;\n    };\n\n    _this.getMonthYearSelections = function (getPrefixCls) {\n      var _this$props2 = _this.props,\n          customizePrefixCls = _this$props2.prefixCls,\n          type = _this$props2.type,\n          value = _this$props2.value;\n      var prefixCls = getPrefixCls('fullcalendar', customizePrefixCls);\n\n      var yearReactNode = _this.getYearSelectElement(prefixCls, value.year());\n\n      var monthReactNode = type === 'month' ? _this.getMonthSelectElement(prefixCls, value.month(), _this.getMonthsLocale(value)) : null;\n      return {\n        yearReactNode: yearReactNode,\n        monthReactNode: monthReactNode\n      };\n    };\n\n    _this.getTypeSwitch = function () {\n      var _this$props3 = _this.props,\n          locale = _this$props3.locale,\n          type = _this$props3.type,\n          fullscreen = _this$props3.fullscreen;\n      var size = fullscreen ? 'default' : 'small';\n      return React.createElement(Group, {\n        onChange: _this.onInternalTypeChange,\n        value: type,\n        size: size\n      }, React.createElement(Button, {\n        value: \"month\"\n      }, locale.month), React.createElement(Button, {\n        value: \"year\"\n      }, locale.year));\n    };\n\n    _this.headerRenderCustom = function () {\n      var _this$props4 = _this.props,\n          headerRender = _this$props4.headerRender,\n          type = _this$props4.type,\n          onValueChange = _this$props4.onValueChange,\n          value = _this$props4.value;\n      return headerRender({\n        value: value,\n        type: type || 'month',\n        onChange: onValueChange,\n        onTypeChange: _this.onTypeChange\n      });\n    };\n\n    _this.renderHeader = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props5 = _this.props,\n          prefixCls = _this$props5.prefixCls,\n          headerRender = _this$props5.headerRender;\n\n      var typeSwitch = _this.getTypeSwitch();\n\n      var _this$getMonthYearSel = _this.getMonthYearSelections(getPrefixCls),\n          yearReactNode = _this$getMonthYearSel.yearReactNode,\n          monthReactNode = _this$getMonthYearSel.monthReactNode;\n\n      return headerRender ? _this.headerRenderCustom() : React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-header\"),\n        ref: _this.getCalenderHeaderNode\n      }, yearReactNode, monthReactNode, typeSwitch);\n    };\n\n    return _this;\n  }\n\n  _createClass(Header, [{\n    key: \"getYearSelectElement\",\n    value: function getYearSelectElement(prefixCls, year) {\n      var _this2 = this;\n\n      var _this$props6 = this.props,\n          yearSelectOffset = _this$props6.yearSelectOffset,\n          yearSelectTotal = _this$props6.yearSelectTotal,\n          locale = _this$props6.locale,\n          fullscreen = _this$props6.fullscreen,\n          validRange = _this$props6.validRange;\n      var start = year - yearSelectOffset;\n      var end = start + yearSelectTotal;\n\n      if (validRange) {\n        start = validRange[0].get('year');\n        end = validRange[1].get('year') + 1;\n      }\n\n      var suffix = locale.year === '年' ? '年' : '';\n      var options = [];\n\n      for (var index = start; index < end; index++) {\n        options.push(React.createElement(Option, {\n          key: \"\".concat(index)\n        }, index + suffix));\n      }\n\n      return React.createElement(Select, {\n        size: fullscreen ? 'default' : 'small',\n        dropdownMatchSelectWidth: false,\n        className: \"\".concat(prefixCls, \"-year-select\"),\n        onChange: this.onYearChange,\n        value: String(year),\n        getPopupContainer: function getPopupContainer() {\n          return _this2.calenderHeaderNode;\n        }\n      }, options);\n    }\n  }, {\n    key: \"getMonthsLocale\",\n    value: function getMonthsLocale(value) {\n      var current = value.clone();\n      var localeData = value.localeData();\n      var months = [];\n\n      for (var i = 0; i < 12; i++) {\n        current.month(i);\n        months.push(localeData.monthsShort(current));\n      }\n\n      return months;\n    }\n  }, {\n    key: \"getMonthSelectElement\",\n    value: function getMonthSelectElement(prefixCls, month, months) {\n      var _this3 = this;\n\n      var _this$props7 = this.props,\n          fullscreen = _this$props7.fullscreen,\n          validRange = _this$props7.validRange,\n          value = _this$props7.value;\n      var options = [];\n      var start = 0;\n      var end = 12;\n\n      if (validRange) {\n        var _validRange2 = _slicedToArray(validRange, 2),\n            rangeStart = _validRange2[0],\n            rangeEnd = _validRange2[1];\n\n        var currentYear = value.get('year');\n\n        if (rangeEnd.get('year') === currentYear) {\n          end = rangeEnd.get('month') + 1;\n        }\n\n        if (rangeStart.get('year') === currentYear) {\n          start = rangeStart.get('month');\n        }\n      }\n\n      for (var index = start; index < end; index++) {\n        options.push(React.createElement(Option, {\n          key: \"\".concat(index)\n        }, months[index]));\n      }\n\n      return React.createElement(Select, {\n        size: fullscreen ? 'default' : 'small',\n        dropdownMatchSelectWidth: false,\n        className: \"\".concat(prefixCls, \"-month-select\"),\n        value: String(month),\n        onChange: this.onMonthChange,\n        getPopupContainer: function getPopupContainer() {\n          return _this3.calenderHeaderNode;\n        }\n      }, options);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderHeader);\n    }\n  }]);\n\n  return Header;\n}(React.Component);\n\nexport { Header as default };\nHeader.defaultProps = {\n  yearSelectOffset: 10,\n  yearSelectTotal: 20\n};","map":null,"metadata":{},"sourceType":"module"}