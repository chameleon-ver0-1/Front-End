{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport createReactContext from '@ant-design/create-react-context';\nimport warning from '../_util/warning';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { withConfigConsumer } from '../config-provider';\nimport { tuple } from '../_util/type';\nvar DrawerContext = createReactContext(null);\nvar PlacementTypes = tuple('top', 'right', 'bottom', 'left');\n\nvar Drawer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Drawer, _React$Component);\n\n  function Drawer() {\n    var _this;\n\n    _classCallCheck(this, Drawer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Drawer).apply(this, arguments));\n    _this.state = {\n      push: false\n    };\n\n    _this.close = function (e) {\n      var _this$props = _this.props,\n          visible = _this$props.visible,\n          onClose = _this$props.onClose;\n\n      if (visible !== undefined && onClose) {\n        onClose(e);\n      }\n    };\n\n    _this.onMaskClick = function (e) {\n      if (!_this.props.maskClosable) {\n        return;\n      }\n\n      _this.close(e);\n    };\n\n    _this.push = function () {\n      _this.setState({\n        push: true\n      });\n    };\n\n    _this.pull = function () {\n      _this.setState({\n        push: false\n      });\n    };\n\n    _this.onDestroyTransitionEnd = function () {\n      var isDestroyOnClose = _this.getDestroyOnClose();\n\n      if (!isDestroyOnClose) {\n        return;\n      }\n\n      if (!_this.props.visible) {\n        _this.destroyClose = true;\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this.getDestroyOnClose = function () {\n      return _this.props.destroyOnClose && !_this.props.visible;\n    }; // get drawar push width or height\n\n\n    _this.getPushTransform = function (placement) {\n      if (placement === 'left' || placement === 'right') {\n        return \"translateX(\".concat(placement === 'left' ? 180 : -180, \"px)\");\n      }\n\n      if (placement === 'top' || placement === 'bottom') {\n        return \"translateY(\".concat(placement === 'top' ? 180 : -180, \"px)\");\n      }\n    };\n\n    _this.getRcDrawerStyle = function () {\n      var _this$props2 = _this.props,\n          zIndex = _this$props2.zIndex,\n          placement = _this$props2.placement,\n          style = _this$props2.style;\n      var push = _this.state.push;\n      return _extends({\n        zIndex: zIndex,\n        transform: push ? _this.getPushTransform(placement) : undefined\n      }, style);\n    }; // render drawer body dom\n\n\n    _this.renderBody = function () {\n      var _this$props3 = _this.props,\n          bodyStyle = _this$props3.bodyStyle,\n          placement = _this$props3.placement,\n          prefixCls = _this$props3.prefixCls,\n          visible = _this$props3.visible;\n\n      if (_this.destroyClose && !visible) {\n        return null;\n      }\n\n      _this.destroyClose = false;\n      var containerStyle = placement === 'left' || placement === 'right' ? {\n        overflow: 'auto',\n        height: '100%'\n      } : {};\n\n      var isDestroyOnClose = _this.getDestroyOnClose();\n\n      if (isDestroyOnClose) {\n        // Increase the opacity transition, delete children after closing.\n        containerStyle.opacity = 0;\n        containerStyle.transition = 'opacity .3s';\n      }\n\n      return React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-wrapper-body\"),\n        style: containerStyle,\n        onTransitionEnd: _this.onDestroyTransitionEnd\n      }, _this.renderHeader(), React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body\"),\n        style: bodyStyle\n      }, _this.props.children));\n    }; // render Provider for Multi-level drawe\n\n\n    _this.renderProvider = function (value) {\n      var _a = _this.props,\n          prefixCls = _a.prefixCls,\n          zIndex = _a.zIndex,\n          style = _a.style,\n          placement = _a.placement,\n          className = _a.className,\n          wrapClassName = _a.wrapClassName,\n          width = _a.width,\n          height = _a.height,\n          rest = __rest(_a, [\"prefixCls\", \"zIndex\", \"style\", \"placement\", \"className\", \"wrapClassName\", \"width\", \"height\"]);\n\n      warning(wrapClassName === undefined, 'Drawer', 'wrapClassName is deprecated, please use className instead.');\n      var haveMask = rest.mask ? '' : 'no-mask';\n      _this.parentDrawer = value;\n      var offsetStyle = {};\n\n      if (placement === 'left' || placement === 'right') {\n        offsetStyle.width = width;\n      } else {\n        offsetStyle.height = height;\n      }\n\n      return React.createElement(DrawerContext.Provider, {\n        value: _assertThisInitialized(_this)\n      }, React.createElement(RcDrawer, _extends({\n        handler: false\n      }, rest, offsetStyle, {\n        prefixCls: prefixCls,\n        open: _this.props.visible,\n        onMaskClick: _this.onMaskClick,\n        showMask: _this.props.mask,\n        placement: placement,\n        style: _this.getRcDrawerStyle(),\n        className: classNames(wrapClassName, className, haveMask)\n      }), _this.renderBody()));\n    };\n\n    return _this;\n  }\n\n  _createClass(Drawer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(preProps) {\n      var visible = this.props.visible;\n\n      if (preProps.visible !== visible && this.parentDrawer) {\n        if (visible) {\n          this.parentDrawer.push();\n        } else {\n          this.parentDrawer.pull();\n        }\n      }\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var _this$props4 = this.props,\n          title = _this$props4.title,\n          prefixCls = _this$props4.prefixCls,\n          closable = _this$props4.closable;\n\n      if (!title && !closable) {\n        return null;\n      }\n\n      var headerClassName = title ? \"\".concat(prefixCls, \"-header\") : \"\".concat(prefixCls, \"-header-no-title\");\n      return React.createElement(\"div\", {\n        className: headerClassName\n      }, title && React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-title\")\n      }, title), closable && this.renderCloseIcon());\n    }\n  }, {\n    key: \"renderCloseIcon\",\n    value: function renderCloseIcon() {\n      var _this$props5 = this.props,\n          closable = _this$props5.closable,\n          prefixCls = _this$props5.prefixCls;\n      return closable && React.createElement(\"button\", {\n        onClick: this.close,\n        \"aria-label\": \"Close\",\n        className: \"\".concat(prefixCls, \"-close\")\n      }, React.createElement(Icon, {\n        type: \"close\"\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(DrawerContext.Consumer, null, this.renderProvider);\n    }\n  }]);\n\n  return Drawer;\n}(React.Component);\n\nDrawer.propTypes = {\n  closable: PropTypes.bool,\n  destroyOnClose: PropTypes.bool,\n  getContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func, PropTypes.bool]),\n  maskClosable: PropTypes.bool,\n  mask: PropTypes.bool,\n  maskStyle: PropTypes.object,\n  style: PropTypes.object,\n  title: PropTypes.node,\n  visible: PropTypes.bool,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  zIndex: PropTypes.number,\n  prefixCls: PropTypes.string,\n  placement: PropTypes.oneOf(PlacementTypes),\n  onClose: PropTypes.func,\n  afterVisibleChange: PropTypes.func,\n  className: PropTypes.string\n};\nDrawer.defaultProps = {\n  width: 256,\n  height: 256,\n  closable: true,\n  placement: 'right',\n  maskClosable: true,\n  mask: true,\n  level: null\n};\nexport default withConfigConsumer({\n  prefixCls: 'drawer'\n})(Drawer);","map":null,"metadata":{},"sourceType":"module"}