{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport * as PropTypes from 'prop-types';\n\nfunction propsValueType() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var props = args[0],\n      propName = args[1],\n      componentName = args[2],\n      rest = args.slice(3);\n  var basicType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n  var labelInValueShape = PropTypes.shape({\n    key: basicType.isRequired,\n    label: PropTypes.node\n  });\n\n  if (props.labelInValue) {\n    var validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);\n    var error = validate.apply(void 0, [props, propName, componentName].concat(_toConsumableArray(rest)));\n\n    if (error) {\n      return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(componentName, \"`, \") + \"when you set `labelInValue` to `true`, `\".concat(propName, \"` should in \") + \"shape of `{ key: string | number, label?: ReactNode }`.\");\n    }\n  } else if ((props.mode === 'multiple' || props.mode === 'tags' || props.multiple || props.tags) && props[propName] === '') {\n    return new Error(\"Invalid prop `\".concat(propName, \"` of type `string` supplied to `\").concat(componentName, \"`, \") + \"expected `array` when `multiple` or `tags` is `true`.\");\n  } else {\n    var _validate = PropTypes.oneOfType([PropTypes.arrayOf(basicType), basicType]);\n\n    return _validate.apply(void 0, [props, propName, componentName].concat(_toConsumableArray(rest)));\n  }\n\n  return null;\n}\n\nvar SelectPropTypes = {\n  id: PropTypes.string,\n  defaultActiveFirstOption: PropTypes.bool,\n  multiple: PropTypes.bool,\n  filterOption: PropTypes.any,\n  children: PropTypes.any,\n  showSearch: PropTypes.bool,\n  disabled: PropTypes.bool,\n  allowClear: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  tags: PropTypes.bool,\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  transitionName: PropTypes.string,\n  optionLabelProp: PropTypes.string,\n  optionFilterProp: PropTypes.string,\n  animation: PropTypes.string,\n  choiceTransitionName: PropTypes.string,\n  open: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onSelect: PropTypes.func,\n  onSearch: PropTypes.func,\n  onPopupScroll: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onInputKeyDown: PropTypes.func,\n  placeholder: PropTypes.any,\n  onDeselect: PropTypes.func,\n  labelInValue: PropTypes.bool,\n  loading: PropTypes.bool,\n  value: propsValueType,\n  defaultValue: propsValueType,\n  dropdownStyle: PropTypes.object,\n  maxTagTextLength: PropTypes.number,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  tokenSeparators: PropTypes.arrayOf(PropTypes.string),\n  getInputElement: PropTypes.func,\n  showAction: PropTypes.arrayOf(PropTypes.string),\n  clearIcon: PropTypes.node,\n  inputIcon: PropTypes.node,\n  removeIcon: PropTypes.node,\n  menuItemSelectedIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  dropdownRender: PropTypes.func\n};\nexport default SelectPropTypes;","map":null,"metadata":{},"sourceType":"module"}