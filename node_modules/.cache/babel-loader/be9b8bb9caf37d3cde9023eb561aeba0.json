{"ast":null,"code":"import _classCallCheck from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\React\\\\react-gradu\\\\src\\\\components\\\\independent\\\\webRTCRoom\\\\VideoItem.jsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 80%;\\n  width: 50%;\\n  text-align: center;\\n  display: inline-block;\\n  background: black;\\n  color: white;\\n  font-size: 15px;\\n  opacity: 0.4;\\n  border-radius: 45px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding-left: 50px;\\n  padding-top: 19px;\\n  padding-right: 50px;\\n  width: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport \"./webrtc.style.css\";\nimport { getHTMLMediaElement } from \"./getHTMLMediaElement\";\nimport axios from \"axios\";\nimport * as service from \"./post\";\nvar connection = new window.RTCMultiConnection();\nconnection.autoCloseEntireSession = true; // connection.publicRoomIdentifier = window.params.publicRoomIdentifier;\n// FIXME: 우리 소켓링크로 연결 변경\n\nconnection.socketURL = \"https://rtcmulticonnection.herokuapp.com:443/\";\nvar VideoFrame = styled.div(_templateObject());\nvar EmotionStatus = styled.div(_templateObject2());\nexport var VideoItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VideoItem, _Component);\n\n  function VideoItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, VideoItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VideoItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dummy: []\n    };\n    _this.state = {\n      dummy: []\n    };\n    return _this;\n  }\n\n  _createClass(VideoItem, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var script = document.createElement(\"script\");\n      script.src = \"https://cdn.webrtc-experiment.com/RTCMultiConnection.js\";\n      script.src = \"https://cdn.webrtc-experiment.com/conversation.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/node_modules/webrtc-adapter/out/adapter.js\";\n      script.src = \"./getHTMLMediaElement.jsx\";\n      script.src = \"https://cdn.WebRTC-Experiment.com/getScreenId.js\";\n      script.src = \"https://webrtc.github.io/adapter/adapter-latest.js\";\n      script.async = true;\n      document.body.appendChild(script);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      (function () {\n        var params = {},\n            r = /([^&=]+)=?([^&]*)/g;\n\n        function d(s) {\n          return decodeURIComponent(s.replace(/\\+/g, \" \"));\n        }\n\n        var match,\n            search = window.location.search;\n\n        while (match = r.exec(search.substring(1))) {\n          params[d(match[1])] = d(match[2]);\n        }\n\n        window.params = params;\n      })(); // if you want audio+video conferencing\n\n\n      connection.socketMessageEvent = \"video-conference-demo\";\n      connection.session = {\n        audio: true,\n        video: true\n      };\n      connection.sdpConstraints.mandatory = {\n        OfferToReceiveAudio: true,\n        OfferToReceiveVideo: true\n      };\n\n      connection.onstream = function (event) {\n        //connection1\n        connection.videosContainer = document.getElementById(\"videos-container\");\n        var video = document.createElement(\"video\"); // var video = event.mediaElement;\n\n        video.id = event.streamid;\n        console.log(\"onstream 정상 작동 중\");\n        var existing = document.getElementById(event.streamid); // if (existing && existing.parentNode) {\n        //   existing.parentNode.removeChild(existing);\n        // }\n\n        event.mediaElement.removeAttribute(\"src\");\n        event.mediaElement.removeAttribute(\"srcObject\");\n        event.mediaElement.muted = true;\n        event.mediaElement.volume = 0;\n\n        try {\n          video.setAttributeNode(document.createAttribute(\"autoplay\"));\n          video.setAttributeNode(document.createAttribute(\"playsinline\"));\n        } catch (e) {\n          video.setAttribute(\"autoplay\", true);\n          video.setAttribute(\"playsinline\", true);\n        }\n\n        if (event.type === \"local\") {\n          video.volume = 0;\n\n          try {\n            video.setAttributeNode(document.createAttribute(\"muted\"));\n          } catch (e) {\n            video.setAttribute(\"muted\", true);\n          }\n        }\n\n        video.srcObject = event.stream;\n        var width = 400;\n        var height = 1000;\n        video.width = width;\n        video.buttons = \"full-screen\";\n        video.style.marginLeft = \"16px\";\n        connection.videosContainer.appendChild(video); //FIXME: 이 부분 제거해야함.\n        // var mediaElement = getHTMLMediaElement(video, {\n        //   title: event.userid,\n        //   buttons: [\"full-screen\"],\n        //   width: width,\n        //   height: height,\n        //   showOnMouseEnter: false\n        // });\n        // setTimeout(function() {\n        //   mediaElement.media.play();\n        // }, 5000);\n        // mediaElement.id = event.streamid;\n        // to keep room-id in cache\n\n        localStorage.setItem(connection.socketMessageEvent, connection.sessionid);\n\n        if (event.type === \"local\") {\n          connection.socket.on(\"disconnect\", function () {\n            if (!connection.getAllParticipants().length) {\n              window.location.reload();\n            }\n          });\n        }\n      }; //connection2\n\n\n      connection.onstreamended = function (event) {\n        var mediaElement = document.getElementById(event.streamid);\n\n        if (mediaElement) {\n          mediaElement.parentNode.removeChild(mediaElement);\n        }\n      };\n\n      connection.onMediaError = function (e) {\n        if (e.message === \"Concurrent mic process limit.\") {\n          if (window.DetectRTC.audioInputDevices.length <= 1) {\n            alert(\"Please select external microphone. Check github issue number 483.\");\n            return;\n          }\n\n          var secondaryMic = window.DetectRTC.audioInputDevices[1].deviceId;\n          connection.mediaConstraints.audio = {\n            deviceId: secondaryMic\n          };\n          connection.join(connection.sessionid);\n        }\n      };\n\n      var disableInputButtons = function disableInputButtons(enable) {\n        // document.getElementById(\"room-id\").onkeyup();\n        document.getElementsByClassName(\"open-or-join-room\").disabled = !enable;\n        document.getElementsByClassName(\"open-room\").disabled = !enable;\n        document.getElementsByClassName(\"join-room\").disabled = !enable;\n        document.getElementsByClassName(\"room-id\").disabled = !enable;\n      }; //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\n      //화면  공유 기능\n\n\n      var getScreenId = function getScreenId(error, sourceId, screen_constraints) {\n        if (navigator.userAgent.indexOf(\"Edge\") !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n          navigator.getDisplayMedia(screen_constraints).then(function (stream) {\n            document.querySelector(\"video\").srcObject = stream;\n          }, function (error) {\n            alert(\"Please make sure to use Edge 17 or higher.\");\n          });\n          return;\n        } //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\n        //chrome extension 설치 여부 detection\n        // const getChromeExtensionStatus = status => {\n        //   if (status === \"installed-enabled\") alert(\"installed\");\n        //   if (status === \"installed-disabled\") alert(\"installed but disabled\");\n        //   // etc.\n        // };\n\n\n        navigator.mediaDevices.getUserMedia(screen_constraints).then(function (stream) {\n          document.querySelector(\"video\").srcObject = stream; // share this \"MediaStream\" object using RTCPeerConnection API\n        }).catch(function (error) {\n          console.error(error);\n        });\n      };\n      /*신규 화상회의 방 개설하기 */\n\n\n      var openRoom = function openRoom() {\n        disableInputButtons();\n        connection.open(document.getElementById(\"room-id\").value, function (isRoomOpened, roomid, error) {\n          if (isRoomOpened === true) {\n            showRoomURL(connection.sessionid); //FIXME:state값 추가함\n            // this.state.isRoomAppear = true;\n          } else {\n            disableInputButtons(true);\n\n            if (error === \"Room not available\") {\n              alert(\"이미 개설된 방입니다. 참여하기 버튼을 누르거나 새로운 방을 개설해주세요.\");\n              return;\n            }\n\n            alert(error);\n          }\n        });\n      };\n      /*기존 개설된 화상회의 방 들어가기 */\n\n\n      var joinRoom = function joinRoom() {\n        disableInputButtons();\n        connection.join(document.getElementById(\"room-id\").value, function (isJoinedRoom, roomid, error) {\n          if (error) {\n            disableInputButtons(true);\n\n            if (error === \"Room not available\") {\n              alert(\"현재 이 방은 존재하지 않는 방입니다.\");\n              return;\n            }\n\n            alert(error);\n          }\n        });\n      };\n      /*신규 화상회의방 개설하고 들어가기 */\n\n\n      var openOrJoinRoom = function openOrJoinRoom() {\n        disableInputButtons();\n        connection.openOrJoin(document.getElementById(\"room-id\".value, function (isRoomExist, roomid, error) {\n          if (error) {\n            disableInputButtons(true);\n            alert(error);\n          } else if (connection.isInitiator === true) {\n            showRoomURL(roomid);\n          }\n        }));\n      };\n\n      var onRekog = function onRekog() {\n        //TODO: 여기에 액션 채우면 됩니다.\n        console.log(\"예지만세\");\n      };\n\n      var showRoomURL = function showRoomURL(roomid) {\n        var roomHashURL = \"#\" + roomid;\n        var roomQueryStringURL = \"?roomid=\" + roomid;\n        var html = \"<h2>Unique URL for your room:</h2><br>\";\n        html += 'Hash URL: <a href=\"' + roomHashURL + '\" target=\"_blank\">' + roomHashURL + \"</a>\";\n        html += \"<br>\";\n        html += 'QueryString URL: <a href=\"' + roomQueryStringURL + '\" target=\"_blank\">' + roomQueryStringURL + \"</a>\";\n        var roomURLsDiv = document.getElementById(\"room-urls\");\n        roomURLsDiv.innerHTML = html;\n        roomURLsDiv.style.display = \"block\"; //FIXME:state값 추가함\n        // this.state.roomToken = roomQueryStringURL;\n        // this.state.roomKey = html;\n\n        _this2.state.roomToken = roomQueryStringURL;\n      }; //roomid setting 부분\n\n\n      var roomid = \"\";\n\n      if (localStorage.getItem(connection.socketMessageEvent)) {\n        roomid = localStorage.getItem(connection.socketMessageEvent);\n      } else {\n        roomid = connection.token();\n      }\n\n      var txtRoomId = document.getElementsByClassName(\"room-id\"); //FIXME:className으로 해야 작동이 되나 원래는 id로 해야함. 둘의 차이를 잘 모르겠음.\n\n      txtRoomId.value = roomid; //FIXME:\n\n      txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function () {\n        localStorage.setItem(connection.socketMessageEvent, document.getElementById(\"room-id\").value);\n      };\n\n      var hashString = window.location.hash.replace(\"#\", \"\");\n\n      if (hashString.length && hashString.indexOf(\"comment-\") === 0) {\n        hashString = \"\";\n      } //TODO: roomid를 직접 받아와야하는 부분\n\n\n      var roomid = window.params.roomid; // var roomid = params.roomid; //FIXME:\n\n      if (!roomid && hashString.length) {\n        roomid = hashString;\n      }\n\n      if (roomid && roomid.length) {\n        document.getElementsByClassName(\"room-id\").value = roomid;\n        localStorage.setItem(connection.socketMessageEvent, roomid); // auto-join-room\n\n        (function reCheckRoomPresence() {\n          connection.checkPresence(roomid, function (isRoomExist) {\n            if (isRoomExist) {\n              connection.join(roomid);\n              return;\n            }\n\n            setTimeout(reCheckRoomPresence, 5000);\n          });\n        })();\n\n        disableInputButtons();\n      } // detect 2G\n\n\n      if (navigator.connection && navigator.connection.type === \"cellular\" && navigator.connection.downlinkMax <= 0.115) {\n        alert(\"2G is not supported. Please use a better internet service.\");\n      }\n\n      var getPost = function getPost() {\n        fetch(\"https://jsonplaceholder.typicode.com/todos/1\").then(function (response) {\n          return response.json();\n        }).then(function (json) {\n          console.log(json);\n\n          _this2.setState({\n            dummy: json\n          });\n        });\n      };\n\n      return React.createElement(VideoFrame, {\n        id: \"video-home-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"videos-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"room-id\",\n        className: \"room-id\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        size: \"20\",\n        defaultValue: \"abcded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"open-room\",\n        onClick: openRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, \"\\uD68C\\uC758\\uC2E4 \\uAC1C\\uC124\\uD558\\uAE30\")), React.createElement(\"div\", {\n        id: \"room-urls\",\n        style: {\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"image-container\",\n        style: {\n          background: \"pink\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: getPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"\\uC9C0\\uAE08\\uBD80\\uD130 \\uAC10\\uC815\\uC778\\uC2DD \\uC2DC\\uC791\")), React.createElement(\"div\", {\n        id: \"show-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, \"\\uC5EC\\uAE30\\uB294 \\uC774\\uBBF8\\uC9C0\\uB97C \\uBCF4\\uC5EC\\uC8FC\\uB294 \\uACF5\\uAC04\\uC785\\uB2C8\\uB2E4.\")), React.createElement(EmotionStatus, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, this.state.dummy.title));\n    }\n  }]);\n\n  return VideoItem;\n}(Component);\nexport default VideoItem;","map":{"version":3,"sources":["C:\\React\\react-gradu\\src\\components\\independent\\webRTCRoom\\VideoItem.jsx"],"names":["React","Component","styled","getHTMLMediaElement","axios","service","connection","window","RTCMultiConnection","autoCloseEntireSession","socketURL","VideoFrame","div","EmotionStatus","VideoItem","state","dummy","script","document","createElement","src","async","body","appendChild","params","r","d","s","decodeURIComponent","replace","match","search","location","exec","substring","socketMessageEvent","session","audio","video","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","onstream","event","videosContainer","getElementById","id","streamid","console","log","existing","mediaElement","removeAttribute","muted","volume","setAttributeNode","createAttribute","e","setAttribute","type","srcObject","stream","width","height","buttons","style","marginLeft","localStorage","setItem","sessionid","socket","on","getAllParticipants","length","reload","onstreamended","parentNode","removeChild","onMediaError","message","DetectRTC","audioInputDevices","alert","secondaryMic","deviceId","mediaConstraints","join","disableInputButtons","enable","getElementsByClassName","disabled","getScreenId","error","sourceId","screen_constraints","navigator","userAgent","indexOf","msSaveOrOpenBlob","msSaveBlob","getDisplayMedia","then","querySelector","mediaDevices","getUserMedia","catch","openRoom","open","value","isRoomOpened","roomid","showRoomURL","joinRoom","isJoinedRoom","openOrJoinRoom","openOrJoin","isRoomExist","isInitiator","onRekog","roomHashURL","roomQueryStringURL","html","roomURLsDiv","innerHTML","display","roomToken","getItem","token","txtRoomId","onkeyup","oninput","onpaste","hashString","hash","reCheckRoomPresence","checkPresence","setTimeout","downlinkMax","getPost","fetch","response","json","setState","background","title"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,oBAAP;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,QAAzB;AACA,IAAIC,UAAU,GAAG,IAAIC,MAAM,CAACC,kBAAX,EAAjB;AAEAF,UAAU,CAACG,sBAAX,GAAoC,IAApC,C,CACA;AAEA;;AACAH,UAAU,CAACI,SAAX,GAAuB,+CAAvB;AAEA,IAAMC,UAAU,GAAGT,MAAM,CAACU,GAAV,mBAAhB;AAMA,IAAMC,aAAa,GAAGX,MAAM,CAACU,GAAV,oBAAnB;AAaA,WAAaE,SAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAEEC,KAFF,GAEU;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFV;AAAA,UAyBED,KAzBF,GAyBU;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAzBV;AAAA;AAAA;;AAAA;AAAA;AAAA,yCAGuB;AACnB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AAEAF,MAAAA,MAAM,CAACG,GAAP,GAAa,yDAAb;AACAH,MAAAA,MAAM,CAACG,GAAP,GAAa,mDAAb;AAEAH,MAAAA,MAAM,CAACG,GAAP,GACE,yEADF;AAEAH,MAAAA,MAAM,CAACG,GAAP,GACE,iEADF;AAEAH,MAAAA,MAAM,CAACG,GAAP,GACE,qFADF;AAEAH,MAAAA,MAAM,CAACG,GAAP,GAAa,2BAAb;AAEAH,MAAAA,MAAM,CAACG,GAAP,GAAa,kDAAb;AACAH,MAAAA,MAAM,CAACG,GAAP,GAAa,oDAAb;AAEAH,MAAAA,MAAM,CAACI,KAAP,GAAe,IAAf;AAEAH,MAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,MAA1B;AACD;AAvBH;AAAA;AAAA,wCAwBsB,CAAE;AAxBxB;AAAA;AAAA,6BA0BW;AAAA;;AACP,OAAC,YAAW;AACV,YAAIO,MAAM,GAAG,EAAb;AAAA,YACEC,CAAC,GAAG,oBADN;;AAEA,iBAASC,CAAT,CAAWC,CAAX,EAAc;AACZ,iBAAOC,kBAAkB,CAACD,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,GAAjB,CAAD,CAAzB;AACD;;AACD,YAAIC,KAAJ;AAAA,YACEC,MAAM,GAAGxB,MAAM,CAACyB,QAAP,CAAgBD,MAD3B;;AAEA,eAAQD,KAAK,GAAGL,CAAC,CAACQ,IAAF,CAAOF,MAAM,CAACG,SAAP,CAAiB,CAAjB,CAAP,CAAhB;AACEV,UAAAA,MAAM,CAACE,CAAC,CAACI,KAAK,CAAC,CAAD,CAAN,CAAF,CAAN,GAAsBJ,CAAC,CAACI,KAAK,CAAC,CAAD,CAAN,CAAvB;AADF;;AAEAvB,QAAAA,MAAM,CAACiB,MAAP,GAAgBA,MAAhB;AACD,OAXD,IADO,CAcP;;;AACAlB,MAAAA,UAAU,CAAC6B,kBAAX,GAAgC,uBAAhC;AAEA7B,MAAAA,UAAU,CAAC8B,OAAX,GAAqB;AACnBC,QAAAA,KAAK,EAAE,IADY;AAEnBC,QAAAA,KAAK,EAAE;AAFY,OAArB;AAIAhC,MAAAA,UAAU,CAACiC,cAAX,CAA0BC,SAA1B,GAAsC;AACpCC,QAAAA,mBAAmB,EAAE,IADe;AAEpCC,QAAAA,mBAAmB,EAAE;AAFe,OAAtC;;AAKApC,MAAAA,UAAU,CAACqC,QAAX,GAAsB,UAASC,KAAT,EAAgB;AACpC;AACAtC,QAAAA,UAAU,CAACuC,eAAX,GAA6B3B,QAAQ,CAAC4B,cAAT,CAAwB,kBAAxB,CAA7B;AACA,YAAIR,KAAK,GAAGpB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAZ,CAHoC,CAIpC;;AACAmB,QAAAA,KAAK,CAACS,EAAN,GAAWH,KAAK,CAACI,QAAjB;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,YAAIC,QAAQ,GAAGjC,QAAQ,CAAC4B,cAAT,CAAwBF,KAAK,CAACI,QAA9B,CAAf,CAToC,CAUpC;AACA;AACA;;AACAJ,QAAAA,KAAK,CAACQ,YAAN,CAAmBC,eAAnB,CAAmC,KAAnC;AACAT,QAAAA,KAAK,CAACQ,YAAN,CAAmBC,eAAnB,CAAmC,WAAnC;AACAT,QAAAA,KAAK,CAACQ,YAAN,CAAmBE,KAAnB,GAA2B,IAA3B;AACAV,QAAAA,KAAK,CAACQ,YAAN,CAAmBG,MAAnB,GAA4B,CAA5B;;AAEA,YAAI;AACFjB,UAAAA,KAAK,CAACkB,gBAAN,CAAuBtC,QAAQ,CAACuC,eAAT,CAAyB,UAAzB,CAAvB;AACAnB,UAAAA,KAAK,CAACkB,gBAAN,CAAuBtC,QAAQ,CAACuC,eAAT,CAAyB,aAAzB,CAAvB;AACD,SAHD,CAGE,OAAOC,CAAP,EAAU;AACVpB,UAAAA,KAAK,CAACqB,YAAN,CAAmB,UAAnB,EAA+B,IAA/B;AACArB,UAAAA,KAAK,CAACqB,YAAN,CAAmB,aAAnB,EAAkC,IAAlC;AACD;;AAED,YAAIf,KAAK,CAACgB,IAAN,KAAe,OAAnB,EAA4B;AAC1BtB,UAAAA,KAAK,CAACiB,MAAN,GAAe,CAAf;;AACA,cAAI;AACFjB,YAAAA,KAAK,CAACkB,gBAAN,CAAuBtC,QAAQ,CAACuC,eAAT,CAAyB,OAAzB,CAAvB;AACD,WAFD,CAEE,OAAOC,CAAP,EAAU;AACVpB,YAAAA,KAAK,CAACqB,YAAN,CAAmB,OAAnB,EAA4B,IAA5B;AACD;AACF;;AAEDrB,QAAAA,KAAK,CAACuB,SAAN,GAAkBjB,KAAK,CAACkB,MAAxB;AAEA,YAAIC,KAAK,GAAG,GAAZ;AACA,YAAIC,MAAM,GAAG,IAAb;AACA1B,QAAAA,KAAK,CAACyB,KAAN,GAAcA,KAAd;AAEAzB,QAAAA,KAAK,CAAC2B,OAAN,GAAgB,aAAhB;AACA3B,QAAAA,KAAK,CAAC4B,KAAN,CAAYC,UAAZ,GAAyB,MAAzB;AAEA7D,QAAAA,UAAU,CAACuC,eAAX,CAA2BtB,WAA3B,CAAuCe,KAAvC,EA5CoC,CA8CpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACA8B,QAAAA,YAAY,CAACC,OAAb,CAAqB/D,UAAU,CAAC6B,kBAAhC,EAAoD7B,UAAU,CAACgE,SAA/D;;AACA,YAAI1B,KAAK,CAACgB,IAAN,KAAe,OAAnB,EAA4B;AAC1BtD,UAAAA,UAAU,CAACiE,MAAX,CAAkBC,EAAlB,CAAqB,YAArB,EAAmC,YAAW;AAC5C,gBAAI,CAAClE,UAAU,CAACmE,kBAAX,GAAgCC,MAArC,EAA6C;AAC3CnE,cAAAA,MAAM,CAACyB,QAAP,CAAgB2C,MAAhB;AACD;AACF,WAJD;AAKD;AACF,OArED,CA1BO,CAiGP;;;AACArE,MAAAA,UAAU,CAACsE,aAAX,GAA2B,UAAShC,KAAT,EAAgB;AACzC,YAAIQ,YAAY,GAAGlC,QAAQ,CAAC4B,cAAT,CAAwBF,KAAK,CAACI,QAA9B,CAAnB;;AACA,YAAII,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,CAACyB,UAAb,CAAwBC,WAAxB,CAAoC1B,YAApC;AACD;AACF,OALD;;AAMA9C,MAAAA,UAAU,CAACyE,YAAX,GAA0B,UAASrB,CAAT,EAAY;AACpC,YAAIA,CAAC,CAACsB,OAAF,KAAc,+BAAlB,EAAmD;AACjD,cAAIzE,MAAM,CAAC0E,SAAP,CAAiBC,iBAAjB,CAAmCR,MAAnC,IAA6C,CAAjD,EAAoD;AAClDS,YAAAA,KAAK,CACH,mEADG,CAAL;AAGA;AACD;;AACD,cAAIC,YAAY,GAAG7E,MAAM,CAAC0E,SAAP,CAAiBC,iBAAjB,CAAmC,CAAnC,EAAsCG,QAAzD;AACA/E,UAAAA,UAAU,CAACgF,gBAAX,CAA4BjD,KAA5B,GAAoC;AAClCgD,YAAAA,QAAQ,EAAED;AADwB,WAApC;AAGA9E,UAAAA,UAAU,CAACiF,IAAX,CAAgBjF,UAAU,CAACgE,SAA3B;AACD;AACF,OAdD;;AAgBA,UAAMkB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,MAAM,EAAI;AACpC;AAEAvE,QAAAA,QAAQ,CAACwE,sBAAT,CAAgC,mBAAhC,EAAqDC,QAArD,GAAgE,CAACF,MAAjE;AACAvE,QAAAA,QAAQ,CAACwE,sBAAT,CAAgC,WAAhC,EAA6CC,QAA7C,GAAwD,CAACF,MAAzD;AACAvE,QAAAA,QAAQ,CAACwE,sBAAT,CAAgC,WAAhC,EAA6CC,QAA7C,GAAwD,CAACF,MAAzD;AACAvE,QAAAA,QAAQ,CAACwE,sBAAT,CAAgC,SAAhC,EAA2CC,QAA3C,GAAsD,CAACF,MAAvD;AACD,OAPD,CAxHO,CAiIP;AACA;;;AACA,UAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,QAAR,EAAkBC,kBAAlB,EAAyC;AAC3D,YACEC,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,MAA5B,MAAwC,CAAC,CAAzC,KACC,CAAC,CAACF,SAAS,CAACG,gBAAZ,IAAgC,CAAC,CAACH,SAAS,CAACI,UAD7C,CADF,EAGE;AACAJ,UAAAA,SAAS,CAACK,eAAV,CAA0BN,kBAA1B,EAA8CO,IAA9C,CACE,UAAAxC,MAAM,EAAI;AACR5C,YAAAA,QAAQ,CAACqF,aAAT,CAAuB,OAAvB,EAAgC1C,SAAhC,GAA4CC,MAA5C;AACD,WAHH,EAIE,UAAA+B,KAAK,EAAI;AACPV,YAAAA,KAAK,CAAC,4CAAD,CAAL;AACD,WANH;AAQA;AACD,SAd0D,CAe3D;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAa,QAAAA,SAAS,CAACQ,YAAV,CACGC,YADH,CACgBV,kBADhB,EAEGO,IAFH,CAEQ,UAASxC,MAAT,EAAiB;AACrB5C,UAAAA,QAAQ,CAACqF,aAAT,CAAuB,OAAvB,EAAgC1C,SAAhC,GAA4CC,MAA5C,CADqB,CAGrB;AACD,SANH,EAOG4C,KAPH,CAOS,UAASb,KAAT,EAAgB;AACrB5C,UAAAA,OAAO,CAAC4C,KAAR,CAAcA,KAAd;AACD,SATH;AAUD,OAjCD;AAmCA;;;AACA,UAAMc,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBnB,QAAAA,mBAAmB;AACnBlF,QAAAA,UAAU,CAACsG,IAAX,CAAgB1F,QAAQ,CAAC4B,cAAT,CAAwB,SAAxB,EAAmC+D,KAAnD,EAA0D,UACxDC,YADwD,EAExDC,MAFwD,EAGxDlB,KAHwD,EAIxD;AACA,cAAIiB,YAAY,KAAK,IAArB,EAA2B;AACzBE,YAAAA,WAAW,CAAC1G,UAAU,CAACgE,SAAZ,CAAX,CADyB,CAEzB;AACA;AACD,WAJD,MAIO;AACLkB,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;;AACA,gBAAIK,KAAK,KAAK,oBAAd,EAAoC;AAClCV,cAAAA,KAAK,CACH,2CADG,CAAL;AAGA;AACD;;AACDA,YAAAA,KAAK,CAACU,KAAD,CAAL;AACD;AACF,SAnBD;AAoBD,OAtBD;AAwBA;;;AACA,UAAMoB,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBzB,QAAAA,mBAAmB;AACnBlF,QAAAA,UAAU,CAACiF,IAAX,CAAgBrE,QAAQ,CAAC4B,cAAT,CAAwB,SAAxB,EAAmC+D,KAAnD,EAA0D,UACxDK,YADwD,EAExDH,MAFwD,EAGxDlB,KAHwD,EAIxD;AACA,cAAIA,KAAJ,EAAW;AACTL,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;;AACA,gBAAIK,KAAK,KAAK,oBAAd,EAAoC;AAClCV,cAAAA,KAAK,CAAC,uBAAD,CAAL;AACA;AACD;;AACDA,YAAAA,KAAK,CAACU,KAAD,CAAL;AACD;AACF,SAbD;AAcD,OAhBD;AAkBA;;;AACA,UAAMsB,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B3B,QAAAA,mBAAmB;AACnBlF,QAAAA,UAAU,CAAC8G,UAAX,CACElG,QAAQ,CAAC4B,cAAT,CAAwB,UAAU+D,KAAlC,EAAyC,UACvCQ,WADuC,EAEvCN,MAFuC,EAGvClB,KAHuC,EAIvC;AACA,cAAIA,KAAJ,EAAW;AACTL,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAL,YAAAA,KAAK,CAACU,KAAD,CAAL;AACD,WAHD,MAGO,IAAIvF,UAAU,CAACgH,WAAX,KAA2B,IAA/B,EAAqC;AAC1CN,YAAAA,WAAW,CAACD,MAAD,CAAX;AACD;AACF,SAXD,CADF;AAcD,OAhBD;;AAiBA,UAAMQ,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB;AACAtE,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,OAHD;;AAKA,UAAM8D,WAAW,GAAG,SAAdA,WAAc,CAAAD,MAAM,EAAI;AAC5B,YAAIS,WAAW,GAAG,MAAMT,MAAxB;AACA,YAAIU,kBAAkB,GAAG,aAAaV,MAAtC;AACA,YAAIW,IAAI,GAAG,wCAAX;AACAA,QAAAA,IAAI,IACF,wBACAF,WADA,GAEA,oBAFA,GAGAA,WAHA,GAIA,MALF;AAMAE,QAAAA,IAAI,IAAI,MAAR;AACAA,QAAAA,IAAI,IACF,+BACAD,kBADA,GAEA,oBAFA,GAGAA,kBAHA,GAIA,MALF;AAMA,YAAIE,WAAW,GAAGzG,QAAQ,CAAC4B,cAAT,CAAwB,WAAxB,CAAlB;AACA6E,QAAAA,WAAW,CAACC,SAAZ,GAAwBF,IAAxB;AACAC,QAAAA,WAAW,CAACzD,KAAZ,CAAkB2D,OAAlB,GAA4B,OAA5B,CAnB4B,CAoB5B;AACA;AACA;;AACA,QAAA,MAAI,CAAC9G,KAAL,CAAW+G,SAAX,GAAuBL,kBAAvB;AACD,OAxBD,CAzOO,CAmQP;;;AACA,UAAIV,MAAM,GAAG,EAAb;;AACA,UAAI3C,YAAY,CAAC2D,OAAb,CAAqBzH,UAAU,CAAC6B,kBAAhC,CAAJ,EAAyD;AACvD4E,QAAAA,MAAM,GAAG3C,YAAY,CAAC2D,OAAb,CAAqBzH,UAAU,CAAC6B,kBAAhC,CAAT;AACD,OAFD,MAEO;AACL4E,QAAAA,MAAM,GAAGzG,UAAU,CAAC0H,KAAX,EAAT;AACD;;AACD,UAAIC,SAAS,GAAG/G,QAAQ,CAACwE,sBAAT,CAAgC,SAAhC,CAAhB,CA1QO,CA0QqD;;AAE5DuC,MAAAA,SAAS,CAACpB,KAAV,GAAkBE,MAAlB,CA5QO,CA4QmB;;AAC1BkB,MAAAA,SAAS,CAACC,OAAV,GAAoBD,SAAS,CAACE,OAAV,GAAoBF,SAAS,CAACG,OAAV,GAAoB,YAAW;AACrEhE,QAAAA,YAAY,CAACC,OAAb,CACE/D,UAAU,CAAC6B,kBADb,EAEEjB,QAAQ,CAAC4B,cAAT,CAAwB,SAAxB,EAAmC+D,KAFrC;AAID,OALD;;AAMA,UAAIwB,UAAU,GAAG9H,MAAM,CAACyB,QAAP,CAAgBsG,IAAhB,CAAqBzG,OAArB,CAA6B,GAA7B,EAAkC,EAAlC,CAAjB;;AACA,UAAIwG,UAAU,CAAC3D,MAAX,IAAqB2D,UAAU,CAACnC,OAAX,CAAmB,UAAnB,MAAmC,CAA5D,EAA+D;AAC7DmC,QAAAA,UAAU,GAAG,EAAb;AACD,OAtRM,CAwRP;;;AACA,UAAItB,MAAM,GAAGxG,MAAM,CAACiB,MAAP,CAAcuF,MAA3B,CAzRO,CA2RP;;AACA,UAAI,CAACA,MAAD,IAAWsB,UAAU,CAAC3D,MAA1B,EAAkC;AAChCqC,QAAAA,MAAM,GAAGsB,UAAT;AACD;;AACD,UAAItB,MAAM,IAAIA,MAAM,CAACrC,MAArB,EAA6B;AAC3BxD,QAAAA,QAAQ,CAACwE,sBAAT,CAAgC,SAAhC,EAA2CmB,KAA3C,GAAmDE,MAAnD;AACA3C,QAAAA,YAAY,CAACC,OAAb,CAAqB/D,UAAU,CAAC6B,kBAAhC,EAAoD4E,MAApD,EAF2B,CAI3B;;AACA,SAAC,SAASwB,mBAAT,GAA+B;AAC9BjI,UAAAA,UAAU,CAACkI,aAAX,CAAyBzB,MAAzB,EAAiC,UAASM,WAAT,EAAsB;AACrD,gBAAIA,WAAJ,EAAiB;AACf/G,cAAAA,UAAU,CAACiF,IAAX,CAAgBwB,MAAhB;AACA;AACD;;AACD0B,YAAAA,UAAU,CAACF,mBAAD,EAAsB,IAAtB,CAAV;AACD,WAND;AAOD,SARD;;AASA/C,QAAAA,mBAAmB;AACpB,OA9SM,CAgTP;;;AACA,UACEQ,SAAS,CAAC1F,UAAV,IACA0F,SAAS,CAAC1F,UAAV,CAAqBsD,IAArB,KAA8B,UAD9B,IAEAoC,SAAS,CAAC1F,UAAV,CAAqBoI,WAArB,IAAoC,KAHtC,EAIE;AACAvD,QAAAA,KAAK,CAAC,4DAAD,CAAL;AACD;;AAED,UAAMwD,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBC,QAAAA,KAAK,CAAC,8CAAD,CAAL,CACGtC,IADH,CACQ,UAAAuC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,SADhB,EAEGxC,IAFH,CAEQ,UAAAwC,IAAI,EAAI;AACZ7F,UAAAA,OAAO,CAACC,GAAR,CAAY4F,IAAZ;;AACA,UAAA,MAAI,CAACC,QAAL,CAAc;AAAE/H,YAAAA,KAAK,EAAE8H;AAAT,WAAd;AACD,SALH;AAMD,OAPD;;AASA,aACE,oBAAC,UAAD;AAAY,QAAA,EAAE,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAE;AAAE/E,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,kBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,SAFL;AAGE,QAAA,SAAS,EAAC,SAHZ;AAIE,QAAA,WAAW,EAAC,KAJd;AAKE,QAAA,cAAc,EAAC,KALjB;AAME,QAAA,IAAI,EAAC,IANP;AAOE,QAAA,YAAY,EAAC,QAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAWE;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,OAAO,EAAE4C,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAXF,CADF,EAuBE;AAAK,QAAA,EAAE,EAAC,WAAR;AAAoB,QAAA,KAAK,EAAE;AAAE5C,UAAAA,KAAK,EAAE;AAAT,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBF,EAwBE;AAAK,QAAA,EAAE,EAAC,iBAAR;AAA0B,QAAA,KAAK,EAAE;AAAEiF,UAAAA,UAAU,EAAE;AAAd,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEL,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADF,CADF,EAME;AAAK,QAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHANF,CAxBF,EAgCE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgB,KAAK5H,KAAL,CAAWC,KAAX,CAAiBiI,KAAjC,CAhCF,CADF;AAoCD;AAhYH;;AAAA;AAAA,EAA+BhJ,SAA/B;AAmYA,eAAea,SAAf","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport \"./webrtc.style.css\";\r\nimport { getHTMLMediaElement } from \"./getHTMLMediaElement\";\r\nimport axios from \"axios\";\r\nimport * as service from \"./post\";\r\nvar connection = new window.RTCMultiConnection();\r\n\r\nconnection.autoCloseEntireSession = true;\r\n// connection.publicRoomIdentifier = window.params.publicRoomIdentifier;\r\n\r\n// FIXME: 우리 소켓링크로 연결 변경\r\nconnection.socketURL = \"https://rtcmulticonnection.herokuapp.com:443/\";\r\n\r\nconst VideoFrame = styled.div`\r\n  padding-left: 50px;\r\n  padding-top: 19px;\r\n  padding-right: 50px;\r\n  width: 100%;\r\n`;\r\nconst EmotionStatus = styled.div`\r\n  position: fixed;\r\n  top: 80%;\r\n  width: 50%;\r\n  text-align: center;\r\n  display: inline-block;\r\n  background: black;\r\n  color: white;\r\n  font-size: 15px;\r\n  opacity: 0.4;\r\n  border-radius: 45px;\r\n`;\r\n\r\nexport class VideoItem extends Component {\r\n  //FIXME:state값 추가함\r\n  state = { dummy: [] };\r\n  componentWillMount() {\r\n    const script = document.createElement(\"script\");\r\n\r\n    script.src = \"https://cdn.webrtc-experiment.com/RTCMultiConnection.js\";\r\n    script.src = \"https://cdn.webrtc-experiment.com/conversation.js\";\r\n\r\n    script.src =\r\n      \"https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js\";\r\n    script.src =\r\n      \"https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js\";\r\n    script.src =\r\n      \"https://rtcmulticonnection.herokuapp.com/node_modules/webrtc-adapter/out/adapter.js\";\r\n    script.src = \"./getHTMLMediaElement.jsx\";\r\n\r\n    script.src = \"https://cdn.WebRTC-Experiment.com/getScreenId.js\";\r\n    script.src = \"https://webrtc.github.io/adapter/adapter-latest.js\";\r\n\r\n    script.async = true;\r\n\r\n    document.body.appendChild(script);\r\n  }\r\n  componentDidMount() {}\r\n  state = { dummy: [] };\r\n  render() {\r\n    (function() {\r\n      var params = {},\r\n        r = /([^&=]+)=?([^&]*)/g;\r\n      function d(s) {\r\n        return decodeURIComponent(s.replace(/\\+/g, \" \"));\r\n      }\r\n      var match,\r\n        search = window.location.search;\r\n      while ((match = r.exec(search.substring(1))))\r\n        params[d(match[1])] = d(match[2]);\r\n      window.params = params;\r\n    })();\r\n\r\n    // if you want audio+video conferencing\r\n    connection.socketMessageEvent = \"video-conference-demo\";\r\n\r\n    connection.session = {\r\n      audio: true,\r\n      video: true\r\n    };\r\n    connection.sdpConstraints.mandatory = {\r\n      OfferToReceiveAudio: true,\r\n      OfferToReceiveVideo: true\r\n    };\r\n\r\n    connection.onstream = function(event) {\r\n      //connection1\r\n      connection.videosContainer = document.getElementById(\"videos-container\");\r\n      var video = document.createElement(\"video\");\r\n      // var video = event.mediaElement;\r\n      video.id = event.streamid;\r\n\r\n      console.log(\"onstream 정상 작동 중\");\r\n\r\n      var existing = document.getElementById(event.streamid);\r\n      // if (existing && existing.parentNode) {\r\n      //   existing.parentNode.removeChild(existing);\r\n      // }\r\n      event.mediaElement.removeAttribute(\"src\");\r\n      event.mediaElement.removeAttribute(\"srcObject\");\r\n      event.mediaElement.muted = true;\r\n      event.mediaElement.volume = 0;\r\n\r\n      try {\r\n        video.setAttributeNode(document.createAttribute(\"autoplay\"));\r\n        video.setAttributeNode(document.createAttribute(\"playsinline\"));\r\n      } catch (e) {\r\n        video.setAttribute(\"autoplay\", true);\r\n        video.setAttribute(\"playsinline\", true);\r\n      }\r\n\r\n      if (event.type === \"local\") {\r\n        video.volume = 0;\r\n        try {\r\n          video.setAttributeNode(document.createAttribute(\"muted\"));\r\n        } catch (e) {\r\n          video.setAttribute(\"muted\", true);\r\n        }\r\n      }\r\n\r\n      video.srcObject = event.stream;\r\n\r\n      var width = 400;\r\n      var height = 1000;\r\n      video.width = width;\r\n\r\n      video.buttons = \"full-screen\";\r\n      video.style.marginLeft = \"16px\";\r\n\r\n      connection.videosContainer.appendChild(video);\r\n\r\n      //FIXME: 이 부분 제거해야함.\r\n      // var mediaElement = getHTMLMediaElement(video, {\r\n      //   title: event.userid,\r\n      //   buttons: [\"full-screen\"],\r\n      //   width: width,\r\n      //   height: height,\r\n      //   showOnMouseEnter: false\r\n      // });\r\n\r\n      // setTimeout(function() {\r\n      //   mediaElement.media.play();\r\n      // }, 5000);\r\n\r\n      // mediaElement.id = event.streamid;\r\n      // to keep room-id in cache\r\n      localStorage.setItem(connection.socketMessageEvent, connection.sessionid);\r\n      if (event.type === \"local\") {\r\n        connection.socket.on(\"disconnect\", function() {\r\n          if (!connection.getAllParticipants().length) {\r\n            window.location.reload();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    //connection2\r\n    connection.onstreamended = function(event) {\r\n      var mediaElement = document.getElementById(event.streamid);\r\n      if (mediaElement) {\r\n        mediaElement.parentNode.removeChild(mediaElement);\r\n      }\r\n    };\r\n    connection.onMediaError = function(e) {\r\n      if (e.message === \"Concurrent mic process limit.\") {\r\n        if (window.DetectRTC.audioInputDevices.length <= 1) {\r\n          alert(\r\n            \"Please select external microphone. Check github issue number 483.\"\r\n          );\r\n          return;\r\n        }\r\n        var secondaryMic = window.DetectRTC.audioInputDevices[1].deviceId;\r\n        connection.mediaConstraints.audio = {\r\n          deviceId: secondaryMic\r\n        };\r\n        connection.join(connection.sessionid);\r\n      }\r\n    };\r\n\r\n    const disableInputButtons = enable => {\r\n      // document.getElementById(\"room-id\").onkeyup();\r\n\r\n      document.getElementsByClassName(\"open-or-join-room\").disabled = !enable;\r\n      document.getElementsByClassName(\"open-room\").disabled = !enable;\r\n      document.getElementsByClassName(\"join-room\").disabled = !enable;\r\n      document.getElementsByClassName(\"room-id\").disabled = !enable;\r\n    };\r\n\r\n    //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\r\n    //화면  공유 기능\r\n    const getScreenId = (error, sourceId, screen_constraints) => {\r\n      if (\r\n        navigator.userAgent.indexOf(\"Edge\") !== -1 &&\r\n        (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)\r\n      ) {\r\n        navigator.getDisplayMedia(screen_constraints).then(\r\n          stream => {\r\n            document.querySelector(\"video\").srcObject = stream;\r\n          },\r\n          error => {\r\n            alert(\"Please make sure to use Edge 17 or higher.\");\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\r\n      //chrome extension 설치 여부 detection\r\n      // const getChromeExtensionStatus = status => {\r\n      //   if (status === \"installed-enabled\") alert(\"installed\");\r\n      //   if (status === \"installed-disabled\") alert(\"installed but disabled\");\r\n      //   // etc.\r\n      // };\r\n\r\n      navigator.mediaDevices\r\n        .getUserMedia(screen_constraints)\r\n        .then(function(stream) {\r\n          document.querySelector(\"video\").srcObject = stream;\r\n\r\n          // share this \"MediaStream\" object using RTCPeerConnection API\r\n        })\r\n        .catch(function(error) {\r\n          console.error(error);\r\n        });\r\n    };\r\n\r\n    /*신규 화상회의 방 개설하기 */\r\n    const openRoom = () => {\r\n      disableInputButtons();\r\n      connection.open(document.getElementById(\"room-id\").value, function(\r\n        isRoomOpened,\r\n        roomid,\r\n        error\r\n      ) {\r\n        if (isRoomOpened === true) {\r\n          showRoomURL(connection.sessionid);\r\n          //FIXME:state값 추가함\r\n          // this.state.isRoomAppear = true;\r\n        } else {\r\n          disableInputButtons(true);\r\n          if (error === \"Room not available\") {\r\n            alert(\r\n              \"이미 개설된 방입니다. 참여하기 버튼을 누르거나 새로운 방을 개설해주세요.\"\r\n            );\r\n            return;\r\n          }\r\n          alert(error);\r\n        }\r\n      });\r\n    };\r\n\r\n    /*기존 개설된 화상회의 방 들어가기 */\r\n    const joinRoom = () => {\r\n      disableInputButtons();\r\n      connection.join(document.getElementById(\"room-id\").value, function(\r\n        isJoinedRoom,\r\n        roomid,\r\n        error\r\n      ) {\r\n        if (error) {\r\n          disableInputButtons(true);\r\n          if (error === \"Room not available\") {\r\n            alert(\"현재 이 방은 존재하지 않는 방입니다.\");\r\n            return;\r\n          }\r\n          alert(error);\r\n        }\r\n      });\r\n    };\r\n\r\n    /*신규 화상회의방 개설하고 들어가기 */\r\n    const openOrJoinRoom = () => {\r\n      disableInputButtons();\r\n      connection.openOrJoin(\r\n        document.getElementById(\"room-id\".value, function(\r\n          isRoomExist,\r\n          roomid,\r\n          error\r\n        ) {\r\n          if (error) {\r\n            disableInputButtons(true);\r\n            alert(error);\r\n          } else if (connection.isInitiator === true) {\r\n            showRoomURL(roomid);\r\n          }\r\n        })\r\n      );\r\n    };\r\n    const onRekog = () => {\r\n      //TODO: 여기에 액션 채우면 됩니다.\r\n      console.log(\"예지만세\");\r\n    };\r\n\r\n    const showRoomURL = roomid => {\r\n      var roomHashURL = \"#\" + roomid;\r\n      var roomQueryStringURL = \"?roomid=\" + roomid;\r\n      var html = \"<h2>Unique URL for your room:</h2><br>\";\r\n      html +=\r\n        'Hash URL: <a href=\"' +\r\n        roomHashURL +\r\n        '\" target=\"_blank\">' +\r\n        roomHashURL +\r\n        \"</a>\";\r\n      html += \"<br>\";\r\n      html +=\r\n        'QueryString URL: <a href=\"' +\r\n        roomQueryStringURL +\r\n        '\" target=\"_blank\">' +\r\n        roomQueryStringURL +\r\n        \"</a>\";\r\n      var roomURLsDiv = document.getElementById(\"room-urls\");\r\n      roomURLsDiv.innerHTML = html;\r\n      roomURLsDiv.style.display = \"block\";\r\n      //FIXME:state값 추가함\r\n      // this.state.roomToken = roomQueryStringURL;\r\n      // this.state.roomKey = html;\r\n      this.state.roomToken = roomQueryStringURL;\r\n    };\r\n\r\n    //roomid setting 부분\r\n    var roomid = \"\";\r\n    if (localStorage.getItem(connection.socketMessageEvent)) {\r\n      roomid = localStorage.getItem(connection.socketMessageEvent);\r\n    } else {\r\n      roomid = connection.token();\r\n    }\r\n    var txtRoomId = document.getElementsByClassName(\"room-id\"); //FIXME:className으로 해야 작동이 되나 원래는 id로 해야함. 둘의 차이를 잘 모르겠음.\r\n\r\n    txtRoomId.value = roomid; //FIXME:\r\n    txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function() {\r\n      localStorage.setItem(\r\n        connection.socketMessageEvent,\r\n        document.getElementById(\"room-id\").value\r\n      );\r\n    };\r\n    var hashString = window.location.hash.replace(\"#\", \"\");\r\n    if (hashString.length && hashString.indexOf(\"comment-\") === 0) {\r\n      hashString = \"\";\r\n    }\r\n\r\n    //TODO: roomid를 직접 받아와야하는 부분\r\n    var roomid = window.params.roomid;\r\n\r\n    // var roomid = params.roomid; //FIXME:\r\n    if (!roomid && hashString.length) {\r\n      roomid = hashString;\r\n    }\r\n    if (roomid && roomid.length) {\r\n      document.getElementsByClassName(\"room-id\").value = roomid;\r\n      localStorage.setItem(connection.socketMessageEvent, roomid);\r\n\r\n      // auto-join-room\r\n      (function reCheckRoomPresence() {\r\n        connection.checkPresence(roomid, function(isRoomExist) {\r\n          if (isRoomExist) {\r\n            connection.join(roomid);\r\n            return;\r\n          }\r\n          setTimeout(reCheckRoomPresence, 5000);\r\n        });\r\n      })();\r\n      disableInputButtons();\r\n    }\r\n\r\n    // detect 2G\r\n    if (\r\n      navigator.connection &&\r\n      navigator.connection.type === \"cellular\" &&\r\n      navigator.connection.downlinkMax <= 0.115\r\n    ) {\r\n      alert(\"2G is not supported. Please use a better internet service.\");\r\n    }\r\n\r\n    const getPost = () => {\r\n      fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          console.log(json);\r\n          this.setState({ dummy: json });\r\n        });\r\n    };\r\n\r\n    return (\r\n      <VideoFrame id=\"video-home-container\">\r\n        <div style={{ width: \"100%\" }}>\r\n          <div id=\"videos-container\" />\r\n          <input\r\n            type=\"text\"\r\n            id=\"room-id\"\r\n            className=\"room-id\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize=\"off\"\r\n            size=\"20\"\r\n            defaultValue=\"abcded\"\r\n          />\r\n          <button className=\"open-room\" onClick={openRoom}>\r\n            회의실 개설하기\r\n          </button>\r\n          {/* <button className=\"join-room\" onClick={joinRoom}>\r\n            회의실 참여하기\r\n          </button>\r\n          <button className=\"open-or-join-room\" onClick={openOrJoinRoom}>\r\n            회의실 개설/참여하기\r\n          </button> */}\r\n        </div>\r\n\r\n        <div id=\"room-urls\" style={{ width: \"100%\" }} />\r\n        <div id=\"image-container\" style={{ background: \"pink\" }}>\r\n          <form>\r\n            <button type=\"button\" onClick={getPost}>\r\n              지금부터 감정인식 시작\r\n            </button>\r\n          </form>\r\n          <div id=\"show-image\">여기는 이미지를 보여주는 공간입니다.</div>\r\n        </div>\r\n        <EmotionStatus>{this.state.dummy.title}</EmotionStatus>\r\n      </VideoFrame>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoItem;\r\n"]},"metadata":{},"sourceType":"module"}