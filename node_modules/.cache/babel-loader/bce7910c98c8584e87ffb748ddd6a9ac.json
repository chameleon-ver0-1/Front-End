{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport _Suggestions from '../component/Suggestions.react';\nimport SuggestionPortal from '../component/SuggestionPortal.react';\nimport MentionContent from '../component/MentionContent.react';\nimport mentionStore from '../model/mentionStore';\nimport exportContent from './exportContent';\nimport getRegExp from '../utils/getRegExp';\n\nfunction findWithRegex(regex, contentBlock, callback) {\n  // Get the text from the contentBlock\n  var text = contentBlock.getText();\n  var matchArr = void 0;\n  var start = void 0; // eslint-disable-line\n\n  var end = void 0; // Go through all matches in the text and return the indizes to the callback\n\n  while ((matchArr = regex.exec(text)) !== null) {\n    // eslint-disable-line\n    start = matchArr.index;\n    end = start + matchArr[0].length;\n    callback(start, end);\n    if (start === end) break;\n  }\n}\n\nfunction mentionContentStrategy(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(function (character) {\n    var entityKey = character.getEntity();\n    return entityKey && contentState.getEntity(entityKey).getType() === 'mention';\n  }, callback);\n}\n\nfunction noop() {}\n\nvar MentionContentComponent = function MentionContentComponent(props) {\n  var entityKey = props.entityKey,\n      tag = props.tag,\n      callbacks = props.callbacks;\n  var contentState = callbacks.getEditorState().getCurrentContent();\n  var data = contentState.getEntity(entityKey).getData();\n  return React.createElement(tag, _extends({}, props, {\n    data: data\n  }));\n};\n\nexport default function createMention() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var callbacks = {\n    onChange: noop,\n    onUpArrow: noop,\n    onDownArrow: noop,\n    getEditorState: noop,\n    setEditorState: noop,\n    handleReturn: noop,\n    onBlur: noop\n  };\n  var componentProps = {\n    callbacks: callbacks,\n    mentionStore: mentionStore\n  };\n  var suggestionRegex = getRegExp(config.prefix);\n  var tag = config.tag || MentionContent;\n  var decorators = [{\n    strategy: function strategy(contentBlock, callback) {\n      findWithRegex(suggestionRegex, contentBlock, callback);\n    },\n    component: function component(props) {\n      return React.createElement(SuggestionPortal, _extends({}, props, componentProps, {\n        style: config.mentionStyle,\n        suggestionRegex: getRegExp(config.prefix)\n      }));\n    }\n  }];\n\n  if (config.mode === 'immutable') {\n    decorators.unshift({\n      strategy: mentionContentStrategy,\n      component: function component(props) {\n        return React.createElement(MentionContentComponent, _extends({\n          tag: tag\n        }, props, {\n          callbacks: callbacks\n        }));\n      }\n    });\n  }\n\n  return {\n    name: 'mention',\n    Suggestions: function Suggestions(props) {\n      return React.createElement(_Suggestions, _extends({}, props, componentProps, {\n        store: mentionStore\n      }));\n    },\n    decorators: decorators,\n    onChange: function onChange(editorState) {\n      return callbacks.onChange ? callbacks.onChange(editorState) : editorState;\n    },\n    callbacks: callbacks,\n    'export': exportContent\n  };\n}","map":null,"metadata":{},"sourceType":"module"}