{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React, { createContext } from \"react\";\nimport Portal from \"@reach/portal\";\nimport { Link } from \"@reach/router\";\nimport Rect from \"@reach/rect\";\nimport WindowSize from \"@reach/window-size\";\nimport Component from \"@reach/component-component\";\nimport { node, func, object, string, number, oneOfType } from \"prop-types\";\nimport { wrapEvent, checkStyles } from \"@reach/utils\";\n\nvar _createContext = createContext(),\n    Provider = _createContext.Provider,\n    Consumer = _createContext.Consumer;\n\nvar checkIfAppManagedFocus = function checkIfAppManagedFocus(_ref) {\n  var refs = _ref.refs,\n      state = _ref.state,\n      prevState = _ref.prevState;\n\n  if (!state.isOpen && prevState.isOpen) {\n    return !refs.menu.contains(document.activeElement);\n  }\n\n  return false;\n};\n\nvar manageFocusOnUpdate = function manageFocusOnUpdate(_ref2, appManagedFocus) {\n  var refs = _ref2.refs,\n      state = _ref2.state,\n      prevState = _ref2.prevState;\n\n  if (state.isOpen && !prevState.isOpen) {\n    if (state.selectionIndex !== -1) {\n      // haven't measured the popover yet, give it a frame otherwise\n      // we'll scroll to the bottom of the page >.<\n      requestAnimationFrame(function () {\n        refs.items[state.selectionIndex].focus();\n      });\n    } else {\n      refs.menu.focus();\n    }\n  } else if (!state.isOpen && prevState.isOpen) {\n    if (!appManagedFocus) {\n      refs.button.focus();\n    }\n  } else if (state.selectionIndex !== prevState.selectionIndex) {\n    if (state.selectionIndex === -1) {\n      // clear highlight when mousing over non-menu items, but focus the menu\n      // so the the keyboard will work after a mouseover\n      refs.menu.focus();\n    } else {\n      refs.items[state.selectionIndex].focus();\n    }\n  }\n};\n\nvar openAtFirstItem = function openAtFirstItem(state) {\n  return {\n    isOpen: true,\n    selectionIndex: 0\n  };\n};\n\nvar close = function close(state) {\n  return {\n    isOpen: false,\n    selectionIndex: -1,\n    closingWithClick: false\n  };\n};\n\nvar selectItemAtIndex = function selectItemAtIndex(index) {\n  return function (state) {\n    return {\n      selectionIndex: index\n    };\n  };\n};\n\nvar genId = function genId(prefix) {\n  return prefix + \"-\" + Math.random().toString(32).substr(2, 8);\n}; ////////////////////////////////////////////////////////////////////////\n\n\nvar getMenuRefs = function getMenuRefs() {\n  return {\n    button: null,\n    menu: null,\n    items: []\n  };\n};\n\nvar getInitialMenuState = function getInitialMenuState() {\n  return {\n    isOpen: false,\n    buttonRect: undefined,\n    selectionIndex: -1,\n    closingWithClick: false,\n    buttonId: genId(\"button\")\n  };\n};\n\nvar checkIfStylesIncluded = function checkIfStylesIncluded() {\n  return checkStyles(\"menu-button\");\n};\n\nvar Menu = function Menu(_ref3) {\n  var children = _ref3.children;\n  return React.createElement(Component, {\n    getRefs: getMenuRefs,\n    getInitialState: getInitialMenuState,\n    didMount: checkIfStylesIncluded,\n    didUpdate: manageFocusOnUpdate,\n    getSnapshotBeforeUpdate: checkIfAppManagedFocus\n  }, function (context) {\n    return React.createElement(Provider, {\n      value: context\n    }, typeof children === \"function\" ? children({\n      isOpen: context.state.isOpen\n    }) : children);\n  });\n};\n\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  children: oneOfType([func, node])\n} : void 0; ////////////////////////////////////////////////////////////////////////\n\nvar MenuButton = React.forwardRef(function (_ref4, _ref7) {\n  var onClick = _ref4.onClick,\n      onKeyDown = _ref4.onKeyDown,\n      props = _objectWithoutProperties(_ref4, [\"onClick\", \"onKeyDown\"]);\n\n  return React.createElement(Consumer, null, function (_ref5) {\n    var refs = _ref5.refs,\n        state = _ref5.state,\n        setState = _ref5.setState;\n    return React.createElement(Rect, {\n      observe: state.isOpen,\n      onChange: function onChange(buttonRect) {\n        return setState({\n          buttonRect: buttonRect\n        });\n      }\n    }, function (_ref6) {\n      var rectRef = _ref6.ref;\n      return React.createElement(\"button\", _extends({\n        id: state.buttonId,\n        \"aria-haspopup\": \"menu\",\n        \"aria-expanded\": state.isOpen,\n        \"data-reach-menu-button\": true,\n        type: \"button\",\n        ref: function ref(node) {\n          rectRef(node);\n          _ref7 && _ref7(node);\n          refs.button = node;\n        },\n        onMouseDown: function onMouseDown(event) {\n          if (state.isOpen) {\n            setState({\n              closingWithClick: true\n            });\n          }\n        },\n        onClick: wrapEvent(onClick, function (event) {\n          if (state.isOpen) {\n            setState(close);\n          } else {\n            setState(openAtFirstItem);\n          }\n        }),\n        onKeyDown: wrapEvent(onKeyDown, function (event) {\n          if (event.key === \"ArrowDown\") {\n            event.preventDefault(); // prevent scroll\n\n            setState(openAtFirstItem);\n          } else if (event.key === \"ArrowUp\") {\n            event.preventDefault(); // prevent scroll\n\n            setState(openAtFirstItem);\n          }\n        })\n      }, props));\n    });\n  });\n});\nMenuButton.propTypes = {\n  onClick: func,\n  onKeyDown: func,\n  children: node\n};\nvar MenuItem = React.forwardRef(function (_ref8, _ref9) {\n  var onSelect = _ref8.onSelect,\n      onClick = _ref8.onClick,\n      _ref8$role = _ref8.role,\n      role = _ref8$role === undefined ? \"menuitem\" : _ref8$role,\n      state = _ref8.state,\n      setState = _ref8.setState,\n      index = _ref8.index,\n      onKeyDown = _ref8.onKeyDown,\n      onMouseMove = _ref8.onMouseMove,\n      onMouseLeave = _ref8.onMouseLeave,\n      _ref = _ref8._ref,\n      rest = _objectWithoutProperties(_ref8, [\"onSelect\", \"onClick\", \"role\", \"state\", \"setState\", \"index\", \"onKeyDown\", \"onMouseMove\", \"onMouseLeave\", \"_ref\"]);\n\n  var isSelected = index === state.selectionIndex;\n\n  var select = function select() {\n    onSelect();\n    setState(close);\n  };\n\n  return React.createElement(\"div\", _extends({}, rest, {\n    ref: function ref(node) {\n      _ref9 && _ref9(node);\n\n      _ref(node);\n    },\n    \"data-reach-menu-item\": role === \"menuitem\" ? true : undefined,\n    role: role,\n    tabIndex: \"-1\",\n    \"data-selected\": role === \"menuitem\" && isSelected ? true : undefined,\n    onClick: wrapEvent(onClick, function (event) {\n      select();\n    }),\n    onKeyDown: wrapEvent(onKeyDown, function (event) {\n      if (event.key === \"Enter\") {\n        // prevent the button from being \"clicked\" by\n        // this \"Enter\" keydown\n        event.preventDefault();\n        select();\n      }\n    }),\n    onMouseMove: wrapEvent(onMouseMove, function (event) {\n      if (!isSelected) {\n        setState(selectItemAtIndex(index));\n      }\n    }),\n    onMouseLeave: wrapEvent(onMouseLeave, function (event) {\n      // clear out selection when mouse over a non-menu item child\n      setState({\n        selectionIndex: -1\n      });\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes = {\n  onSelect: func.isRequired,\n  onClick: func,\n  role: string,\n  state: object,\n  setState: func,\n  index: number,\n  onKeyDown: func,\n  onMouseMove: func,\n  _ref: func\n} : void 0;\n\nvar k = function k() {}; ////////////////////////////////////////////////////////////////////////\n\n\nvar MenuLink = React.forwardRef(function (_ref10, _ref11) {\n  var onKeyDown = _ref10.onKeyDown,\n      onClick = _ref10.onClick,\n      _ref10$component = _ref10.component,\n      Comp = _ref10$component === undefined ? Link : _ref10$component,\n      style = _ref10.style,\n      setState = _ref10.setState,\n      state = _ref10.state,\n      index = _ref10.index,\n      _ref = _ref10._ref,\n      props = _objectWithoutProperties(_ref10, [\"onKeyDown\", \"onClick\", \"component\", \"style\", \"setState\", \"state\", \"index\", \"_ref\"]);\n\n  return React.createElement(MenuItem, {\n    role: \"none\",\n    state: state,\n    setState: setState,\n    index: index,\n    onSelect: k,\n    _ref: k\n  }, React.createElement(Comp, _extends({\n    role: \"menuitem\",\n    \"data-reach-menu-item\": true,\n    tabIndex: \"-1\",\n    \"data-selected\": index === state.selectionIndex ? true : undefined,\n    onClick: wrapEvent(onClick, function (event) {\n      setState(close);\n    }),\n    onKeyDown: wrapEvent(onKeyDown, function (event) {\n      if (event.key === \"Enter\") {\n        // prevent MenuItem's preventDefault from firing,\n        // allowing this link to work w/ the keyboard\n        event.stopPropagation();\n      }\n    }),\n    ref: function ref(node) {\n      _ref(node);\n\n      _ref11 && _ref11(node);\n    },\n    style: _extends({}, style)\n  }, props)));\n});\nMenuLink.propTypes = {\n  onKeyDown: func,\n  onClick: func,\n  component: oneOfType([string, node]),\n  style: object,\n  setState: func,\n  state: object,\n  index: number,\n  _ref: func\n}; ///////////////////////////////////////////////////////////////////\n\nvar MenuList = React.forwardRef(function (props, ref) {\n  return React.createElement(Consumer, null, function (_ref12) {\n    var refs = _ref12.refs,\n        state = _ref12.state,\n        setState = _ref12.setState;\n    return state.isOpen && React.createElement(Portal, null, React.createElement(WindowSize, null, function () {\n      return React.createElement(Rect, null, function (_ref13) {\n        var menuRect = _ref13.rect,\n            menuRef = _ref13.ref;\n        return React.createElement(\"div\", {\n          \"data-reach-menu\": true,\n          ref: menuRef,\n          style: getStyles(state.buttonRect, menuRect)\n        }, React.createElement(MenuListImpl, _extends({}, props, {\n          setState: setState,\n          state: state,\n          refs: refs,\n          ref: ref\n        })));\n      });\n    }));\n  });\n});\nMenuList.propTypes = {\n  children: node\n};\nvar focusableChildrenTypes = [MenuItem, MenuLink];\n\nvar isFocusableChildType = function isFocusableChildType(child) {\n  return focusableChildrenTypes.includes(child.type);\n};\n\nvar getFocusableMenuChildren = function getFocusableMenuChildren(children) {\n  return children.filter(function (child) {\n    return isFocusableChildType(child);\n  });\n};\n\nvar MenuListImpl = React.forwardRef(function (_ref14, _ref15) {\n  var refs = _ref14.refs,\n      state = _ref14.state,\n      setState = _ref14.setState,\n      children = _ref14.children,\n      onKeyDown = _ref14.onKeyDown,\n      onBlur = _ref14.onBlur,\n      rest = _objectWithoutProperties(_ref14, [\"refs\", \"state\", \"setState\", \"children\", \"onKeyDown\", \"onBlur\"]);\n\n  var focusableChildren = getFocusableMenuChildren(children);\n  return React.createElement(\"div\", _extends({\n    \"data-reach-menu-list\": true\n  }, rest, {\n    role: \"menu\",\n    \"aria-labelledby\": state.buttonId,\n    tabIndex: \"-1\",\n    ref: function ref(node) {\n      refs.menu = node;\n      _ref15 && _ref15(node);\n    },\n    onBlur: function onBlur(event) {\n      if (!state.closingWithClick && !refs.menu.contains(event.relatedTarget)) {\n        setState(close);\n      }\n    },\n    onKeyDown: wrapEvent(onKeyDown, function (event) {\n      if (event.key === \"Escape\") {\n        setState(close);\n      } else if (event.key === \"ArrowDown\") {\n        event.preventDefault(); // prevent window scroll\n\n        var nextIndex = state.selectionIndex + 1;\n\n        if (nextIndex !== focusableChildren.length) {\n          setState({\n            selectionIndex: nextIndex\n          });\n        }\n      } else if (event.key === \"ArrowUp\") {\n        event.preventDefault(); // prevent window scroll\n\n        var _nextIndex = state.selectionIndex - 1;\n\n        if (_nextIndex !== -1) {\n          setState({\n            selectionIndex: _nextIndex\n          });\n        }\n      } else if (event.key === \"Tab\") {\n        event.preventDefault(); // prevent leaving\n      }\n    })\n  }), React.Children.map(children, function (child, index) {\n    if (isFocusableChildType(child)) {\n      var focusIndex = focusableChildren.indexOf(child);\n      return React.cloneElement(child, {\n        setState: setState,\n        state: state,\n        index: focusIndex,\n        _ref: function _ref(node) {\n          return refs.items[focusIndex] = node;\n        }\n      });\n    }\n\n    return child;\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuListImpl.propTypes = {\n  refs: object,\n  state: object,\n  setState: func,\n  children: node,\n  onKeyDown: func,\n  onBlur: func\n} : void 0;\n\nvar getStyles = function getStyles(buttonRect, menuRect) {\n  var haventMeasuredButtonYet = !buttonRect;\n\n  if (haventMeasuredButtonYet) {\n    return {\n      opacity: 0\n    };\n  }\n\n  var haventMeasuredMenuYet = !menuRect;\n  var styles = {\n    left: buttonRect.left + window.scrollX + \"px\",\n    top: buttonRect.top + buttonRect.height + window.scrollY + \"px\"\n  };\n\n  if (haventMeasuredMenuYet) {\n    return _extends({}, styles, {\n      opacity: 0\n    });\n  }\n\n  if (buttonRect.width < 500) {\n    styles.minWidth = buttonRect.width;\n  }\n\n  var collisions = {\n    top: buttonRect.top - menuRect.height < 0,\n    right: window.innerWidth < buttonRect.left + menuRect.width,\n    bottom: window.innerHeight < buttonRect.top + menuRect.height,\n    left: buttonRect.left - menuRect.width < 0\n  };\n  var directionRight = collisions.right && !collisions.left;\n  var directionUp = collisions.bottom && !collisions.top;\n  return _extends({}, styles, {\n    left: directionRight ? buttonRect.right - menuRect.width + window.scrollX + \"px\" : buttonRect.left + window.scrollX + \"px\",\n    top: directionUp ? buttonRect.top - menuRect.height + window.scrollY + \"px\" : buttonRect.top + buttonRect.height + window.scrollY + \"px\"\n  });\n};\n\nexport { Menu, MenuList, MenuButton, MenuLink, MenuItem };","map":null,"metadata":{},"sourceType":"module"}