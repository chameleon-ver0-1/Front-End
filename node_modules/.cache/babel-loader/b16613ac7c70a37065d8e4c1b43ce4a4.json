{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar discount_lodash_1 = require(\"../discount_lodash\");\n/**\n * Provides a set of static methods for creating Disposables.\n * @param {Function} action Action to run during the first call to dispose.\n * The action is guaranteed to be run at most once.\n */\n\n\nvar Disposable =\n/** @class */\nfunction () {\n  function Disposable(action) {\n    this.isDisposed = false;\n    this.action = discount_lodash_1.isFunction(action) ? action : discount_lodash_1.noop;\n  }\n  /**\n   * Validates whether the given object is a disposable\n   * @param {Object} Object to test whether it has a dispose method\n   * @returns {Boolean} true if a disposable object, else false.\n   */\n\n\n  Disposable.isDisposable = function (d) {\n    return d && discount_lodash_1.isFunction(d.dispose);\n  };\n\n  Disposable._fixup = function (result) {\n    return Disposable.isDisposable(result) ? result : Disposable.empty;\n  };\n  /**\n   * Creates a disposable object that invokes the specified action when disposed.\n   * @param {Function} dispose Action to run during the first call to dispose.\n   * The action is guaranteed to be run at most once.\n   * @return {Disposable} The disposable object that runs the given action upon disposal.\n   */\n\n\n  Disposable.create = function (action) {\n    return new Disposable(action);\n  };\n  /** Performs the task of cleaning up resources. */\n\n\n  Disposable.prototype.dispose = function () {\n    if (!this.isDisposed) {\n      this.action();\n      this.isDisposed = true;\n    }\n  };\n  /**\n   * Gets the disposable that does nothing when disposed.\n   */\n\n\n  Disposable.empty = {\n    dispose: discount_lodash_1.noop\n  };\n  return Disposable;\n}();\n\nexports.Disposable = Disposable;","map":null,"metadata":{},"sourceType":"script"}