{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { Option, OptGroup } from 'rc-select';\nimport classNames from 'classnames';\nimport InputElement from './InputElement';\nimport Input from '../input';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).apply(this, arguments));\n\n    _this.getInputElement = function () {\n      var children = _this.props.children;\n      var element = children && React.isValidElement(children) && children.type !== Option ? React.Children.only(_this.props.children) : React.createElement(Input, null);\n\n      var elementProps = _extends({}, element.props); // https://github.com/ant-design/ant-design/pull/7742\n\n\n      delete elementProps.children;\n      return React.createElement(InputElement, elementProps, element);\n    };\n\n    _this.saveSelect = function (node) {\n      _this.select = node;\n    };\n\n    _this.renderAutoComplete = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          size = _this$props.size,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          notFoundContent = _this$props.notFoundContent,\n          optionLabelProp = _this$props.optionLabelProp,\n          dataSource = _this$props.dataSource,\n          children = _this$props.children;\n      var prefixCls = getPrefixCls('select', customizePrefixCls);\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small'), _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-search\"), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-auto-complete\"), true), _classNames));\n      var options;\n      var childArray = React.Children.toArray(children);\n\n      if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {\n        options = children;\n      } else {\n        options = dataSource ? dataSource.map(function (item) {\n          if (React.isValidElement(item)) {\n            return item;\n          }\n\n          switch (_typeof(item)) {\n            case 'string':\n              return React.createElement(Option, {\n                key: item\n              }, item);\n\n            case 'object':\n              return React.createElement(Option, {\n                key: item.value\n              }, item.text);\n\n            default:\n              throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n          }\n        }) : [];\n      }\n\n      return React.createElement(Select, _extends({}, _this.props, {\n        className: cls,\n        mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n        optionLabelProp: optionLabelProp,\n        getInputElement: _this.getInputElement,\n        notFoundContent: notFoundContent,\n        ref: _this.saveSelect\n      }), options);\n    };\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"focus\",\n    value: function focus() {\n      this.select.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.select.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderAutoComplete);\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport { AutoComplete as default };\nAutoComplete.Option = Option;\nAutoComplete.OptGroup = OptGroup;\nAutoComplete.defaultProps = {\n  transitionName: 'slide-up',\n  optionLabelProp: 'children',\n  choiceTransitionName: 'zoom',\n  showSearch: false,\n  filterOption: false\n};","map":null,"metadata":{},"sourceType":"module"}