{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport CollapsePanel from './Panel';\nimport openAnimationFactory from './openAnimationFactory';\nimport classNames from 'classnames';\nimport { isFragment } from 'react-is';\nimport shallowEqual from 'shallowequal';\n\nfunction toArray(activeKey) {\n  var currentActiveKey = activeKey;\n\n  if (!Array.isArray(currentActiveKey)) {\n    currentActiveKey = currentActiveKey ? [currentActiveKey] : [];\n  }\n\n  return currentActiveKey;\n}\n\nvar Collapse = function (_Component) {\n  _inherits(Collapse, _Component);\n\n  function Collapse(props) {\n    _classCallCheck(this, Collapse);\n\n    var _this = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var activeKey = props.activeKey,\n        defaultActiveKey = props.defaultActiveKey;\n    var currentActiveKey = defaultActiveKey;\n\n    if ('activeKey' in props) {\n      currentActiveKey = activeKey;\n    }\n\n    _this.state = {\n      openAnimation: props.openAnimation || openAnimationFactory(props.prefixCls),\n      activeKey: toArray(currentActiveKey)\n    };\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('activeKey' in nextProps) {\n        this.setState({\n          activeKey: toArray(nextProps.activeKey)\n        });\n      }\n\n      if ('openAnimation' in nextProps) {\n        this.setState({\n          openAnimation: nextProps.openAnimation\n        });\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          className = _props.className,\n          style = _props.style,\n          accordion = _props.accordion;\n      var collapseClassName = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, className, !!className), _classNames));\n      return React.createElement('div', {\n        className: collapseClassName,\n        style: style,\n        role: accordion ? 'tablist' : null\n      }, this.getItems());\n    }\n  }]);\n\n  return Collapse;\n}(Component);\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onClickItem = function (key) {\n    var activeKey = _this2.state.activeKey;\n\n    if (_this2.props.accordion) {\n      activeKey = activeKey[0] === key ? [] : [key];\n    } else {\n      activeKey = [].concat(_toConsumableArray(activeKey));\n      var index = activeKey.indexOf(key);\n      var isActive = index > -1;\n\n      if (isActive) {\n        // remove active state\n        activeKey.splice(index, 1);\n      } else {\n        activeKey.push(key);\n      }\n    }\n\n    _this2.setActiveKey(activeKey);\n  };\n\n  this.getNewChild = function (child, index) {\n    if (!child) return null;\n    var activeKey = _this2.state.activeKey;\n    var _props2 = _this2.props,\n        prefixCls = _props2.prefixCls,\n        accordion = _props2.accordion,\n        destroyInactivePanel = _props2.destroyInactivePanel,\n        expandIcon = _props2.expandIcon; // If there is no key provide, use the panel order as default key\n\n    var key = child.key || String(index);\n    var _child$props = child.props,\n        header = _child$props.header,\n        headerClass = _child$props.headerClass,\n        disabled = _child$props.disabled;\n    var isActive = false;\n\n    if (accordion) {\n      isActive = activeKey[0] === key;\n    } else {\n      isActive = activeKey.indexOf(key) > -1;\n    }\n\n    var props = {\n      key: key,\n      panelKey: key,\n      header: header,\n      headerClass: headerClass,\n      isActive: isActive,\n      prefixCls: prefixCls,\n      destroyInactivePanel: destroyInactivePanel,\n      openAnimation: _this2.state.openAnimation,\n      accordion: accordion,\n      children: child.props.children,\n      onItemClick: disabled ? null : _this2.onClickItem,\n      expandIcon: expandIcon\n    };\n    return React.cloneElement(child, props);\n  };\n\n  this.getItems = function () {\n    var children = _this2.props.children;\n    var childList = isFragment(children) ? children.props.children : children;\n    var newChildren = Children.map(childList, _this2.getNewChild); //  ref: https://github.com/ant-design/ant-design/issues/13884\n\n    if (isFragment(children)) {\n      return React.createElement(React.Fragment, null, newChildren);\n    }\n\n    return newChildren;\n  };\n\n  this.setActiveKey = function (activeKey) {\n    if (!('activeKey' in _this2.props)) {\n      _this2.setState({\n        activeKey: activeKey\n      });\n    }\n\n    _this2.props.onChange(_this2.props.accordion ? activeKey[0] : activeKey);\n  };\n};\n\nCollapse.propTypes = {\n  children: PropTypes.any,\n  prefixCls: PropTypes.string,\n  activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  defaultActiveKey: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  openAnimation: PropTypes.object,\n  onChange: PropTypes.func,\n  accordion: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  destroyInactivePanel: PropTypes.bool,\n  expandIcon: PropTypes.func\n};\nCollapse.defaultProps = {\n  prefixCls: 'rc-collapse',\n  onChange: function onChange() {},\n  accordion: false,\n  destroyInactivePanel: false\n};\nCollapse.Panel = CollapsePanel;\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}