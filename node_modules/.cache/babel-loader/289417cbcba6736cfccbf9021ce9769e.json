{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport Trigger from 'rc-trigger';\nimport classNames from 'classnames';\nimport placements from './placements';\nimport { polyfill } from 'react-lifecycles-compat';\n\nvar Dropdown = function (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    if ('visible' in props) {\n      _this.state = {\n        visible: props.visible\n      };\n    } else {\n      _this.state = {\n        visible: props.defaultVisible\n      };\n    }\n\n    return _this;\n  }\n\n  Dropdown.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    if ('visible' in nextProps) {\n      return {\n        visible: nextProps.visible\n      };\n    }\n\n    return null;\n  };\n\n  Dropdown.prototype.getOverlayElement = function getOverlayElement() {\n    var overlay = this.props.overlay;\n    var overlayElement = void 0;\n\n    if (typeof overlay === 'function') {\n      overlayElement = overlay();\n    } else {\n      overlayElement = overlay;\n    }\n\n    return overlayElement;\n  };\n\n  Dropdown.prototype.getMenuElementOrLambda = function getMenuElementOrLambda() {\n    var overlay = this.props.overlay;\n\n    if (typeof overlay === 'function') {\n      return this.getMenuElement;\n    }\n\n    return this.getMenuElement();\n  };\n\n  Dropdown.prototype.getPopupDomNode = function getPopupDomNode() {\n    return this.trigger.getPopupDomNode();\n  };\n\n  Dropdown.prototype.getOpenClassName = function getOpenClassName() {\n    var _props = this.props,\n        openClassName = _props.openClassName,\n        prefixCls = _props.prefixCls;\n\n    if (openClassName !== undefined) {\n      return openClassName;\n    }\n\n    return prefixCls + '-open';\n  };\n\n  Dropdown.prototype.renderChildren = function renderChildren() {\n    var children = this.props.children;\n    var visible = this.state.visible;\n    var childrenProps = children.props ? children.props : {};\n    var childClassName = classNames(childrenProps.className, this.getOpenClassName());\n    return visible && children ? cloneElement(children, {\n      className: childClassName\n    }) : children;\n  };\n\n  Dropdown.prototype.render = function render() {\n    var _props2 = this.props,\n        prefixCls = _props2.prefixCls,\n        transitionName = _props2.transitionName,\n        animation = _props2.animation,\n        align = _props2.align,\n        placement = _props2.placement,\n        getPopupContainer = _props2.getPopupContainer,\n        showAction = _props2.showAction,\n        hideAction = _props2.hideAction,\n        overlayClassName = _props2.overlayClassName,\n        overlayStyle = _props2.overlayStyle,\n        trigger = _props2.trigger,\n        otherProps = _objectWithoutProperties(_props2, ['prefixCls', 'transitionName', 'animation', 'align', 'placement', 'getPopupContainer', 'showAction', 'hideAction', 'overlayClassName', 'overlayStyle', 'trigger']);\n\n    var triggerHideAction = hideAction;\n\n    if (!triggerHideAction && trigger.indexOf('contextMenu') !== -1) {\n      triggerHideAction = ['click'];\n    }\n\n    return React.createElement(Trigger, _extends({}, otherProps, {\n      prefixCls: prefixCls,\n      ref: this.saveTrigger,\n      popupClassName: overlayClassName,\n      popupStyle: overlayStyle,\n      builtinPlacements: placements,\n      action: trigger,\n      showAction: showAction,\n      hideAction: triggerHideAction || [],\n      popupPlacement: placement,\n      popupAlign: align,\n      popupTransitionName: transitionName,\n      popupAnimation: animation,\n      popupVisible: this.state.visible,\n      afterPopupVisibleChange: this.afterVisibleChange,\n      popup: this.getMenuElementOrLambda(),\n      onPopupVisibleChange: this.onVisibleChange,\n      getPopupContainer: getPopupContainer\n    }), this.renderChildren());\n  };\n\n  return Dropdown;\n}(Component);\n\nDropdown.propTypes = {\n  minOverlayWidthMatchTrigger: PropTypes.bool,\n  onVisibleChange: PropTypes.func,\n  onOverlayClick: PropTypes.func,\n  prefixCls: PropTypes.string,\n  children: PropTypes.any,\n  transitionName: PropTypes.string,\n  overlayClassName: PropTypes.string,\n  openClassName: PropTypes.string,\n  animation: PropTypes.any,\n  align: PropTypes.object,\n  overlayStyle: PropTypes.object,\n  placement: PropTypes.string,\n  overlay: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  trigger: PropTypes.array,\n  alignPoint: PropTypes.bool,\n  showAction: PropTypes.array,\n  hideAction: PropTypes.array,\n  getPopupContainer: PropTypes.func,\n  visible: PropTypes.bool,\n  defaultVisible: PropTypes.bool\n};\nDropdown.defaultProps = {\n  prefixCls: 'rc-dropdown',\n  trigger: ['hover'],\n  showAction: [],\n  overlayClassName: '',\n  overlayStyle: {},\n  defaultVisible: false,\n  onVisibleChange: function onVisibleChange() {},\n  placement: 'bottomLeft'\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onClick = function (e) {\n    var props = _this2.props;\n\n    var overlayProps = _this2.getOverlayElement().props; // do no call onVisibleChange, if you need click to hide, use onClick and control visible\n\n\n    if (!('visible' in props)) {\n      _this2.setState({\n        visible: false\n      });\n    }\n\n    if (props.onOverlayClick) {\n      props.onOverlayClick(e);\n    }\n\n    if (overlayProps.onClick) {\n      overlayProps.onClick(e);\n    }\n  };\n\n  this.onVisibleChange = function (visible) {\n    var props = _this2.props;\n\n    if (!('visible' in props)) {\n      _this2.setState({\n        visible: visible\n      });\n    }\n\n    props.onVisibleChange(visible);\n  };\n\n  this.getMinOverlayWidthMatchTrigger = function () {\n    var _props3 = _this2.props,\n        minOverlayWidthMatchTrigger = _props3.minOverlayWidthMatchTrigger,\n        alignPoint = _props3.alignPoint;\n\n    if ('minOverlayWidthMatchTrigger' in _this2.props) {\n      return minOverlayWidthMatchTrigger;\n    }\n\n    return !alignPoint;\n  };\n\n  this.getMenuElement = function () {\n    var prefixCls = _this2.props.prefixCls;\n\n    var overlayElement = _this2.getOverlayElement();\n\n    var extraOverlayProps = {\n      prefixCls: prefixCls + '-menu',\n      onClick: _this2.onClick\n    };\n\n    if (typeof overlayElement.type === 'string') {\n      delete extraOverlayProps.prefixCls;\n    }\n\n    return React.cloneElement(overlayElement, extraOverlayProps);\n  };\n\n  this.afterVisibleChange = function (visible) {\n    if (visible && _this2.getMinOverlayWidthMatchTrigger()) {\n      var overlayNode = _this2.getPopupDomNode();\n\n      var rootNode = ReactDOM.findDOMNode(_this2);\n\n      if (rootNode && overlayNode && rootNode.offsetWidth > overlayNode.offsetWidth) {\n        overlayNode.style.minWidth = rootNode.offsetWidth + 'px';\n\n        if (_this2.trigger && _this2.trigger._component && _this2.trigger._component.alignInstance) {\n          _this2.trigger._component.alignInstance.forceAlign();\n        }\n      }\n    }\n  };\n\n  this.saveTrigger = function (node) {\n    _this2.trigger = node;\n  };\n};\n\npolyfill(Dropdown);\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}