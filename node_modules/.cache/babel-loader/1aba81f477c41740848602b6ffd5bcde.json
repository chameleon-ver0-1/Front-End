{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { alignElement, alignPoint } from 'dom-align';\nimport addEventListener from 'rc-util/es/Dom/addEventListener';\nimport { isWindow, buffer, isSamePoint, isSimilarValue, restoreFocus } from './util';\n\nfunction getElement(func) {\n  if (typeof func !== 'function' || !func) return null;\n  return func();\n}\n\nfunction getPoint(point) {\n  if (typeof point !== 'object' || !point) return null;\n  return point;\n}\n\nvar Align = function (_Component) {\n  _inherits(Align, _Component);\n\n  function Align() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Align);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Align.__proto__ || Object.getPrototypeOf(Align)).call.apply(_ref, [this].concat(args))), _this), _this.forceAlign = function () {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          target = _this$props.target,\n          align = _this$props.align,\n          onAlign = _this$props.onAlign;\n\n      if (!disabled && target) {\n        var source = ReactDOM.findDOMNode(_this);\n        var result = void 0;\n        var element = getElement(target);\n        var point = getPoint(target); // IE lose focus after element realign\n        // We should record activeElement and restore later\n\n        var activeElement = document.activeElement;\n\n        if (element) {\n          result = alignElement(source, element, align);\n        } else if (point) {\n          result = alignPoint(source, point, align);\n        }\n\n        restoreFocus(activeElement, source);\n\n        if (onAlign) {\n          onAlign(source, result);\n        }\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Align, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var props = this.props; // if parent ref not attached .... use document.getElementById\n\n      this.forceAlign();\n\n      if (!props.disabled && props.monitorWindowResize) {\n        this.startMonitorWindowResize();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var reAlign = false;\n      var props = this.props;\n\n      if (!props.disabled) {\n        var source = ReactDOM.findDOMNode(this);\n        var sourceRect = source ? source.getBoundingClientRect() : null;\n\n        if (prevProps.disabled) {\n          reAlign = true;\n        } else {\n          var lastElement = getElement(prevProps.target);\n          var currentElement = getElement(props.target);\n          var lastPoint = getPoint(prevProps.target);\n          var currentPoint = getPoint(props.target);\n\n          if (isWindow(lastElement) && isWindow(currentElement)) {\n            // Skip if is window\n            reAlign = false;\n          } else if (lastElement !== currentElement || // Element change\n          lastElement && !currentElement && currentPoint || // Change from element to point\n          lastPoint && currentPoint && currentElement || // Change from point to element\n          currentPoint && !isSamePoint(lastPoint, currentPoint)) {\n            reAlign = true;\n          } // If source element size changed\n\n\n          var preRect = this.sourceRect || {};\n\n          if (!reAlign && source && (!isSimilarValue(preRect.width, sourceRect.width) || !isSimilarValue(preRect.height, sourceRect.height))) {\n            reAlign = true;\n          }\n        }\n\n        this.sourceRect = sourceRect;\n      }\n\n      if (reAlign) {\n        this.forceAlign();\n      }\n\n      if (props.monitorWindowResize && !props.disabled) {\n        this.startMonitorWindowResize();\n      } else {\n        this.stopMonitorWindowResize();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.stopMonitorWindowResize();\n    }\n  }, {\n    key: 'startMonitorWindowResize',\n    value: function startMonitorWindowResize() {\n      if (!this.resizeHandler) {\n        this.bufferMonitor = buffer(this.forceAlign, this.props.monitorBufferTime);\n        this.resizeHandler = addEventListener(window, 'resize', this.bufferMonitor);\n      }\n    }\n  }, {\n    key: 'stopMonitorWindowResize',\n    value: function stopMonitorWindowResize() {\n      if (this.resizeHandler) {\n        this.bufferMonitor.clear();\n        this.resizeHandler.remove();\n        this.resizeHandler = null;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          childrenProps = _props.childrenProps,\n          children = _props.children;\n      var child = React.Children.only(children);\n\n      if (childrenProps) {\n        var newProps = {};\n        var propList = Object.keys(childrenProps);\n        propList.forEach(function (prop) {\n          newProps[prop] = _this2.props[childrenProps[prop]];\n        });\n        return React.cloneElement(child, newProps);\n      }\n\n      return child;\n    }\n  }]);\n\n  return Align;\n}(Component);\n\nAlign.propTypes = {\n  childrenProps: PropTypes.object,\n  align: PropTypes.object.isRequired,\n  target: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    clientX: PropTypes.number,\n    clientY: PropTypes.number,\n    pageX: PropTypes.number,\n    pageY: PropTypes.number\n  })]),\n  onAlign: PropTypes.func,\n  monitorBufferTime: PropTypes.number,\n  monitorWindowResize: PropTypes.bool,\n  disabled: PropTypes.bool,\n  children: PropTypes.any\n};\nAlign.defaultProps = {\n  target: function target() {\n    return window;\n  },\n  monitorBufferTime: 50,\n  monitorWindowResize: false,\n  disabled: false\n};\nexport default Align;","map":null,"metadata":{},"sourceType":"module"}