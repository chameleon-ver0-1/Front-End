{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Since search box is in different position with different mode.\n * - Single: in the popup box\n * - multiple: in the selector\n * Move the code as a SearchInput for easy management.\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { createRef } from './util';\nexport var searchContextTypes = {\n  onSearchInputChange: PropTypes.func.isRequired\n};\n\nvar SearchInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchInput, _React$Component);\n\n  function SearchInput() {\n    var _this;\n\n    _classCallCheck(this, SearchInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchInput).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"alignInputWidth\", function () {\n      _this.inputRef.current.style.width = \"\".concat(_this.mirrorInputRef.current.clientWidth, \"px\");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focus\", function (isDidMount) {\n      if (_this.inputRef.current) {\n        _this.inputRef.current.focus();\n\n        if (isDidMount) {\n          setTimeout(function () {\n            _this.inputRef.current.focus();\n          }, 0);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"blur\", function () {\n      if (_this.inputRef.current) {\n        _this.inputRef.current.blur();\n      }\n    });\n\n    _this.inputRef = createRef();\n    _this.mirrorInputRef = createRef();\n    return _this;\n  }\n\n  _createClass(SearchInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          needAlign = _this$props.needAlign;\n\n      if (needAlign) {\n        this.alignInputWidth();\n      }\n\n      if (open) {\n        this.focus(true);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          searchValue = _this$props2.searchValue,\n          needAlign = _this$props2.needAlign;\n\n      if (open && prevProps.open !== open) {\n        this.focus();\n      }\n\n      if (needAlign && searchValue !== prevProps.searchValue) {\n        this.alignInputWidth();\n      }\n    }\n    /**\n     * `scrollWidth` is not correct in IE, do the workaround.\n     * ref: https://github.com/react-component/tree-select/issues/65\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          searchValue = _this$props3.searchValue,\n          prefixCls = _this$props3.prefixCls,\n          disabled = _this$props3.disabled,\n          renderPlaceholder = _this$props3.renderPlaceholder,\n          open = _this$props3.open,\n          ariaId = _this$props3.ariaId;\n      var _this$context$rcTreeS = this.context.rcTreeSelect,\n          onSearchInputChange = _this$context$rcTreeS.onSearchInputChange,\n          onSearchInputKeyDown = _this$context$rcTreeS.onSearchInputKeyDown;\n      return React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-search__field__wrap\")\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        ref: this.inputRef,\n        onChange: onSearchInputChange,\n        onKeyDown: onSearchInputKeyDown,\n        value: searchValue,\n        disabled: disabled,\n        className: \"\".concat(prefixCls, \"-search__field\"),\n        \"aria-label\": \"filter select\",\n        \"aria-autocomplete\": \"list\",\n        \"aria-controls\": open ? ariaId : undefined,\n        \"aria-multiline\": \"false\"\n      }), React.createElement(\"span\", {\n        ref: this.mirrorInputRef,\n        className: \"\".concat(prefixCls, \"-search__field__mirror\")\n      }, searchValue, \"\\xA0\"), renderPlaceholder ? renderPlaceholder() : null);\n    }\n  }]);\n\n  return SearchInput;\n}(React.Component);\n\n_defineProperty(SearchInput, \"propTypes\", {\n  open: PropTypes.bool,\n  searchValue: PropTypes.string,\n  prefixCls: PropTypes.string,\n  disabled: PropTypes.bool,\n  renderPlaceholder: PropTypes.func,\n  needAlign: PropTypes.bool,\n  ariaId: PropTypes.string\n});\n\n_defineProperty(SearchInput, \"contextTypes\", {\n  rcTreeSelect: PropTypes.shape(_objectSpread({}, searchContextTypes))\n});\n\npolyfill(SearchInput);\nexport default SearchInput;","map":null,"metadata":{},"sourceType":"module"}