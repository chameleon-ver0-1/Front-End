{"ast":null,"code":"import _defineProperty from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\React\\\\react-gradu\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\React\\\\react-gradu\\\\src\\\\components\\\\independent\\\\issue\\\\issues\\\\Issues.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport InitialData from \"../testItem-data\";\nimport IssueAdd from \"../issueAdd\";\nimport \"./issues.style.css\";\nimport IssueBox from \"./IssueBox\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nexport var Issues =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Issues, _Component);\n\n  function Issues() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Issues);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Issues)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = InitialData;\n\n    _this.onDragStart = function () {// document.childNodes.backgroundColor = \"orange\";\n    };\n\n    _this.onDragUpdate = function (update) {// const { destination } = update;\n      // const opacity = destination\n      //   ? destination.index / Object.keys(this.state.tasks).length\n      //   : 0;\n      // const issueName = document.querySelector(\".issueItem-container\");\n      // issueName.style.backgroundColor = `rgba(153,141,217, ${opacity})`;\n    };\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      // const issueName = document.querySelector(\".issues-body\");\n      // issueName.style.color = \"inherit\";\n      // issueName.style.backgroundColor = \"inherit\";\n      //TODO:reorder our column\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var start = _this.state.columns[source.droppableId];\n      var finish = _this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        var newItemIds = Array.from(start.taskIds);\n        newItemIds.splice(source.index, 1);\n        newItemIds.splice(destination.index, 0, draggableId);\n\n        var newColumn = _objectSpread({}, start, {\n          taskIds: newItemIds\n        });\n\n        var _newState = _objectSpread({}, _this.state, {\n          columns: _objectSpread({}, _this.state.columns, _defineProperty({}, newColumn.id, newColumn))\n        });\n\n        _this.setState(_newState);\n\n        return;\n      } //Moving from one list to another\n\n\n      var startItemIds = Array.from(start.taskIds);\n      startItemIds.splice(source.index, 1);\n\n      var newStart = _objectSpread({}, start, {\n        taskIds: startItemIds\n      });\n\n      var finishItemIds = Array.from(finish.taskIds);\n      finishItemIds.splice(destination.index, 0, draggableId);\n\n      var newFinish = _objectSpread({}, finish, {\n        taskIds: finishItemIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n      });\n\n      _this.setState(newState);\n\n      return;\n    };\n\n    return _this;\n  }\n\n  _createClass(Issues, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"issue-big\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, Object.keys(this.state.columns).map(function (columnId) {\n        var column = _this2.state.columns[columnId];\n        var tasks = column.taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        });\n        return React.createElement(\"div\", {\n          className: \"issues-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(IssueBox, {\n          key: column.id,\n          column: column,\n          tasks: tasks,\n          count: column.count,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Issues;\n}(Component);\nexport default Issues;","map":{"version":3,"sources":["C:\\React\\react-gradu\\src\\components\\independent\\issue\\issues\\Issues.jsx"],"names":["React","Component","Fragment","InitialData","IssueAdd","IssueBox","DragDropContext","Issues","state","onDragStart","onDragUpdate","update","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newItemIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startItemIds","newStart","finishItemIds","newFinish","Object","keys","map","columnId","column","tasks","taskId","count"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\n\r\nimport InitialData from \"../testItem-data\";\r\n\r\nimport IssueAdd from \"../issueAdd\";\r\nimport \"./issues.style.css\";\r\n\r\nimport IssueBox from \"./IssueBox\";\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nexport class Issues extends Component {\r\n  state = InitialData;\r\n\r\n  onDragStart = () => {\r\n    // document.childNodes.backgroundColor = \"orange\";\r\n  };\r\n\r\n  onDragUpdate = update => {\r\n    // const { destination } = update;\r\n    // const opacity = destination\r\n    //   ? destination.index / Object.keys(this.state.tasks).length\r\n    //   : 0;\r\n    // const issueName = document.querySelector(\".issueItem-container\");\r\n    // issueName.style.backgroundColor = `rgba(153,141,217, ${opacity})`;\r\n  };\r\n  onDragEnd = result => {\r\n    // const issueName = document.querySelector(\".issues-body\");\r\n    // issueName.style.color = \"inherit\";\r\n    // issueName.style.backgroundColor = \"inherit\";\r\n\r\n    //TODO:reorder our column\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId];\r\n    const finish = this.state.columns[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newItemIds = Array.from(start.taskIds);\r\n      newItemIds.splice(source.index, 1);\r\n      newItemIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        taskIds: newItemIds\r\n      };\r\n      const newState = {\r\n        ...this.state,\r\n        columns: {\r\n          ...this.state.columns,\r\n          [newColumn.id]: newColumn\r\n        }\r\n      };\r\n\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    //Moving from one list to another\r\n\r\n    const startItemIds = Array.from(start.taskIds);\r\n    startItemIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startItemIds\r\n    };\r\n\r\n    const finishItemIds = Array.from(finish.taskIds);\r\n    finishItemIds.splice(destination.index, 0, draggableId);\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishItemIds\r\n    };\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish\r\n      }\r\n    };\r\n    this.setState(newState);\r\n    return;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"issue-big\">\r\n        <DragDropContext\r\n          onDragStart={this.onDragStart}\r\n          onDragUpdate={this.onDragUpdate}\r\n          onDragEnd={this.onDragEnd}\r\n        >\r\n          {Object.keys(this.state.columns).map(columnId => {\r\n            const column = this.state.columns[columnId];\r\n            const tasks = column.taskIds.map(\r\n              taskId => this.state.tasks[taskId]\r\n            );\r\n\r\n            return (\r\n              <div className=\"issues-3\">\r\n                <IssueBox\r\n                  key={column.id}\r\n                  column={column}\r\n                  tasks={tasks}\r\n                  count={column.count}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </DragDropContext>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Issues;\r\n"]},"metadata":{},"sourceType":"module"}