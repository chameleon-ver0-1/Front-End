{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport shallowEqual from 'shallowequal';\nimport omit from 'omit.js';\nimport Checkbox from './Checkbox';\nimport { ConfigConsumer } from '../config-provider';\n\nvar CheckboxGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CheckboxGroup, _React$Component);\n\n  function CheckboxGroup(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxGroup).call(this, props));\n\n    _this.registerValue = function (value) {\n      _this.setState(function (_ref) {\n        var registeredValues = _ref.registeredValues;\n        return {\n          registeredValues: [].concat(_toConsumableArray(registeredValues), [value])\n        };\n      });\n    };\n\n    _this.cancelValue = function (value) {\n      _this.setState(function (_ref2) {\n        var registeredValues = _ref2.registeredValues;\n        return {\n          registeredValues: registeredValues.filter(function (val) {\n            return val !== value;\n          })\n        };\n      });\n    };\n\n    _this.toggleOption = function (option) {\n      var registeredValues = _this.state.registeredValues;\n\n      var optionIndex = _this.state.value.indexOf(option.value);\n\n      var value = _toConsumableArray(_this.state.value);\n\n      if (optionIndex === -1) {\n        value.push(option.value);\n      } else {\n        value.splice(optionIndex, 1);\n      }\n\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(value.filter(function (val) {\n          return registeredValues.indexOf(val) !== -1;\n        }));\n      }\n    };\n\n    _this.renderGroup = function (_ref3) {\n      var getPrefixCls = _ref3.getPrefixCls;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          props = _assertThisInitialize.props,\n          state = _assertThisInitialize.state;\n\n      var customizePrefixCls = props.prefixCls,\n          className = props.className,\n          style = props.style,\n          options = props.options,\n          restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"options\"]);\n\n      var prefixCls = getPrefixCls('checkbox', customizePrefixCls);\n      var groupPrefixCls = \"\".concat(prefixCls, \"-group\");\n      var domProps = omit(restProps, ['children', 'defaultValue', 'value', 'onChange', 'disabled']);\n      var children = props.children;\n\n      if (options && options.length > 0) {\n        children = _this.getOptions().map(function (option) {\n          return React.createElement(Checkbox, {\n            prefixCls: prefixCls,\n            key: option.value.toString(),\n            disabled: 'disabled' in option ? option.disabled : props.disabled,\n            value: option.value,\n            checked: state.value.indexOf(option.value) !== -1,\n            onChange: option.onChange,\n            className: \"\".concat(groupPrefixCls, \"-item\")\n          }, option.label);\n        });\n      }\n\n      var classString = classNames(groupPrefixCls, className);\n      return React.createElement(\"div\", _extends({\n        className: classString,\n        style: style\n      }, domProps), children);\n    };\n\n    _this.state = {\n      value: props.value || props.defaultValue || [],\n      registeredValues: []\n    };\n    return _this;\n  }\n\n  _createClass(CheckboxGroup, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        checkboxGroup: {\n          toggleOption: this.toggleOption,\n          value: this.state.value,\n          disabled: this.props.disabled,\n          name: this.props.name,\n          // https://github.com/ant-design/ant-design/issues/16376\n          registerValue: this.registerValue,\n          cancelValue: this.cancelValue\n        }\n      };\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      var options = this.props.options; // https://github.com/Microsoft/TypeScript/issues/7960\n\n      return options.map(function (option) {\n        if (typeof option === 'string') {\n          return {\n            label: option,\n            value: option\n          };\n        }\n\n        return option;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderGroup);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('value' in nextProps) {\n        return {\n          value: nextProps.value || []\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return CheckboxGroup;\n}(React.Component);\n\nCheckboxGroup.defaultProps = {\n  options: []\n};\nCheckboxGroup.propTypes = {\n  defaultValue: PropTypes.array,\n  value: PropTypes.array,\n  options: PropTypes.array.isRequired,\n  onChange: PropTypes.func\n};\nCheckboxGroup.childContextTypes = {\n  checkboxGroup: PropTypes.any\n};\npolyfill(CheckboxGroup);\nexport default CheckboxGroup;","map":null,"metadata":{},"sourceType":"module"}