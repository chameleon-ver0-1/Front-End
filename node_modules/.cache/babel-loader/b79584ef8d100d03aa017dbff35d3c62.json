{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\nimport PureRenderMixin from \"rc-util/es/PureRenderMixin\";\nimport Checkbox from '../checkbox';\nimport Search from './search';\nimport defaultRenderList, { OmitProps } from './renderListBody';\nimport triggerEvent from '../_util/triggerEvent';\n\nvar defaultRender = function defaultRender() {\n  return null;\n};\n\nfunction isRenderResultPlainObject(result) {\n  return result && !React.isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]';\n}\n\nfunction renderListNode(renderList, props) {\n  var bodyContent = renderList ? renderList(props) : null;\n  var customize = !!bodyContent;\n\n  if (!customize) {\n    bodyContent = defaultRenderList(props);\n  }\n\n  return {\n    customize: customize,\n    bodyContent: bodyContent\n  };\n}\n\nvar TransferList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TransferList, _React$Component);\n\n  function TransferList(props) {\n    var _this;\n\n    _classCallCheck(this, TransferList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransferList).call(this, props));\n\n    _this.handleFilter = function (e) {\n      var filterValue = e.target.value;\n\n      _this.setState({\n        filterValue: filterValue\n      });\n\n      _this.props.handleFilter(e);\n\n      if (!filterValue) {\n        return;\n      } // Manually trigger scroll event for lazy search bug\n      // https://github.com/ant-design/ant-design/issues/5631\n\n\n      _this.triggerScrollTimer = window.setTimeout(function () {\n        var transferNode = ReactDOM.findDOMNode(_assertThisInitialized(_this));\n        var listNode = transferNode.querySelectorAll('.ant-transfer-list-content')[0];\n\n        if (listNode) {\n          triggerEvent(listNode, 'scroll');\n        }\n      }, 0);\n    };\n\n    _this.handleClear = function () {\n      _this.setState({\n        filterValue: ''\n      });\n\n      _this.props.handleClear();\n    };\n\n    _this.matchFilter = function (text, item) {\n      var filterValue = _this.state.filterValue;\n      var filterOption = _this.props.filterOption;\n\n      if (filterOption) {\n        return filterOption(filterValue, item);\n      }\n\n      return text.indexOf(filterValue) >= 0;\n    };\n\n    _this.renderItem = function (item) {\n      var _this$props$render = _this.props.render,\n          render = _this$props$render === void 0 ? defaultRender : _this$props$render;\n      var renderResult = render(item);\n      var isRenderResultPlain = isRenderResultPlainObject(renderResult);\n      return {\n        renderedText: isRenderResultPlain ? renderResult.value : renderResult,\n        renderedEl: isRenderResultPlain ? renderResult.label : renderResult,\n        item: item\n      };\n    };\n\n    _this.state = {\n      filterValue: ''\n    };\n    return _this;\n  }\n\n  _createClass(TransferList, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.triggerScrollTimer);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return PureRenderMixin.shouldComponentUpdate.apply(this, args);\n    }\n  }, {\n    key: \"getCheckStatus\",\n    value: function getCheckStatus(filteredItems) {\n      var checkedKeys = this.props.checkedKeys;\n\n      if (checkedKeys.length === 0) {\n        return 'none';\n      } else if (filteredItems.every(function (item) {\n        return checkedKeys.indexOf(item.key) >= 0 || !!item.disabled;\n      })) {\n        return 'all';\n      }\n\n      return 'part';\n    }\n  }, {\n    key: \"getFilteredItems\",\n    value: function getFilteredItems(dataSource, filterValue) {\n      var _this2 = this;\n\n      var filteredItems = [];\n      var filteredRenderItems = [];\n      dataSource.forEach(function (item) {\n        var renderedItem = _this2.renderItem(item);\n\n        var renderedText = renderedItem.renderedText; // Filter skip\n\n        if (filterValue && filterValue.trim() && !_this2.matchFilter(renderedText, item)) {\n          return null;\n        }\n\n        filteredItems.push(item);\n        filteredRenderItems.push(renderedItem);\n      });\n      return {\n        filteredItems: filteredItems,\n        filteredRenderItems: filteredRenderItems\n      };\n    }\n  }, {\n    key: \"getListBody\",\n    value: function getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled) {\n      var search = showSearch ? React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body-search-wrapper\")\n      }, React.createElement(Search, {\n        prefixCls: \"\".concat(prefixCls, \"-search\"),\n        onChange: this.handleFilter,\n        handleClear: this.handleClear,\n        placeholder: searchPlaceholder,\n        value: filterValue,\n        disabled: disabled\n      })) : null;\n      var searchNotFound = !filteredItems.length && React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body-not-found\")\n      }, notFoundContent);\n      var listBody = bodyDom;\n\n      if (!listBody) {\n        var bodyNode = searchNotFound;\n\n        if (!bodyNode) {\n          var _renderListNode = renderListNode(renderList, _extends({}, omit(this.props, OmitProps), {\n            filteredItems: filteredItems,\n            filteredRenderItems: filteredRenderItems,\n            selectedKeys: checkedKeys\n          })),\n              bodyContent = _renderListNode.bodyContent,\n              customize = _renderListNode.customize; // We should wrap customize list body in a classNamed div to use flex layout.\n\n\n          bodyNode = customize ? React.createElement(\"div\", {\n            className: \"\".concat(prefixCls, \"-body-customize-wrapper\")\n          }, bodyContent) : bodyContent;\n        }\n\n        listBody = React.createElement(\"div\", {\n          className: classNames(showSearch ? \"\".concat(prefixCls, \"-body \").concat(prefixCls, \"-body-with-search\") : \"\".concat(prefixCls, \"-body\"))\n        }, search, bodyNode);\n      }\n\n      return listBody;\n    }\n  }, {\n    key: \"getCheckBox\",\n    value: function getCheckBox(filteredItems, onItemSelectAll, showSelectAll, disabled) {\n      var checkStatus = this.getCheckStatus(filteredItems);\n      var checkedAll = checkStatus === 'all';\n      var checkAllCheckbox = showSelectAll !== false && React.createElement(Checkbox, {\n        disabled: disabled,\n        checked: checkedAll,\n        indeterminate: checkStatus === 'part',\n        onChange: function onChange() {\n          // Only select enabled items\n          onItemSelectAll(filteredItems.filter(function (item) {\n            return !item.disabled;\n          }).map(function (_ref) {\n            var key = _ref.key;\n            return key;\n          }), !checkedAll);\n        }\n      });\n      return checkAllCheckbox;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var filterValue = this.state.filterValue;\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          dataSource = _this$props.dataSource,\n          titleText = _this$props.titleText,\n          checkedKeys = _this$props.checkedKeys,\n          disabled = _this$props.disabled,\n          body = _this$props.body,\n          footer = _this$props.footer,\n          showSearch = _this$props.showSearch,\n          style = _this$props.style,\n          searchPlaceholder = _this$props.searchPlaceholder,\n          notFoundContent = _this$props.notFoundContent,\n          itemUnit = _this$props.itemUnit,\n          itemsUnit = _this$props.itemsUnit,\n          renderList = _this$props.renderList,\n          onItemSelectAll = _this$props.onItemSelectAll,\n          showSelectAll = _this$props.showSelectAll; // Custom Layout\n\n      var footerDom = footer && footer(this.props);\n      var bodyDom = body && body(this.props);\n      var listCls = classNames(prefixCls, _defineProperty({}, \"\".concat(prefixCls, \"-with-footer\"), !!footerDom)); // ====================== Get filtered, checked item list ======================\n\n      var _this$getFilteredItem = this.getFilteredItems(dataSource, filterValue),\n          filteredItems = _this$getFilteredItem.filteredItems,\n          filteredRenderItems = _this$getFilteredItem.filteredRenderItems; // ================================= List Body =================================\n\n\n      var unit = dataSource.length > 1 ? itemsUnit : itemUnit;\n      var listBody = this.getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled); // ================================ List Footer ================================\n\n      var listFooter = footerDom ? React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-footer\")\n      }, footerDom) : null;\n      var checkAllCheckbox = this.getCheckBox(filteredItems, onItemSelectAll, showSelectAll, disabled); // ================================== Render ===================================\n\n      return React.createElement(\"div\", {\n        className: listCls,\n        style: style\n      }, React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-header\")\n      }, checkAllCheckbox, React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-header-selected\")\n      }, React.createElement(\"span\", null, (checkedKeys.length > 0 ? \"\".concat(checkedKeys.length, \"/\") : '') + filteredItems.length, ' ', unit), React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-header-title\")\n      }, titleText))), listBody, listFooter);\n    }\n  }]);\n\n  return TransferList;\n}(React.Component);\n\nexport { TransferList as default };\nTransferList.defaultProps = {\n  dataSource: [],\n  titleText: '',\n  showSearch: false,\n  lazy: {}\n};","map":null,"metadata":{},"sourceType":"module"}